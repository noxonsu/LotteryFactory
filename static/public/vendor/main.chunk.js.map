{"version":3,"sources":["config/constants/farms.ts","hooks/useIsWindowVisible.ts","state/block/hooks.ts","config/index.ts","utils/web3React.ts","contexts/Localization/helpers.ts","utils/farmHelpers.ts","config/constants/priceHelperLps.ts","state/farms/fetchPublicFarmData.ts","state/farms/fetchFarm.ts","state/farms/fetchFarms.ts","utils/farmsPriceHelpers.ts","state/farms/fetchFarmsPrices.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","components/Toast/types.ts","components/Toast/Toast.tsx","components/Toast/ToastContainer.tsx","utils/truncateHash.ts","components/Toast/DescriptionWithTx.tsx","config/constants/lottery.ts","hooks/useToast.ts","state/nftMarket/reducer.ts","contexts/ToastsContext/Provider.tsx","contexts/ToastsContext/Listener.tsx","state/profile/helpers.ts","hooks/useContract.ts","utils/wrappedCurrency.ts","state/teams/helpers.ts","config/constants/teams.ts","hooks/usePairs.ts","config/constants/ifo.ts","hooks/useRefresh.ts","utils/getRpcUrl.ts","state/block/index.ts","state/lottery/getUserLotteryData.ts","contexts/RefreshContext.tsx","config/constants/campaigns.ts","utils/achievements.ts","state/achievements/helpers.ts","state/types.ts","hooks/usePreviousValue.ts","config/constants/tokens.ts","config/constants/contracts.ts","utils/addressHelpers.ts","state/user/hooks/index.tsx","config/constants/tokens.lottery.ts","state/lottery/index.ts","state/farms/hooks.ts","state/lists/hooks.ts","state/user/hooks/useUserAddedTokens.ts","hooks/Tokens.ts","utils/wallet.ts","hooks/useAuth.ts","state/lottery/getLotteriesData.ts","state/lottery/getUserTicketsData.ts","hooks/useDebounce.ts","state/user/actions.ts","hooks/useActiveWeb3React.ts","utils/bigNumber.ts","utils/contractHelpers.ts","config/abi/erc20.ts","state/profile/hooks.ts","components/Layout/Container.tsx","hooks/useBUSDPrice.ts","components/Layout/Page.tsx","utils/multicall.ts","config/constants/endpoints.ts","state/nftMarket/helpers.ts","state/nftMarket/queries.ts","state/swap/actions.ts","state/nftMarket/types.ts","state/user/hooks/helpers.ts","config/constants/lists.ts","state/multicall/retry.ts","state/multicall/updater.tsx","state/multicall/chunkArray.ts","state/transactions/updater.tsx","hooks/useEagerConnect.ts","hooks/useUserAgent.ts","routerHistory.ts","hooks/useScrollOnRouteChange.ts","components/DatePicker/DatePickerPortal.tsx","style/Global.tsx","components/SuspenseWithChunkError/index.tsx","components/Loader/PageLoader.tsx","App.tsx","hooks/useInactiveListener.ts","Providers.tsx","index.tsx","state/multicall/actions.ts","config/constants/types.ts","config/constants/index.ts","config/constants/pools.ts","state/predictions/helpers.ts","state/pools/fetchPoolsUser.ts","views/Pools/helpers.tsx","state/pools/fetchVaultPublic.ts","state/pools/fetchVaultUser.ts","state/pools/index.ts","state/predictions/config.ts","state/predictions/queries.ts","state/predictions/index.ts","state/teams/index.tsx","state/achievements/index.ts","state/voting/helpers.ts","state/voting/index.tsx","state/info/actions.ts","state/info/index.ts","state/global/actions.ts","state/user/reducer.ts","state/mint/actions.ts","state/transactions/reducer.ts","state/swap/reducer.ts","state/burn/actions.ts","state/mint/reducer.ts","state/lists/actions.ts","state/lists/reducer.ts","state/burn/reducer.ts","state/multicall/reducer.ts","state/index.ts","utils/formatBalance.ts","utils/index.ts","state/multicall/hooks.ts","contexts/Localization/Provider.tsx","contexts/Localization/useTranslation.ts","state/transactions/actions.ts","utils/providers.ts","state/lottery/helpers.ts","state/profile/index.tsx","config/localization/languages.ts","config/constants/nftsCollections/types.ts","config/constants/nftsCollections/index.ts","views/Nft/market/constants.ts"],"names":["serializedTokens","serializeTokens","farms","pid","lpSymbol","lpAddresses","token","syrup","quoteToken","wbnb","cake","busd","zoo","sfund","gnt","isCommunity","sheesha","bcoin","qi","kart","porto","dvi","jgn","bmon","wsg","eternal","xwg","usdc","dar","fina","moni","xms","dkt","rusd","lazio","sps","cart","arv","light","mcb","rpg","beta","pros","nft","chess","mcrn","tlos","stephero","bp","bscdefi","qbt","naos","pha","bel","ramp","pots","tusd","btt","trx","win","babycake","hero","revv","skill","if","c98","axs","pmon","titan","harmony","mask","gum","adx","usdt","suter","bscpad","rabbit","waultx","wex","form","orbs","$dg","woo","htb","dft","hai","o3","ampl","oddz","eth","btcb","bondly","marsh","boring","mbox","ata","mx","bcfx","qkc","ktn","mtrg","swg","vrt","ez","kalm","popen","lien","well","deri","chr","cyc","xend","hget","hotcross","rfox","wmass","ubxt","btr","τdoge","one","fine","doge","bmxx","oin","hyfi","kun","qsd","math","mcoin","ust","pnt","pbtc","xmark","lmt","dfd","alpaca","τbtc","swingby","xed","hakka","cgg","broobee","hzn","alpa","perl","tlm","eps","arpa","itam","tko","apys","hoo","easy","nrv","dego","swth","zil","pcws","bbadger","bdigg","lto","mir","trade","dusk","bifi","txl","cos","bunny","alice","for","bux","nuls","belt","bfi","dexe","tpt","watch","iotx","bor","bopen","sushi","dodo","bry","zee","swgb","comp","sfp","lina","lit","bdo","egld","mamzn","mgoogl","mnflx","mtsla","wsote","front","helmet","btcst","ltc","dai","bscx","ten","balbt","reef","ditto","vai","blink","unfi","hard","ctk","sxp","inj","fil","uni","yfi","atom","xrp","alpha","xvs","twt","link","eos","dot","band","ada","yfii","beth","og","asr","atm","juv","psg","xtz","bch","stax","nar","nya","bake","burger","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","useIsWindowVisible","useState","isVisible","setIsVisible","useEffect","handleVisibilityChange","addEventListener","removeEventListener","usePollBlockNumber","refreshTime","timer","useRef","dispatch","useAppDispatch","current","setInterval","a","simpleRpcProvider","getBlockNumber","blockNumber","setBlock","clearInterval","useBlock","useSelector","state","block","BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BASE_BSC_SCAN_URLS","ChainId","MAINNET","TESTNET","BLOCKS_PER_YEAR","CAKE_PER_YEAR","BASE_URL","DEFAULT_TOKEN_DECIMAL","BIG_TEN","pow","DEFAULT_GAS_LIMIT","IPFS_GATEWAY","rpcUrl","getNodeUrl","chainId","parseInt","window","SO_LotteryConfig","injected","InjectedConnector","supportedChainIds","walletconnect","WalletConnectConnector","rpc","qrcode","pollingInterval","bscConnector","BscConnector","connectorsByName","ConnectorNames","Injected","WalletConnect","BSC","getLibrary","provider","library","ethers","providers","Web3Provider","LS_KEY","fetchLocale","locale","fetch","process","response","json","data","getLanguageCodeFromLS","localStorage","getItem","EN","isArchivedPid","priceHelperLps","tokens","fetchFarm","farm","lpAddress","getAddress","calls","address","name","params","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","tokenAmountTotal","quoteTokenAmountTotal","quoteTokenAmountMc","times","lpTotalInQuoteToken","masterchefABI","info","totalAllocPoint","allocPoint","_hex","BIG_ZERO","poolWeight","toJSON","tokenPriceVsQuote","multiplier","toString","fetchPublicFarmData","farmPublicData","fetchFarms","farmsToFetch","Promise","all","map","farmConfig","serializedFarm","filterFarmsByQuoteToken","preferredQuoteTokens","preferredFarm","find","some","symbol","getFarmFromTokenSymbol","tokenSymbol","farmsWithTokenSymbol","filter","getFarmBaseTokenPrice","quoteTokenFarm","bnbPriceBusd","hasTokenPriceVsQuote","Boolean","quoteTokenInBusd","getFarmQuoteTokenPrice","BIG_ONE","fetchFarmsPrices","bnbBusdFarm","farmsWithPrices","tokenPriceBusd","quoteTokenPriceBusd","fetchFarmUserAllowances","account","masterChefAddress","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsConfig","userData","allowance","loadArchivedFarmsData","userDataLoaded","nonArchivedFarms","fetchFarmsPublicDataAsync","createAsyncThunk","pids","includes","farmsWithPriceHelpers","concat","priceHelperLpsConfig","farmsWithoutHelperLps","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","index","farmsSlice","createSlice","reducers","extraReducers","builder","addCase","fulfilled","action","liveFarmData","payload","farmData","forEach","userDataEl","findIndex","types","SUCCESS","DANGER","WARNING","INFO","alertTypeMap","alertVariants","StyledToast","styled","theme","mediaQueries","sm","Toast","toast","onRemove","style","ttl","props","ref","removeHandler","id","title","description","type","handleRemove","useCallback","clearTimeout","setTimeout","CSSTransition","nodeRef","timeout","onMouseEnter","onMouseLeave","variant","onClick","StyledToastContainer","ToastContainer","toasts","stackSpacing","TransitionGroup","zIndex","top","truncateHash","startLength","endLength","substring","length","DescriptionWithTx","txHash","children","useActiveWeb3React","t","useTranslation","as","external","href","getBscScanLink","TICKET_LIMIT_PER_REQUEST","NUM_ROUNDS_TO_CHECK_FOR_REWARDS","NUM_ROUNDS_TO_FETCH_FROM_NODES","useToast","toastContext","useContext","ToastsContext","undefined","Error","initialNftFilterState","loadingState","NftFilterLoadingState","IDLE","activeFilters","showOnlyOnSale","ordering","field","direction","initializationState","NFTMarketInitializationState","UNINITIALIZED","collections","nfts","filters","isUpdatingPancakeBunnies","latestPancakeBunniesUpdateAt","users","user","userNftsInitializationState","UserNftInitializationState","activity","askOrderHistory","buyTradeHistory","sellTradeHistory","fetchCollections","getCollectionsApi","getCollectionsSg","collectionsMarket","combineCollectionData","fetchCollection","collectionAddress","getCollectionApi","getCollectionSg","collection","collectionMarket","fetchNftsFromCollections","page","size","pancakeBunniesAddress","getNftsFromCollectionApi","tokenIds","Object","values","tokenId","getMarketDataForTokenIds","nftsMarket","apiMetadata","marketData","collectionName","image","attributes","console","error","filterNftsFromCollection","nftFilters","attrParams","reduce","accum","attr","traitType","value","isEmpty","fetchNftsFiltered","attrFilters","apiToken","getNftsMarketData","tokenId_in","toLowerCase","nftTokens","apiTokenMarketData","tokenMarketData","fetchNewPBAndUpdateExisting","bunnyId","existingTokensWithBunnyId","allExistingPBTokenIds","existingMetadata","orderDirection","updatedNfts","updatedNftsMarket","updatedTokens","getMetadataWithFallback","otherId","getPancakeBunniesAttributesField","combineApiAndSgResponseToNftToken","newNfts","getNftsByBunnyIdSg","moreTokensWithRequestedBunnyId","fetchUserNfts","profileNftWithCollectionAddress","getCompleteAccountNftData","completeNftData","updateUserNft","location","NftLocation","WALLET","marketDataForNft","getNftsFromDifferentCollectionsApi","metadataForNft","removeUserNft","addUserNft","nftLocation","fetchUserActivity","getUserActivity","toLocaleLowerCase","userActivity","NftMarket","removeAllFilters","setOrdering","setShowOnlyOnSale","resetUserNftState","pending","meta","arg","LOADING","INITIALIZED","existingNftsWithoutNewOnes","nftToken","newToken","Date","now","rejected","ERROR","INITIALIZING","userNftsState","nftToUpdate","indexInState","indexOf","copyOfState","nftToRemove","splice","actions","createContext","ToastsProvider","setToasts","prevToasts","kebabCase","currentToasts","prevToast","Provider","clear","remove","toastError","toastTypes","toastInfo","toastSuccess","toastWarning","ToastListener","transformProfileResponse","profileResponse","userId","numberPoints","teamId","isActive","toNumber","points","profileContract","getProfileContract","profileApi","REACT_APP_API_PROFILE","getUsername","ok","username","getProfileAvatar","hasRegistered","getUserProfile","getNftApi","apiRes","createdAt","updatedAt","original","thumbnail","getProfile","profile","getTeam","team","Cookies","set","avatar","domain","secure","expires","useCake","useMemo","getCakeContract","getSigner","useLotteryV2Contract","getLotteryV2Contract","useContract","ABI","withSignerIfPossible","getContract","useTokenContract","tokenAddress","ERC20_ABI","useENSRegistrarContract","ENS_ABI","useENSResolverContract","ENS_PUBLIC_RESOLVER_ABI","useBytes32TokenContract","ERC20_BYTES32_ABI","useMulticallContract","getMulticallAddress","multiCallAbi","wrappedCurrency","currency","ETHER","WETH","Token","getTeamProfile","teamName","numberUsers","isJoinable","staticTeamInfo","teamsList","staticTeam","merge","getTeams","teamsById","numberTeams","nbTeams","i","push","getPancakeProfileAddress","multicallv2","profileABI","teamData","onChainTeamData","teams","images","lg","md","alt","ipfs","background","textColor","PairState","PAIR_INTERFACE","Interface","IUniswapV2PairABI","usePairs","currencies","currencyA","currencyB","pairAddresses","tokenA","tokenB","equals","Pair","results","useMultipleContractSingleData","result","reserves","loading","INVALID","NOT_EXISTS","reserve0","reserve1","sortsBefore","token0","token1","EXISTS","TokenAmount","cakeBnbLpToken","ifos","poolBasic","saleAmount","raiseAmount","cakeToBurn","distributionRatio","poolUnlimited","releaseBlockNumber","campaignId","articleUrl","tokenOfferingPrice","version","useRefresh","RefreshContext","fastRefresh","fast","slowRefresh","slow","blockSlice","currentBlock","initialBlock","MAX_USER_LOTTERIES_REQUEST_SIZE","applyNodeDataToUserGraphResponse","userNodeData","userGraphData","lotteryNodeData","nodeRound","ticketDataForRound","roundTickets","roundId","lotteryId","endTime","status","claimed","hasRoundBeenClaimed","userTickets","totalTickets","tickets","nodeRoundsWithGraphData","userNodeRound","userGraphRound","graphResponseRound","nodeRoundData","slice","lastCombinedDataRound","lastCombinedDataRoundIndex","graphRound","remainingSubgraphRounds","getGraphLotteryUser","first","skip","where","blankUser","totalCake","rounds","request","GRAPH_API_LOTTERY","gql","userRes","round","lottery","getUserLotteryData","currentLotteryId","idsForTicketsNodeCall","getRoundIdsArray","fetchUserTicketsForMultipleRounds","roundDataAndUserTickets","userRoundsNodeData","idsForLotteriesNodeCall","fetchMultipleLotteries","lotteriesNodeData","graphResponse","mergedRoundData","graphResponseWithNodeRounds","React","RefreshContextProvider","setSlow","setFast","isBrowserTabActiveRef","onVisibilityChange","hidden","useIsBrowserTabActive","interval","prev","campaigns","badge","campaignMap","Map","campaign","getAchievementTitle","key","getAchievementDescription","getUserPointIncreaseEvents","GRAPH_API_PROFILE","getAchievements","pointIncreaseEvents","userPoint","has","campaignMeta","get","Number","ProfileAvatarFetchStatus","AchievementFetchStatus","BetPosition","PredictionStatus","HistoryFilter","LeaderboardLoadingState","SnapshotCommand","ProposalType","ProposalState","VotingStateLoadingStatus","usePreviousValue","mainnetTokens","bnb","cvp","mix","safemoon","testnetTokens","keys","unserializedTokens","serializeToken","masterChef","sousChef","lotteryV2","contract","multiCall","pancakeProfile","pancakeRabbits","bunnyFactory","claimRefund","pointCenterIfo","bunnySpecial","tradingCompetition","easterNft","cakeVault","predictions","chainlinkOracle","bunnySpecialCakeVault","bunnySpecialPrediction","bunnySpecialLottery","farmAuction","AnniversaryAchievement","nftMarket","nftSale","pancakeSquad","addresses","getLotteryV2Address","getPancakeRabbitsAddress","getBunnyFactoryAddress","getClaimRefundAddress","getPointCenterIfoAddress","getBunnySpecialAddress","getTradingCompetitionAddress","getEasterNftAddress","getCakeVaultAddress","getPredictionsAddress","getChainlinkOracleAddress","getBunnySpecialCakeVaultAddress","getBunnySpecialPredictionAddress","getBunnySpecialLotteryAddress","getFarmAuctionAddress","getAnniversaryAchievement","getNftMarketAddress","getNftSaleAddress","getPancakeSquadAddress","useAudioModeManager","useDispatch","audioPlay","toggleSetAudioMode","muteAudio","unmuteAudio","usePhishingBannerManager","showPhishingWarningBanner","hidePhishingWarningBanner","useExpertModeManager","expertMode","userExpertMode","toggleSetExpertMode","updateUserExpertMode","useThemeManager","isDark","toggleThemeAction","useUserSingleHopOnly","userSingleHopOnly","newSingleHopOnly","updateUserSingleHopOnly","useUserSlippageTolerance","userSlippageTolerance","slippage","updateUserSlippageTolerance","useUserExpertModeAcknowledgementShow","userExpertModeAcknowledgementShow","showAcknowledgement","updateUserExpertModeAcknowledgementShow","useUserTransactionTTL","userDeadline","deadline","updateUserDeadline","useGasPrice","userGas","gasPrice","GAS_PRICE_GWEI","testnet","useGasPriceManager","updateGasPrice","decimals","viewDecimals","price","tokensList","isTransitioning","maxNumberTicketsPerBuyOrClaim","currentRound","isLoading","LotteryStatus","PENDING","startTime","priceTicketInCake","discountDivisor","treasuryFee","firstTicketId","lastTicketId","amountCollectedInCake","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","lotteriesData","userLotteryData","fetchCurrentLottery","fetchLottery","lotteryInfo","fetchCurrentLotteryId","fetchCurrentLotteryIdAndMaxBuy","currentIdAndMaxBuy","fetchUserTicketsAndLotteries","userLotteriesRes","userParticipationInCurrentRound","userLotteries","fetchPublicLotteries","getLotteriesData","lotteries","fetchUserLotteries","fetchAdditionalUserLotteries","additionalUserLotteries","setLotteryIsTransitioning","LotterySlice","mergedRounds","deserializeFarmUserData","deserializeFarm","dual","deserializeToken","usePollCoreFarmData","useFarmFromPid","f","usePriceCakeBusd","cakePriceBusdAsString","sortByListPriority","urlA","urlB","DEFAULT_LIST_OF_LISTS","MAX_SAFE_INTEGER","second","WrappedTokenInfo","tokenInfo","tags","this","logoURI","EMPTY_LIST","listCache","WeakMap","listToTokenMap","list","tokenMap","tagId","x","useAllLists","lists","byUrl","combineMaps","map1","map2","useCombinedTokenMapFromUrls","urls","sort","allTokens","currentUrl","assign","useActiveListUrls","activeListUrls","url","UNSUPPORTED_LIST_URLS","useUserAddedTokens","serializedTokensMap","useTokensFromMap","includeUserAdded","userAddedTokens","mapWithoutUrls","newMap","tokenMap_","useAllTokens","DEFAULT_TOKEN_LIST","useUnsupportedTokens","UNSUPPORTED_TOKEN_LIST","BYTES32_REGEX","parseStringOrBytes32","str","bytes32","defaultValue","test","arrayify","parseBytes32String","useCurrency","currencyId","isBNB","toUpperCase","isAddress","tokenContract","tokenContractBytes32","tokenName","useSingleCallResult","NEVER_RELOAD","tokenNameBytes32","symbolBytes32","useToken","setupNetwork","ethereum","addParams","chainName","nativeCurrency","native","rpcUrls","blockExplorerUrls","etherscan","method","useAuth","useWeb3React","activate","deactivate","login","connectorID","connector","UnsupportedChainIdError","removeItem","connectorLocalStorageKey","NoEthereumProviderError","NoBscProviderError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","walletConnectProvider","message","logout","profileClear","close","clearAllTransactions","MAX_LOTTERIES_REQUEST_SIZE","applyNodeDataToLotteriesGraphResponse","nodeData","ticketPrice","totalUsers","winningTickets","graphRoundData","getGraphLotteries","idsForNodesCall","mergedData","lotteryContract","processRawTicketsResponse","ticketsResponse","ticketIds","ticketNumbers","ticketStatuses","ticketId","number","viewUserInfoForLotteryId","cursor","perRequestLimit","fetchUserTicketsForOneRound","numReturned","ticketData","idsToCheck","ticketsForMultipleRounds","ticketsForRound","useDebounce","delay","debouncedValue","setDebouncedValue","handler","FarmStakedOnly","ViewMode","createAction","addSerializedToken","removeSerializedToken","addSerializedPair","removeSerializedPair","toggleTheme","updateUserFarmStakedOnly","updateUserPoolStakedOnly","updateUserPoolsViewMode","updateUserFarmsViewMode","updateUserPredictionAcceptedRisk","updateUserPredictionChartDisclaimerShow","updateUserUsernameVisibility","addWatchlistToken","addWatchlistPool","setIsExchangeChartDisplayed","web3React","refEth","setProvider","ethersToSerializedBigNumber","ethersBn","ethersToBigNumber","abi","signer","signerOrProvider","Contract","getBep20Contract","bep20Abi","getErc721Contract","erc721Abi","getIfoV1Contract","ifoV1Abi","getIfoV2Contract","ifoV2Abi","getSouschefContract","poolsConfig","pool","sousId","poolCategory","PoolCategory","BINANCE","sousChefBnb","contractAddress","getSouschefV2Contract","sousChefV2","getPointCenterIfoContract","cakeAbi","getPancakeRabbitContract","pancakeRabbitsAbi","getBunnyFactoryContract","bunnyFactoryAbi","getBunnySpecialContract","bunnySpecialAbi","lotteryV2Abi","getMasterchefContract","getClaimRefundContract","claimRefundAbi","getTradingCompetitionContract","tradingCompetitionAbi","getEasterNftContract","easterNftAbi","getCakeVaultContract","cakeVaultAbi","getPredictionsContract","predictionsAbi","getChainlinkOracleContract","chainlinkOracleAbi","getMulticallContract","MultiCallAbi","getBunnySpecialCakeVaultContract","bunnySpecialCakeVaultAbi","getBunnySpecialPredictionContract","bunnySpecialPredictionAbi","getBunnySpecialLotteryContract","bunnySpecialLotteryAbi","getFarmAuctionContract","farmAuctionAbi","getAnniversaryAchievementContract","anniversaryAchievementAbi","getNftMarketContract","nftMarketAbi","getNftSaleContract","nftSaleAbi","getPancakeSquadContract","pancakeSquadAbi","getErc721CollectionContract","erc721CollectionAbi","ERC20_INTERFACE","useFetchProfile","fetchProfile","useProfile","isInitialized","hasProfile","Container","px","maxWidth","StyledPage","Page","multi","itf","utils","calldata","call","encodeFunctionData","aggregate","returnData","res","decodeFunctionResult","options","requireSuccess","tryAggregate","GRAPH_API_PREDICTION","SNAPSHOT_VOTING_API","SNAPSHOT_BASE_URL","API_NFT","SNAPSHOT_API","INFO_CLIENT","BLOCKS_CLIENT","GRAPH_API_NFTMARKET","statusText","isPBCollection","requestPath","from","promises","responses","resp","existingTokenIds","isTradable","tokenId_not_in","orderBy","stringify","displayType","fetchWalletTokenIdsForCollections","walletNftPromises","balanceOf","balanceOfResponse","eq","getTokenId","tokenOfOwnerByIndex","tokenIdBn","tokenIdPromises","tokensWithCollectionAddress","walletNfts","flat","collectionApiData","collectionSgData","collectionsMarketObj","attachMarketDataToWalletNfts","marketDataForWalletNfts","walletNft","marketNft","metadataUrl","transactionHistory","currentSeller","currentAskPrice","latestTradedPriceInBNB","tradeVolumeBNB","totalTrades","combineNftMarketAndMetadata","nftsWithMetadata","nftsForSale","tokenIdsInWallet","tokenIdsForSale","profileNftId","forSaleNft","PROFILE","FORSALE","getNftLocationForMarketNft","walletNftIdsWithCollectionAddress","unshift","uniqueCollectionAddresses","uniq","walletNftId","walletNftsByCollection","idWithCollectionAddress","walletMarketDataRequests","walletNftByCollection","tokenIdIn","walletMarketDataResponses","walletMarketData","walletNftsWithMarketData","walletTokenIds","marketDataForSaleNfts","forSaleNftIds","metadataForAllNfts","Field","selectCurrency","switchCurrencies","typeInput","replaceSwapState","setRecipient","updatePairData","updateDerivedPairData","AskOrderType","GAS_PRICE","projectLink","serializedToken","default","parseUnits","instant","DEFAULT_ACTIVE_LIST_URLS","waitRandom","min","max","ms","Math","random","resolve","CancelledError","RetryableError","multicallContract","chunk","minBlockNumber","debug","obj","callData","resultsBlockNumber","Updater","s","debouncedListeners","callListeners","cancellations","listeningKeys","allListeners","listeners","memo","callKey","keyListeners","blocksPerFetch","previousMin","Infinity","activeListeningKeys","unserializedOutdatedCallKeys","callResults","minDataBlockNumber","fetchingBlockNumber","outdatedListeningKeys","serializedOutdatedCallKeys","JSON","outdatedCallKeys","parse","parseCallKey","chunkedCalls","items","maxChunkSize","numChunks","ceil","chunkSize","Array","ix","chunkArray","c","fetchingMulticallResults","fn","rejectCancelled","n","minWait","maxWait","completed","promise","reject","cancel","retry","fetchChunk","then","fetchBlockNumber","firstCallKeyIndex","curr","lastCallKeyIndex","updateMulticallResults","catch","errorFetchingMulticallResults","transactions","hash","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","getTime","addedTime","shouldCheck","getTransactionReceipt","finalizeTransaction","blockHash","to","transactionHash","transactionIndex","flexDirection","summary","checkedTransaction","_binanceChainListener","defineProperty","bsc","useEagerConnect","connectorId","isConnectorBinanceChain","isBinanceChainDefined","Reflect","useUserAgent","documentElement","setAttribute","navigator","userAgent","history","createBrowserHistory","useScrollOnRouteChange","unlisten","listen","args","scroll","left","behavior","StyledDatePickerPortal","card","colors","cardBorder","text","input","primary","primaryBright","secondary","DatePickerPortal","GlobalStyle","createGlobalStyle","SuspenseWithChunkError","hasError","isJsChunkLoadError","isCssChunkLoadError","code","isChunkLoadError","isRecoveringFromChunkError","nextState","replaceState","reload","fallback","Component","Wrapper","PageLoader","Lottery","lazy","NotFound","App","handleDeactivate","addListener","removeListener","useInactiveListener","disableCSSOMInjection","target","getElementById","Global","path","component","ThemeProviderWrapper","dark","Providers","store","Updaters","Blocklist","BLOCKED_ADDRESSES","ReactDOM","render","StrictMode","ADDRESS_REGEX","LOWER_HEX_REGEX","toCallKey","pcs","split","addMulticallListeners","removeMulticallListeners","PoolIds","AuctionStatus","ROUTER_ADDRESS","BASES_TO_CHECK_TRADES_AGAINST","ADDITIONAL_BASES","CUSTOM_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","BIPS_BASE","JSBI","BigInt","Percent","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","BLOCKED_PRICE_IMPACT_NON_EXPERT","BETTER_TRADE_LESS_HOPS_THRESHOLD","exponentiate","ZERO_PERCENT","ONE_HUNDRED_PERCENT","pools","stakingToken","earningToken","CORE","harvest","tokenPerBlock","sortOrder","isFinished","enableEmergencyWithdraw","COMMUNITY","Result","convertSharesToCake","shares","cakePerFullShare","decimalsToRound","sharePriceNumber","getBalanceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsBigNumber","getDecimalAmount","cakeAsDisplayBalance","getFullDisplayBalance","fetchPublicVaultData","sharePrice","estimatedCakeBountyReward","totalPendingCakeHarvest","totalSharesAsBigNumber","sharePriceAsBigNumber","totalCakeInVaultEstimate","totalShares","pricePerFullShare","totalCakeInVault","fetchVaultFees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","cakeVaultContract","fetchVaultUser","userInfo","userContractResponse","userShares","lastDepositedTime","lastUserActionTime","cakeAtLastUserAction","fees","fetchCakeVaultPublicData","publicVaultInfo","fetchCakeVaultFees","vaultFees","fetchCakeVaultUserData","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","p","ROUNDS_PER_PAGE","numberOrNull","valueNum","isNaN","transformBetResponse","betResponse","bet","amount","parseFloat","position","BULL","BEAR","claimedAt","claimedBlock","claimedHash","claimedBNB","claimedNetBNB","transformUserResponse","transformRoundResponse","userResponse","totalBets","totalBetsBull","totalBetsBear","totalBNB","totalBNBBull","totalBNBBear","totalBetsClaimed","totalBNBClaimed","winRate","averageBNB","netBNB","roundResponse","positionResponse","epoch","failed","startAt","startBlock","startHash","lockAt","lockBlock","lockHash","lockPrice","lockRoundId","closeAt","closeBlock","closeHash","closePrice","closeRoundId","totalAmount","bullBets","bullAmount","bearBets","bearAmount","bets","HOUSE","getBetHistory","getLedgerData","epochs","ledgerCalls","defaultPredictionUserOptions","orderDir","getPredictionUsers","getPredictionUser","getClaimStatuses","claimableCalls","claimableResponses","claimableResponse","claimable","getPredictionData","staticCalls","currentEpoch","intervalSeconds","minBetAmount","paused","bufferSeconds","PAUSED","LIVE","getRoundsData","makeFutureRoundResponse","startTimestamp","lockTimestamp","closeTimestamp","rewardBaseCalAmount","rewardAmount","oracleCalled","lockOracleId","closeOracleId","makeRoundData","serializePredictionsLedgerResponse","ledgerResponse","makeLedgerData","ledgers","serializePredictionsRoundsResponse","fetchUsersRoundsLength","getUserRoundsLength","fetchUserRounds","getUserRounds","INITIAL","isHistoryPaneOpen","isChartPaneOpen","isFetchingHistory","historyFilter","ALL","lastOraclePrice","totalHistory","currentHistoryPage","hasHistoryLoaded","claimableStatuses","leaderboard","selectedAddress","timePeriod","hasMoreResults","addressResults","initializePredictions","range","roundsResponse","initialRoundData","reduxNodeRound","initializedData","ledgerResponses","fetchRound","predictionContract","fetchRounds","fetchMarketData","fetchLedgerData","fetchClaimableStatuses","fetchHistory","fetchNodeHistory","userRoundsLength","emptyResult","maxPages","lte","sub","lt","userRounds","epochStr","roundData","reduxRound","ledger","ledgerAmount","formatUnits","gt","filterLeaderboard","totalBets_gte","usersResponse","fetchAddressResult","rejectWithValue","filterNextPageLeaderboard","getState","predictionsSlice","setLeaderboardFilter","setHistoryPaneState","setChartPaneState","setHistoryFilter","setLastOraclePrice","markAsCollected","setSelectedAddress","newestRound","maxBy","futureRound","futureRounds","teamsSlice","fetchStart","fetchFailed","teamFetchSucceeded","teamsFetchSucceeded","achievements","achievementFetchStatus","NOT_FETCHED","fetchAchievements","achievementSlice","addAchievement","FETCHING","FETCHED","getProposals","ACTIVE","proposals","getProposal","proposal","getVotes","votes","getVoteVerificationStatuses","votesToVerify","vote","voter","verificationHash","metadata","total","votingPower","headers","body","isValid","getAllVotes","proposalId","votesPerChunk","fetchVoteChunk","newSkip","voteChunk","proposalLoadingStatus","voteLoadingStatus","fetchProposals","fetchProposal","fetchVotes","verifyVotes","snapshot","proposalVotes","voting","votingSlice","_inValid","updateProtocolData","updateProtocolChartData","updateProtocolTransactions","updatePoolData","addPoolKeys","updatePoolChartData","updatePoolTransactions","updateTokenData","addTokenKeys","addTokenPoolAddresses","updateTokenChartData","updateTokenTransactions","updateTokenPriceData","protocol","overview","chartData","byAddress","createReducer","protocolData","poolData","poolAddresses","poolAddress","tokenData","tokenAddresses","priceData","secondsInterval","oldestFetchedTimestamp","updateVersion","currentTimestamp","pairKey","token0Address","token1Address","pairs","timestamp","isExchangeChartDisplayed","userFarmStakedOnly","ON_FINISHED","userPoolStakedOnly","userPoolsViewMode","TABLE","userFarmsViewMode","userPredictionAcceptedRisk","userPredictionChartDisclaimerShow","userUsernameVisibility","watchlistTokens","watchlistPools","lastUpdateVersionTimestamp","serializedPair","tokenAAddress","tokenBAddress","userAcceptedRisk","userShowDisclaimer","tokenWatchlist","newTokens","poolsWatchlist","newPools","addTransaction","approval","claim","txs","confirmedTime","independentField","INPUT","typedValue","OUTPUT","recipient","inputCurrencyId","outputCurrencyId","pairDataById","derivedPairDataById","otherField","pairData","pairId","timeWindow","resetMintState","CURRENCY_A","otherTypedValue","noLiquidity","fetchTokenList","addList","removeList","enableList","disableList","acceptListUpdate","NEW_LIST_STATE","loadingRequestId","pendingUpdate","lastInitializedDefaultListOfLists","listUrl","requestId","tokenList","getVersionUpgrade","VersionUpgrade","NONE","errorMessage","u","lastInitializedSet","l","add","Set","newListOfListsSet","LIQUIDITY_PERCENT","PERSISTED_KEYS","configureStore","devTools","reducer","achievementsReducer","blockReducer","farmsReducer","poolsReducer","predictionsReducer","profileReducer","teamsReducer","votingReducer","lotteryReducer","infoReducer","nftMarketReducer","swap","mint","burn","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","cloneDeep","userInitialState","transactionsInitialState","listsInitialState","profileInitialState","lotteryTokenDecimals","getBalanceAmount","dividedBy","balance","displayDecimals","toFixed","formatNumber","minPrecision","maxPrecision","minimumFractionDigits","maximumFractionDigits","toLocaleString","formatBigNumber","remainder","mod","BASE_BSC_SCAN_URL","basisPointsToPercent","num","getProviderOrSigner","connectUnchecked","AddressZero","escapeRegExp","string","replace","isMethodArg","isValidMethodArgs","isArray","every","xi","INVALID_RESULT","valid","useCallsData","serializedCallKeys","callKeys","INVALID_CALL_STATE","syncing","LOADING_CALL_STATE","toCallState","callResult","contractInterface","fragment","latestBlockNumber","success","useSingleContractMultipleData","methodName","callInputs","interface","getFunction","inputs","isFetching","currentLanguage","languageMap","translations","LanguageContext","LanguageProvider","codeFromStorage","languages","setState","fetchInitialLocales","enLocale","currentLocale","prevState","setLanguage","language","setItem","translate","translatedText","match","interpolatedText","dataKey","templateKey","RegExp","languageContext","RPC_URL","getRpcUrl","StaticJsonRpcProvider","processViewLotterySuccessResponse","statusKey","serializedCakePerBracket","cakeInBracket","serializedCountWinnersPerBracket","winnersInBracket","serializedRewardsBreakdown","reward","processViewLotteryErrorResponse","viewLottery","lotteryData","lotteryIds","multicallRes","processedResponses","currentIdAsInt","roundIds","useProcessLotteryResponse","priceTicketInCakeAsString","discountDivisorAsString","amountCollectedInCakeAsString","ticket","profileAvatars","fetchProfileAvatar","fetchProfileUsername","profileSlice","addPoints","usernameFetchStatus","avatarFetchStatus","languageList","CollectionKey","PANCAKE","slug","SQUAD","nftsBaseUrl"],"mappings":"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ACRhc,EACA,6CACA,GACA,OACA,eACA,2BAEFzO,IAAK,IAAIyqB,IAAMhc,EAAS,6CAA8C,EAAG,MAAO,SAAU,sBAC1FrO,SAAU,IAAIqqB,IACZhc,EACA,6CACA,GACA,OACA,WACA,wBAEF1O,KAAM,IAAI0qB,IAAMhc,EAAS,6CAA8C,GAAI,OAAQ,UAAW,uBAC9FlO,IAAK,IAAIkqB,IAAMhc,EAAS,6CAA8C,GAAI,MAAO,cAAe,mBAChG0mB,IAAK,IAAI1K,IACPhc,EACA,6CACA,GACA,MACA,kCACA,8BAEFnO,QAAS,IAAImqB,IACXhc,EACA,6CACA,GACA,UACA,4BACA,8BAEFzQ,KAAM,IAAIysB,IACRhc,EACA,6CACA,GACA,OACA,cACA,+BAEF5E,IAAK,IAAI4gB,IACPhc,EACA,6CACA,GACA,MACA,iBACA,6BAEF3M,KAAM,IAAI2oB,IACRhc,EACA,6CACA,GACA,OACA,aACA,sBAEF1L,KAAM,IAAI0nB,IACRhc,EACA,6CACA,GACA,OACA,cACA,wBAEFnJ,IAAK,IAAImlB,IACPhc,EACA,6CACA,GACA,MACA,oBACA,2BAEF3L,IAAK,IAAI2nB,IACPhc,EACA,6CACA,GACA,MACA,6BACA,4BAEFzP,KAAM,IAAIyrB,IACRhc,EACA,6CACA,GACA,OACA,uBACA,8BAEF5K,KAAM,IAAI4mB,IACRhc,EACA,6CACA,GACA,OACA,eACA,sBAEFpP,IAAK,IAAIorB,IACPhc,EACA,6CACA,GACA,MACA,eACA,4BAEFnK,SAAU,IAAImmB,IACZhc,EACA,6CACA,GACA,WACA,iBACA,6BAEFxG,KAAM,IAAIwiB,IACRhc,EACA,6CACA,GACA,OACA,aACA,yBAEFpG,MAAO,IAAIoiB,IACThc,EACA,6CACA,GACA,QACA,mBACA,2BAEF9F,IAAK,IAAI8hB,IACPhc,EACA,6CACA,GACA,MACA,cACA,yBAEFjF,MAAO,IAAIihB,IACThc,EACA,6CACA,GACA,QACA,gBACA,4BAEF/E,OAAQ,IAAI+gB,IACVhc,EACA,6CACA,GACA,SACA,eACA,8BAEF1E,IAAK,IAAI0gB,IACPhc,EACA,6CACA,GACA,MACA,cACA,2BAEFvE,MAAO,IAAIugB,IACThc,EACA,6CACA,EACA,QACA,cACA,wBAEFrE,MAAO,IAAIqgB,IACThc,EACA,6CACA,EACA,QACA,cACA,0BAEF7Q,MAAO,IAAI6sB,IACThc,EACA,6CACA,GACA,QACA,iBACA,gCAEFhO,IAAK,IAAIgqB,IACPhc,EACA,6CACA,GACA,MACA,cACA,yBAEFxN,SAAU,IAAIwpB,IACZhc,EACA,6CACA,GACA,WACA,kBACA,yBAEF7P,KAAM,IAAI6rB,IACRhc,EACA,6CACA,GACA,OACA,gBACA,wBAEFvN,KAAM,IAAIupB,IACRhc,EACA,6CACA,GACA,OACA,iBACA,wBAEF5P,IAAK,IAAI4rB,IACPhc,EACA,6CACA,GACA,MACA,0BACA,mBAEFvO,KAAM,IAAIuqB,IACRhc,EACA,6CACA,GACA,OACA,oBACA,oCAEFtN,KAAM,IAAIspB,IACRhc,EACA,6CACA,GACA,OACA,aACA,+BAEFrN,MAAO,IAAIqpB,IACThc,EACA,6CACA,GACA,QACA,qBACA,gCAEFpN,GAAI,IAAIopB,IACNhc,EACA,6CACA,GACA,KACA,2BACA,+BAEFjP,IAAK,IAAIirB,IACPhc,EACA,6CACA,GACA,MACA,sBACA,6BAEFxO,MAAO,IAAIwqB,IACThc,EACA,6CACA,GACA,QACA,cACA,0BAEFhN,MAAO,IAAIgpB,IACThc,EACA,6CACA,GACA,QACA,kBACA,yBAEF/M,QAAS,IAAI+oB,IACXhc,EACA,6CACA,GACA,MACA,oBACA,4BAEF9M,KAAM,IAAI8oB,IAAMhc,EAAS,6CAA8C,GAAI,OAAQ,aAAc,oBACjG/P,IAAK,IAAI+rB,IACPhc,EACA,6CACA,GACA,MACA,wBACA,4BAEF5M,IAAK,IAAI4oB,IACPhc,EACA,6CACA,GACA,MACA,qBACA,4BAEFzM,OAAQ,IAAIyoB,IACVhc,EACA,6CACA,GACA,SACA,eACA,uBAEFxM,OAAQ,IAAIwoB,IACVhc,EACA,6CACA,GACA,SACA,uBACA,iCAEFrM,KAAM,IAAIqoB,IACRhc,EACA,6CACA,GACA,OACA,kBACA,yBAEF/G,IAAK,IAAI+iB,IAAMhc,EAAS,6CAA8C,GAAI,MAAO,aAAc,qBAC/FpM,KAAM,IAAIooB,IACRhc,EACA,6CACA,GACA,OACA,aACA,yBAEF9G,IAAK,IAAI8iB,IACPhc,EACA,6CACA,GACA,MACA,kBACA,6BAEF7G,MAAO,IAAI6iB,IACThc,EACA,6CACA,GACA,QACA,qBACA,iCAEF5G,MAAO,IAAI4iB,IACThc,EACA,6CACA,EACA,QACA,0BACA,oCAEF3G,IAAK,IAAI2iB,IACPhc,EACA,6CACA,GACA,MACA,gBACA,6BAEF1G,IAAK,IAAI0iB,IACPhc,EACA,6CACA,GACA,MACA,mBACA,kCAEFzG,KAAM,IAAIyiB,IACRhc,EACA,6CACA,EACA,OACA,aACA,wBAEF9N,KAAM,IAAI8pB,IACRhc,EACA,6CACA,GACA,OACA,kBACA,yBAEFvG,IAAK,IAAIuiB,IACPhc,EACA,6CACA,GACA,MACA,iBACA,qBAEFtG,KAAM,IAAIsiB,IACRhc,EACA,6CACA,GACA,OACA,aACA,yBAEF/N,IAAK,IAAI+pB,IACPhc,EACA,6CACA,GACA,MACA,uBACA,qBAEFrG,IAAK,IAAIqiB,IACPhc,EACA,6CACA,EACA,MACA,oBACA,gCAEFhJ,MAAO,IAAIglB,IACThc,EACA,6CACA,EACA,QACA,2BACA,sCAEF1J,KAAM,IAAI0lB,IACRhc,EACA,6CACA,GACA,OACA,mBACA,+BAEFnG,KAAM,IAAImiB,IACRhc,EACA,6CACA,GACA,OACA,kCACA,qBAEFlG,IAAK,IAAIkiB,IACPhc,EACA,6CACA,GACA,MACA,kBACA,8BAEFjG,MAAO,IAAIiiB,IACThc,EACA,6CACA,GACA,QACA,wBACA,uBAEF/F,KAAM,IAAI+hB,IACRhc,EACA,6CACA,GACA,OACA,aACA,sBAEF3I,QAAS,IAAI2kB,IACXhc,EACA,6CACA,GACA,UACA,wBACA,4BAEF7F,IAAK,IAAI6hB,IACPhc,EACA,6CACA,GACA,MACA,iBACA,wBAEF5F,KAAM,IAAI4hB,IACRhc,EACA,6CACA,GACA,OACA,aACA,0BAEF/K,IAAK,IAAI+mB,IACPhc,EACA,6CACA,GACA,MACA,YACA,0BAEF1F,IAAK,IAAI0hB,IACPhc,EACA,6CACA,GACA,MACA,gBACA,2BAEFzF,KAAM,IAAIyhB,IACRhc,EACA,6CACA,GACA,OACA,uBACA,2BAEFxF,IAAK,IAAIwhB,IACPhc,EACA,6CACA,GACA,MACA,iBACA,6BAEFpK,KAAM,IAAIomB,IACRhc,EACA,6CACA,EACA,OACA,eACA,2BAEFvF,IAAK,IAAIuhB,IACPhc,EACA,6CACA,GACA,MACA,gBACA,uBAEFtF,KAAM,IAAIshB,IACRhc,EACA,6CACA,GACA,OACA,eACA,uBAEFhF,MAAO,IAAIghB,IACThc,EACA,6CACA,GACA,QACA,iBACA,yBAEF9E,MAAO,IAAI8gB,IACThc,EACA,6CACA,GACA,QACA,4BACA,uBAEF3E,KAAM,IAAI2gB,IACRhc,EACA,6CACA,GACA,OACA,aACA,sBAEFzE,MAAO,IAAIygB,IACThc,EACA,6CACA,GACA,QACA,sBACA,6BAEF/C,IAAK,IAAI+e,IACPhc,EACA,6CACA,EACA,MACA,gBACA,0BAEF9C,IAAK,IAAI8e,IACPhc,EACA,6CACA,EACA,MACA,yBACA,0BAEFhD,GAAI,IAAIgf,IACNhc,EACA,6CACA,EACA,KACA,gBACA,0BAEFxE,KAAM,IAAIwgB,IACRhc,EACA,6CACA,GACA,OACA,qBACA,yBAEF7C,IAAK,IAAI6e,IACPhc,EACA,6CACA,EACA,MACA,iBACA,0BAEF5C,IAAK,IAAI4e,IACPhc,EACA,6CACA,EACA,MACA,4BACA,0BAEFtE,IAAK,IAAIsgB,IACPhc,EACA,6CACA,GACA,MACA,iBACA,8CAEFpE,KAAM,IAAIogB,IACRhc,EACA,6CACA,GACA,OACA,aACA,6BAEFxD,IAAK,IAAIwf,IACPhc,EACA,6CACA,GACA,MACA,qBACA,4BAEFnE,KAAM,IAAImgB,IACRhc,EACA,6CACA,EACA,OACA,aACA,wBAEFvI,QAAS,IAAIukB,IACXhc,EACA,6CACA,GACA,UACA,eACA,sBAEFzC,KAAM,IAAIye,IACRhc,EACA,6CACA,GACA,OACA,gBACA,4BAEFxC,IAAK,IAAIwe,IACPhc,EACA,6CACA,GACA,MACA,oBACA,4BAEFvC,IAAK,IAAIue,IACPhc,EACA,6CACA,GACA,MACA,iBACA,yBAEFlE,IAAK,IAAIkgB,IACPhc,EACA,6CACA,EACA,MACA,eACA,kCAEFhE,IAAK,IAAIggB,IACPhc,EACA,6CACA,GACA,MACA,2BACA,kCAEFjE,IAAK,IAAIigB,IAAMhc,EAAS,6CAA8C,GAAI,MAAO,cAAe,qBAChG1D,MAAO,IAAI0f,IACThc,EACA,6CACA,GACA,QACA,sBACA,4BAEFzD,IAAK,IAAIyf,IAAMhc,EAAS,6CAA8C,GAAI,MAAO,cAAe,qBAChGhG,MAAO,IAAIgiB,IACThc,EACA,6CACA,GACA,QACA,yBACA,sBAEF3F,KAAM,IAAI2hB,IACRhc,EACA,6CACA,GACA,OACA,yBACA,6BAEFhH,KAAM,IAAIgjB,IACRhc,EACA,6CACA,GACA,OACA,sBACA,0BAEFjH,KAAM,IAAIijB,IACRhc,EACA,6CACA,GACA,OACA,qBACA,yBAEFjD,KAAM,IAAIif,IACRhc,EACA,6CACA,GACA,OACA,qBACA,8CAEFrF,MAAO,IAAIqhB,IACThc,EACA,6CACA,GACA,QACA,4BACA,2BAEFpF,OAAQ,IAAIohB,IACVhc,EACA,6CACA,GACA,SACA,6BACA,2BAEFnF,MAAO,IAAImhB,IACThc,EACA,6CACA,GACA,QACA,4BACA,2BAEFlF,MAAO,IAAIkhB,IACThc,EACA,6CACA,GACA,QACA,4BACA,2BAEF7E,IAAK,IAAI6gB,IACPhc,EACA,6CACA,GACA,MACA,6BACA,yBAEFnD,IAAK,IAAImf,IACPhc,EACA,6CACA,GACA,MACA,6BACA,4BAEFpD,KAAM,IAAIof,IACRhc,EACA,6CACA,GACA,OACA,kCACA,6BAEFrD,IAAK,IAAIqf,IACPhc,EACA,6CACA,GACA,MACA,6BACA,6BAEFtD,IAAK,IAAIsf,IACPhc,EACA,6CACA,GACA,MACA,wBACA,mBAEFvD,KAAM,IAAIuf,IACRhc,EACA,6CACA,GACA,OACA,8BACA,uBAEF3D,IAAK,IAAI2f,IACPhc,EACA,6CACA,GACA,MACA,wBACA,2BAEF5D,KAAM,IAAI4f,IACRhc,EACA,6CACA,GACA,OACA,2BACA,2BAEFlD,KAAM,IAAIkf,IACRhc,EACA,6CACA,GACA,OACA,iCACA,wBAEF3C,IAAK,IAAI2e,IACPhc,EACA,6CACA,GACA,MACA,0BACA,0BAEF1C,IAAK,IAAI0e,IACPhc,EACA,6CACA,GACA,MACA,iCACA,qBAEF7D,IAAK,IAAI6f,IACPhc,EACA,6CACA,GACA,MACA,kCACA,0BAEF9D,IAAK,IAAI8f,IACPhc,EACA,6CACA,GACA,MACA,4BACA,wBAEF/D,IAAK,IAAI+f,IACPhc,EACA,6CACA,GACA,MACA,6BACA,wBAEFtC,KAAM,IAAIse,IACRhc,EACA,6CACA,GACA,OACA,mBACA,+BAEFrC,OAAQ,IAAIqe,IACVhc,EACA,6CACA,GACA,SACA,mBACA,2BAEFrH,MAAO,IAAIqjB,IACThc,EACA,6CACA,GACA,QACA,yBACA,2BAEFtH,QAAS,IAAIsjB,IACXhc,EACA,6CACA,GACA,UACA,2BACA,2BAEFlH,MAAO,IAAIkjB,IACThc,EACA,6CACA,GACA,QACA,iBACA,yBAEFlJ,IAAK,IAAIklB,IACPhc,EACA,6CACA,GACA,MACA,iBACA,uBAEFnH,IAAK,IAAImjB,IACPhc,EACA,6CACA,GACA,MACA,wBACA,2BAEFjJ,KAAM,IAAIilB,IACRhc,EACA,6CACA,GACA,OACA,oBACA,uBAEFpH,IAAK,IAAIojB,IACPhc,EACA,6CACA,GACA,MACA,oBACA,2BAEFvH,KAAM,IAAIujB,IACRhc,EACA,6CACA,GACA,OACA,mBACA,kCAEFxH,IAAK,IAAIwjB,IACPhc,EACA,6CACA,GACA,MACA,gBACA,4BAEF1K,KAAM,IAAI0mB,IACRhc,EACA,6CACA,EACA,OACA,qBACA,yBAEFzH,KAAM,IAAIyjB,IACRhc,EACA,6CACA,EACA,OACA,yBACA,6BAEFhM,IAAK,IAAIgoB,IACPhc,EACA,6CACA,GACA,MACA,gBACA,gCAEF7M,IAAK,IAAI6oB,IACPhc,EACA,6CACA,GACA,MACA,sBACA,6BAEF1H,KAAM,IAAI0jB,IACRhc,EACA,6CACA,GACA,OACA,qBACA,iCAEF3H,IAAK,IAAI2jB,IACPhc,EACA,6CACA,GACA,MACA,sBACA,qBAEF5H,KAAM,IAAI4jB,IACRhc,EACA,6CACA,GACA,OACA,aACA,2BAEF5L,KAAM,IAAI4nB,IAAMhc,EAAS,6CAA8C,GAAI,OAAQ,aAAc,oBACjG7H,IAAK,IAAI6jB,IAAMhc,EAAS,6CAA8C,EAAG,MAAO,YAAa,oBAC7F9H,KAAM,IAAI8jB,IACRhc,EACA,6CACA,GACA,OACA,iBACA,wBAEFzL,OAAQ,IAAIynB,IACVhc,EACA,6CACA,GACA,SACA,eACA,+BAEF/H,IAAK,IAAI+jB,IACPhc,EACA,6CACA,GACA,MACA,mBACA,+BAEFhI,KAAM,IAAIgkB,IACRhc,EACA,6CACA,GACA,OACA,qBACA,yBAEFjI,KAAM,IAAIikB,IACRhc,EACA,6CACA,GACA,OACA,kBACA,yBAEFlI,IAAK,IAAIkkB,IACPhc,EACA,6CACA,GACA,MACA,yBACA,6BAEF9P,IAAK,IAAI8rB,IACPhc,EACA,6CACA,GACA,MACA,wBACA,wBAEFnI,IAAK,IAAImkB,IACPhc,EACA,6CACA,EACA,MACA,6BACA,2BAEFpI,KAAM,IAAIokB,IACRhc,EACA,6CACA,GACA,OACA,SACA,4BAEFrI,KAAM,IAAIqkB,IACRhc,EACA,6CACA,GACA,OACA,YACA,4BAEFtI,IAAK,IAAIskB,IACPhc,EACA,6CACA,GACA,MACA,yBACA,gCAEF1M,MAAO,IAAI0oB,IACThc,EACA,6CACA,GACA,QACA,iBACA,+BAEFxI,IAAK,IAAIwkB,IACPhc,EACA,6CACA,GACA,MACA,oBACA,8BAEF2mB,IAAK,IAAI3K,IACPhc,EACA,6CACA,GACA,MACA,YACA,oCAEFzI,MAAO,IAAIykB,IACThc,EACA,6CACA,GACA,QACA,cACA,0BAEF1I,IAAK,IAAI0kB,IACPhc,EACA,6CACA,GACA,MACA,gBACA,4BAEF5I,YAAM,IAAI4kB,IACRhc,EACA,6CACA,EACA,YACA,sBACA,8BAEF7I,OAAQ,IAAI6kB,IACVhc,EACA,6CACA,GACA,SACA,cACA,kCAEF9I,IAAK,IAAI8kB,IACPhc,EACA,6CACA,GACA,MACA,iBACA,yBAEF/I,IAAK,IAAI+kB,IACPhc,EACA,6CACA,GACA,MACA,qBACA,yBAEF3N,IAAK,IAAI2pB,IACPhc,EACA,6CACA,GACA,MACA,+BACA,+BAEF1N,IAAK,IAAI0pB,IACPhc,EACA,6CACA,GACA,MACA,aACA,yBAEFzN,IAAK,IAAIypB,IACPhc,EACA,6CACA,GACA,MACA,YACA,yBAEFpJ,MAAO,IAAIolB,IACThc,EACA,6CACA,GACA,QACA,4BACA,2BAEFrJ,KAAM,IAAIqlB,IACRhc,EACA,6CACA,GACA,OACA,aACA,2BAEFvJ,IAAK,IAAIulB,IACPhc,EACA,6CACA,GACA,MACA,wBACA,0BAEFtJ,IAAK,IAAIslB,IACPhc,EACA,6CACA,GACA,MACA,gCACA,0BAEFxJ,KAAM,IAAIwlB,IACRhc,EACA,6CACA,GACA,OACA,aACA,uBAEFzJ,IAAK,IAAIylB,IACPhc,EACA,6CACA,EACA,MACA,mBACA,wBAEF3J,KAAM,IAAI2lB,IACRhc,EACA,6CACA,EACA,OACA,uBACA,yBAEF5J,KAAM,IAAI4lB,IACRhc,EACA,6CACA,GACA,OACA,kBACA,0BAEF7J,IAAK,IAAI6lB,IACPhc,EACA,6CACA,GACA,MACA,eACA,2BAEFjN,KAAM,IAAIipB,IACRhc,EACA,6CACA,GACA,OACA,iBACA,yBAEF9J,aAAO,IAAI8lB,IACThc,EACA,6CACA,EACA,aACA,iBACA,8BAEF/J,IAAK,IAAI+lB,IACPhc,EACA,6CACA,GACA,MACA,eACA,2BAEFhK,KAAM,IAAIgmB,IACRhc,EACA,6CACA,GACA,OACA,eACA,uBAEFjK,MAAO,IAAIimB,IACThc,EACA,6CACA,EACA,QACA,qBACA,2BAEFlK,KAAM,IAAIkmB,IACRhc,EACA,6CACA,GACA,OACA,aACA,8BAEFrK,KAAM,IAAIqmB,IACRhc,EACA,6CACA,GACA,OACA,aACA,yBAEFtK,IAAK,IAAIsmB,IAAMhc,EAAS,6CAA8C,GAAI,MAAO,YAAa,wBAC9FvK,IAAK,IAAIumB,IACPhc,EACA,6CACA,EACA,MACA,eACA,wBAEFxK,KAAM,IAAIwmB,IACRhc,EACA,6CACA,GACA,OACA,aACA,gCAEFzK,KAAM,IAAIymB,IACRhc,EACA,6CACA,GACA,OACA,gBACA,8BAEFtM,IAAK,IAAIsoB,IACPhc,EACA,6CACA,GACA,MACA,kBACA,0BAEFvM,OAAQ,IAAIuoB,IACVhc,EACA,6CACA,GACA,SACA,cACA,0BAEF3K,MAAO,IAAI2mB,IACThc,EACA,6CACA,GACA,QACA,wBACA,uBAEF7K,GAAI,IAAI6mB,IACNhc,EACA,6CACA,GACA,KACA,gBACA,2BAEF9K,IAAK,IAAI8mB,IACPhc,EACA,6CACA,GACA,MACA,qBACA,qBAEF5N,KAAM,IAAI4pB,IACRhc,EACA,6CACA,GACA,OACA,4BACA,4BAEFhL,KAAM,IAAIgnB,IACRhc,EACA,6CACA,GACA,OACA,qBACA,yBAEFjL,IAAK,IAAIinB,IACPhc,EACA,6CACA,GACA,MACA,gBACA,uBAEFlL,IAAK,IAAIknB,IACPhc,EACA,6CACA,GACA,MACA,mBACA,0BAEFnL,KAAM,IAAImnB,IACRhc,EACA,6CACA,GACA,OACA,oBACA,mCAEFpL,GAAI,IAAIonB,IAAMhc,EAAS,6CAA8C,GAAI,KAAM,WAAY,wBAC3FrL,IAAK,IAAIqnB,IACPhc,EACA,6CACA,GACA,MACA,iBACA,4BAEFtL,KAAM,IAAIsnB,IACRhc,EACA,6CACA,GACA,OACA,cACA,2BAEFvL,OAAQ,IAAIunB,IACVhc,EACA,6CACA,GACA,SACA,kBACA,8BAEFxL,MAAO,IAAIwnB,IACThc,EACA,6CACA,GACA,QACA,kBACA,yBAEF7L,KAAM,IAAI6nB,IACRhc,EACA,6CACA,EACA,OACA,aACA,+BAEF9L,GAAI,IAAI8nB,IACNhc,EACA,6CACA,GACA,KACA,gBACA,uBAEF/L,IAAK,IAAI+nB,IAAMhc,EAAS,6CAA8C,EAAG,MAAO,eAAgB,sBAChGjM,IAAK,IAAIioB,IACPhc,EACA,6CACA,GACA,MACA,eACA,0BAEFlM,IAAK,IAAIkoB,IACPhc,EACA,6CACA,GACA,MACA,yBACA,wBAEFnM,IAAK,IAAImoB,IACPhc,EACA,6CACA,GACA,MACA,wBACA,4BAEF4mB,SAAU,IAAI5K,IACZhc,EACA,6CACA,EACA,WACA,iBACA,yBAEFlN,IAAK,IAAIkpB,IACPhc,EACA,6CACA,GACA,MACA,qCACA,6BAEFnN,IAAK,IAAImpB,IACPhc,EACA,6CACA,GACA,MACA,eACA,uBAEF7N,KAAM,IAAI6pB,IACRhc,EACA,6CACA,GACA,OACA,gBACA,wBAEFtQ,IAAK,IAAIssB,IACPhc,EACA,6CACA,GACA,MACA,mBACA,oCAEFnP,KAAM,IAAImrB,IACRhc,EACA,6CACA,GACA,OACA,aACA,iCAEFpO,GAAI,IAAIoqB,IACNhc,EACA,6CACA,GACA,KACA,kBACA,8BAEFvQ,MAAO,IAAIusB,IACThc,EACA,6CACA,GACA,QACA,qBACA,yBAEFjO,KAAM,IAAIiqB,IACRhc,EACA,6CACA,GACA,OACA,YACA,yBAEFhP,KAAM,IAAIgrB,IACRhc,EACA,6CACA,GACA,OACA,eACA,yBAEF9O,MAAO,IAAI8qB,IACThc,EACA,6CACA,GACA,QACA,YACA,sCAEF5O,IAAK,IAAI4qB,IACPhc,EACA,6CACA,GACA,MACA,mBACA,oCAEF7O,IAAK,IAAI6qB,IACPhc,EACA,6CACA,GACA,MACA,QACA,8BAEFlP,MAAO,IAAIkrB,IACThc,EACA,6CACA,EACA,QACA,qBACA,2DAEF/O,IAAK,IAAI+qB,IAAMhc,EAAS,6CAA8C,EAAG,MAAO,QAAS,yBACzFtP,KAAM,IAAIsrB,IACRhc,EACA,6CACA,GACA,OACA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","file":"static/js/main.chunk.js","sourcesContent":["import { serializeTokens } from './tokens'\r\nimport { SerializedFarmConfig } from './types'\r\n\r\nconst serializedTokens = serializeTokens()\r\n\r\nconst farms: SerializedFarmConfig[] = [\r\n  /**\r\n   * These 3 farms (PID 0, 251, 252) should always be at the top of the file.\r\n   */\r\n  {\r\n    pid: 0,\r\n    lpSymbol: 'CAKE',\r\n    lpAddresses: {\r\n      97: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    token: serializedTokens.syrup,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 251,\r\n    lpSymbol: 'CAKE-BNB LP',\r\n    lpAddresses: {\r\n      97: '0x3ed8936cAFDF85cfDBa29Fbe5940A5b0524824F4',\r\n      56: '0x0eD7e52944161450477ee417DE9Cd3a859b14fD0',\r\n    },\r\n    token: serializedTokens.cake,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 252,\r\n    lpSymbol: 'BUSD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16',\r\n    },\r\n    token: serializedTokens.busd,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  /**\r\n   * V3 by order of release (some may be out of PID order due to multiplier boost)\r\n   */\r\n  {\r\n    pid: 479,\r\n    lpSymbol: 'ZOO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x85e5889Fc3Ed01B4e8B56bbc717D7643294d2c31',\r\n    },\r\n    token: serializedTokens.zoo,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 450,\r\n    lpSymbol: 'SFUND-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x74fA517715C4ec65EF01d55ad5335f90dce7CC87',\r\n    },\r\n    token: serializedTokens.sfund,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 447,\r\n    lpSymbol: 'GNT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3747e3e107223539FD09bb730b055A1f11F78Adf',\r\n    },\r\n    token: serializedTokens.gnt,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 477,\r\n    lpSymbol: 'SHEESHA-BNB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xB31Ecb43645EB273210838e710f2692CC6b30a11',\r\n    },\r\n    token: serializedTokens.sheesha,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 478,\r\n    lpSymbol: 'BCOIN-BUSD',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd76026a78a2A9aF2f9F57fe6337eED26Bfc26AED',\r\n    },\r\n    token: serializedTokens.bcoin,\r\n    quoteToken: serializedTokens.busd,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 476,\r\n    lpSymbol: 'QI-BNB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xf924E642f05ACC57fc3b14990c2B1a137683b201',\r\n    },\r\n    token: serializedTokens.qi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 475,\r\n    lpSymbol: 'KART-BNB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0927C49A18eAc4512112e7a226275e2c36f2C3Db',\r\n    },\r\n    token: serializedTokens.kart,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 474,\r\n    lpSymbol: 'PORTO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0A292e96ABb35297786a38fDD67Dc4f82689E670',\r\n    },\r\n    token: serializedTokens.porto,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 425,\r\n    lpSymbol: 'DVI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x89ebf9cd99864f6e51bd7a578965922029cab977',\r\n    },\r\n    token: serializedTokens.dvi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 351,\r\n    lpSymbol: 'JGN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7275278C94b5e20708380561C4Af98F38dDC6374',\r\n    },\r\n    token: serializedTokens.jgn,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 446,\r\n    lpSymbol: 'BMON-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x00e53C169dA54a7E11172aEEDf8Eb87F060F479e',\r\n    },\r\n    token: serializedTokens.bmon,\r\n    quoteToken: serializedTokens.busd,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 438,\r\n    lpSymbol: 'WSG-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x37Ff7D4459ad96E0B01275E5efffe091f33c2CAD',\r\n    },\r\n    token: serializedTokens.wsg,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 469,\r\n    lpSymbol: 'ZOO-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd5D00B0aD40FF6d8C1a6F7e72F185B6fB3c3fd1F',\r\n    },\r\n    token: serializedTokens.zoo,\r\n    quoteToken: serializedTokens.busd,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 473,\r\n    lpSymbol: 'ETERNAL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbd26e08411483C4BEBba80939FA5a775beE22338',\r\n    },\r\n    token: serializedTokens.eternal,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 472,\r\n    lpSymbol: 'XWG-USDC LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x936928146a21AfCcd30DfA84824A780572B1630B',\r\n    },\r\n    token: serializedTokens.xwg,\r\n    quoteToken: serializedTokens.usdc,\r\n  },\r\n  {\r\n    pid: 471,\r\n    lpSymbol: 'DAR-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x062f88E2B4896e823ac78Ac314468c29eEC4186d',\r\n    },\r\n    token: serializedTokens.dar,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 470,\r\n    lpSymbol: 'FINA-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6dB23b5360c9D2859fDcbf41c56494e7b8573649',\r\n    },\r\n    token: serializedTokens.fina,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 467,\r\n    lpSymbol: 'MONI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbcfd0d4a37fEb4dceAAeFa9da28CD833E5f04e9f',\r\n    },\r\n    token: serializedTokens.moni,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 468,\r\n    lpSymbol: 'XMS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xBC7e925F9Dec60FE4F50C0457609f3cA5c3f5906',\r\n    },\r\n    token: serializedTokens.xms,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 437,\r\n    lpSymbol: 'BMON-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3C2b7B578Dd2175A1c3524Aa0D515106282Bf108',\r\n    },\r\n    token: serializedTokens.bmon,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 466,\r\n    lpSymbol: 'DKT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x365c3F921b2915a480308D0b1C04aEF7B99c2876',\r\n    },\r\n    token: serializedTokens.dkt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 448,\r\n    lpSymbol: 'RUSD-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x59FaC9e98479fc9979aE2a0C7422Af50bCBB9B26',\r\n    },\r\n    token: serializedTokens.rusd,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 464,\r\n    lpSymbol: 'LAZIO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x11c0b2bb4fbb430825d07507a9e24e4c32f7704d',\r\n    },\r\n    token: serializedTokens.lazio,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 432,\r\n    lpSymbol: 'SPS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xfdfde3af740a22648b9dd66d05698e5095940850',\r\n    },\r\n    token: serializedTokens.sps,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 459,\r\n    lpSymbol: 'CART-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x47F0987f276b06E7Ce8D3F09E4E7fEc41a5dB808',\r\n    },\r\n    token: serializedTokens.cart,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 465,\r\n    lpSymbol: 'ARV-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xA63E32FeEFC6590bBf869070Fd2e706Eb7881bd2',\r\n    },\r\n    token: serializedTokens.arv,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 460,\r\n    lpSymbol: 'LIGHT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD469F2E7d1329836733aDBAc6B53E09b775a6e03',\r\n    },\r\n    token: serializedTokens.light,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 463,\r\n    lpSymbol: 'MCB-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xE4077A90f8600d9599440cC6d9057785f43a6Ac9',\r\n    },\r\n    token: serializedTokens.mcb,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 462,\r\n    lpSymbol: 'RPG-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x55cdb14855220b239Cf857A03849D96736b9103f',\r\n    },\r\n    token: serializedTokens.rpg,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 461,\r\n    lpSymbol: 'BETA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x88a02d94f437799f06f8c256ff07aa397e6d0016',\r\n    },\r\n    token: serializedTokens.beta,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 458,\r\n    lpSymbol: 'PROS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x109cBFfE72C02F26536Ff8b92278Dfd3610dE656',\r\n    },\r\n    token: serializedTokens.pros,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 457,\r\n    lpSymbol: 'NFT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0ecc84c9629317a494f12bc56aa2522475bf32e8',\r\n    },\r\n    token: serializedTokens.nft,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 429,\r\n    lpSymbol: 'CHESS-USDC LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1472976e0b97f5b2fc93f1fff14e2b5c4447b64f',\r\n    },\r\n    token: serializedTokens.chess,\r\n    quoteToken: serializedTokens.usdc,\r\n  },\r\n  {\r\n    pid: 439,\r\n    lpSymbol: 'MCRN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe8D5d81dac092Ae61d097f84EFE230759BF2e522',\r\n    },\r\n    token: serializedTokens.mcrn,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 456,\r\n    lpSymbol: 'TLOS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3eDb06e2d182d133864fe7C0f9B4C204bBf61D4E',\r\n    },\r\n    token: serializedTokens.tlos,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 455,\r\n    lpSymbol: 'HERO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5d937c3966002cbD9d32c890a59439b4b300a14d',\r\n    },\r\n    token: serializedTokens.stephero,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 449,\r\n    lpSymbol: 'BP-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2bF2dEB40639201C9A94c9e33b4852D9AEa5fd2D',\r\n    },\r\n    token: serializedTokens.bp,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 454,\r\n    lpSymbol: 'BSCDEFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5B0A3b98C2f01741A11E57A9d0595B254E62F9F2',\r\n    },\r\n    token: serializedTokens.bscdefi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 453,\r\n    lpSymbol: 'QBT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x67EFeF66A55c4562144B9AcfCFbc62F9E4269b3e',\r\n    },\r\n    token: serializedTokens.qbt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 452,\r\n    lpSymbol: 'NAOS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xcaa662ad41a662b81be2aea5d59ec0697628665f',\r\n    },\r\n    token: serializedTokens.naos,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 451,\r\n    lpSymbol: 'PHA-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4ddd56e2f34338839BB5953515833950eA680aFb',\r\n    },\r\n    token: serializedTokens.pha,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 314,\r\n    lpSymbol: 'BEL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x69DEE989c30b5fFe40867f5FC14F00E4bCE7B681',\r\n    },\r\n    token: serializedTokens.bel,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 317,\r\n    lpSymbol: 'RAMP-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xE834bf723f5bDff34a5D1129F3c31Ea4787Bc76a',\r\n    },\r\n    token: serializedTokens.ramp,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 445,\r\n    lpSymbol: 'POTS-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xF90BAA331Cfd40F094476E752Bf272892170d399',\r\n    },\r\n    token: serializedTokens.pots,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 397,\r\n    lpSymbol: 'TUSD-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2e28b9b74d6d99d4697e913b82b41ef1cac51c6c',\r\n    },\r\n    token: serializedTokens.tusd,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 443,\r\n    lpSymbol: 'BTT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xdcfbb12ded3fea12d2a078bc6324131cd14bf835',\r\n    },\r\n    token: serializedTokens.btt,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 442,\r\n    lpSymbol: 'TRX-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb5d108578be3750209d1b3a8f45ffee8c5a75146',\r\n    },\r\n    token: serializedTokens.trx,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 441,\r\n    lpSymbol: 'WIN-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6a445ceb72c8b1751755386c3990055ff92e14a0',\r\n    },\r\n    token: serializedTokens.win,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 436,\r\n    lpSymbol: 'BABYCAKE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb5e33fE13a821e55ED33C884589a804B1b4F6fD8',\r\n    },\r\n    token: serializedTokens.babycake,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 440,\r\n    lpSymbol: 'HERO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe267018C943E77992e7e515724B07b9CE7938124',\r\n    },\r\n    token: serializedTokens.hero,\r\n    quoteToken: serializedTokens.wbnb,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 435,\r\n    lpSymbol: 'REVV-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1cc18962b919ef90085a8b21f8ddc95824fbad9e',\r\n    },\r\n    token: serializedTokens.revv,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 367,\r\n    lpSymbol: 'BTT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x946696344e7d4346b223e1cf77035a76690d6a73',\r\n    },\r\n    token: serializedTokens.btt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 434,\r\n    lpSymbol: 'SKILL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc19dfd34d3ba5816df9cbdaa02d32a9f8dc6f6fc',\r\n    },\r\n    token: serializedTokens.skill,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 369,\r\n    lpSymbol: 'WIN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x894bd57afd8efc93d9171cb585d11d0977557425',\r\n    },\r\n    token: serializedTokens.win,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 433,\r\n    lpSymbol: 'IF-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7b4682D2B3f8670b125aF6AEA8d7eD2Daa43Bdc1',\r\n    },\r\n    token: serializedTokens.if,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 431,\r\n    lpSymbol: 'C98-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x92247860A03F48d5c6425c7CA35CDcFCB1013AA1',\r\n    },\r\n    token: serializedTokens.c98,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 430,\r\n    lpSymbol: 'AXS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xC2d00De94795e60FB76Bc37d899170996cBdA436',\r\n    },\r\n    token: serializedTokens.axs,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 379,\r\n    lpSymbol: 'PMON-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xcdb0016d97fd0e7ec2c3b78aa4786cbd8e19c14c',\r\n    },\r\n    token: serializedTokens.pmon,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 368,\r\n    lpSymbol: 'TRX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3cd338c3bb249b6b3c55799f85a589febbbff9dd',\r\n    },\r\n    token: serializedTokens.trx,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 428,\r\n    lpSymbol: 'TITAN-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9392a1f471d9aa14c0b8eb28bd7a3f4a814727be',\r\n    },\r\n    token: serializedTokens.titan,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 427,\r\n    lpSymbol: 'ONE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9d2296e2fe3cdbf2eb3e3e2ca8811bafa42eedff',\r\n    },\r\n    token: serializedTokens.harmony,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 426,\r\n    lpSymbol: 'MASK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x46c6bA71af7648cD7f67D0AD4d16f75bE251ed12',\r\n    },\r\n    token: serializedTokens.mask,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 339,\r\n    lpSymbol: 'GUM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x28Ea5894D4DBbE90bB58eE3BAB2869387d711c87',\r\n    },\r\n    token: serializedTokens.gum,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 424,\r\n    lpSymbol: 'ADX-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0648ff5de80adf54aac07ece2490f50a418dde23',\r\n    },\r\n    token: serializedTokens.adx,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 423,\r\n    lpSymbol: 'USDC-USDT LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xec6557348085aa57c72514d67070dc863c0a5a8c',\r\n    },\r\n    token: serializedTokens.usdc,\r\n    quoteToken: serializedTokens.usdt,\r\n  },\r\n  {\r\n    pid: 422,\r\n    lpSymbol: 'CAKE-USDT LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xA39Af17CE4a8eb807E076805Da1e2B8EA7D0755b',\r\n    },\r\n    token: serializedTokens.cake,\r\n    quoteToken: serializedTokens.usdt,\r\n  },\r\n  {\r\n    pid: 357,\r\n    lpSymbol: 'SUTER-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2d5DB889392Bc3c8B023A8631ca230A033eEA1B8',\r\n    },\r\n    token: serializedTokens.suter,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 421,\r\n    lpSymbol: 'BSCPAD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xba01662e978de7d67f8ffc937726215eb8995d17',\r\n    },\r\n    token: serializedTokens.bscpad,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 420,\r\n    lpSymbol: 'RABBIT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x04b56A5B3f45CFeaFbfDCFc999c14be5434f2146',\r\n    },\r\n    token: serializedTokens.rabbit,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 419,\r\n    lpSymbol: 'WAULTx-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3e4370204f598205998143F07ebCC486E441b456',\r\n    },\r\n    token: serializedTokens.waultx,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 418,\r\n    lpSymbol: 'WEX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x547A355E70cd1F8CAF531B950905aF751dBEF5E6',\r\n    },\r\n    token: serializedTokens.wex,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 417,\r\n    lpSymbol: 'FORM-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3E19C18Fe3458A6065D8F0844cB7Eae52C9DAE07',\r\n    },\r\n    token: serializedTokens.form,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 416,\r\n    lpSymbol: 'ORBS-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xB87b857670A44356f2b70337E0F218713D2378e8',\r\n    },\r\n    token: serializedTokens.orbs,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 415,\r\n    lpSymbol: 'DG-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8b2824d57eebf07f5aff5c91fa67ed7c501a9f43',\r\n    },\r\n    token: serializedTokens.$dg,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 414,\r\n    lpSymbol: 'WOO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x89eE0491CE55d2f7472A97602a95426216167189',\r\n    },\r\n    token: serializedTokens.woo,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 413,\r\n    lpSymbol: 'HTB-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2a995d355d5df641e878c0f366685741fd18d004',\r\n    },\r\n    token: serializedTokens.htb,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 337,\r\n    lpSymbol: 'DFT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x24d3B0eD4C444A4f6882d527cBF67aDc8c026582',\r\n    },\r\n    token: serializedTokens.dft,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 412,\r\n    lpSymbol: 'HAI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x289841bFb694767bCb56fBc7B741aB4B4D97D490',\r\n    },\r\n    token: serializedTokens.hai,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 411,\r\n    lpSymbol: 'O3-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7759283571Da8c0928786A96AE601944E10461Ff',\r\n    },\r\n    token: serializedTokens.o3,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 410,\r\n    lpSymbol: 'AMPL-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6e98beb694ff1cdb1ee130edd2b21b0298683d58',\r\n    },\r\n    token: serializedTokens.ampl,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 343,\r\n    lpSymbol: 'ODDZ-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3c2c77353E2F6AC1578807b6b2336Bf3a3CbB014',\r\n    },\r\n    token: serializedTokens.oddz,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 409,\r\n    lpSymbol: 'ETH-USDC LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xEa26B78255Df2bBC31C1eBf60010D78670185bD0',\r\n    },\r\n    token: serializedTokens.eth,\r\n    quoteToken: serializedTokens.usdc,\r\n  },\r\n  {\r\n    pid: 408,\r\n    lpSymbol: 'BTCB-ETH LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD171B26E4484402de70e3Ea256bE5A2630d7e88D',\r\n    },\r\n    token: serializedTokens.btcb,\r\n    quoteToken: serializedTokens.eth,\r\n  },\r\n  {\r\n    pid: 347,\r\n    lpSymbol: 'BONDLY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb8b4383B49d451BBeA63BC4421466E1086da6f18',\r\n    },\r\n    token: serializedTokens.bondly,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 407,\r\n    lpSymbol: 'MARSH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x222f93187f15f354d41ff6a7703ef7e18cdd5103',\r\n    },\r\n    token: serializedTokens.marsh,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 406,\r\n    lpSymbol: 'BORING-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xDfA808Da5CFB9ABA5Fb3748FF85888F79174F378',\r\n    },\r\n    token: serializedTokens.boring,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 405,\r\n    lpSymbol: 'MBOX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8FA59693458289914dB0097F5F366d771B7a7C3F',\r\n    },\r\n    token: serializedTokens.mbox,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 404,\r\n    lpSymbol: 'ATA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xef7767677867552cfa699148b96a03358a9be779',\r\n    },\r\n    token: serializedTokens.ata,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 403,\r\n    lpSymbol: 'MX-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x41f049d990d38305504631c9835f6f856bf1ba67',\r\n    },\r\n    token: serializedTokens.mx,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 402,\r\n    lpSymbol: 'bCFX-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xA0387eBeA6be90849c2261b911fBBD52B4C9eAC4',\r\n    },\r\n    token: serializedTokens.bcfx,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 401,\r\n    lpSymbol: 'QKC-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8853e3309a31583ea438f7704681f46f0d4d909b',\r\n    },\r\n    token: serializedTokens.qkc,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 400,\r\n    lpSymbol: 'KTN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x48028de4a9b0d3d91180333d796021ec7757ba1b',\r\n    },\r\n    token: serializedTokens.ktn,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 399,\r\n    lpSymbol: 'MTRG-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4dcA4D427511bC327639b222DA18FA5e334F686F',\r\n    },\r\n    token: serializedTokens.mtrg,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 398,\r\n    lpSymbol: 'SWG-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x226af4e918fcf3e62e5eeec867a3e78aaa7bb01d',\r\n    },\r\n    token: serializedTokens.swg,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 396,\r\n    lpSymbol: 'VRT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xef5212ada83ec2cc105c409df10b8806d20e3b35',\r\n    },\r\n    token: serializedTokens.vrt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 395,\r\n    lpSymbol: 'EZ-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x51bf99bbae59b67e5ce2fa9c17b683384773f8b3',\r\n    },\r\n    token: serializedTokens.ez,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 394,\r\n    lpSymbol: 'KALM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc74f7243766269dec5b85b0ef4af186e909c1b06',\r\n    },\r\n    token: serializedTokens.kalm,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 393,\r\n    lpSymbol: 'pOPEN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1090c996fd1490d15dd7906322ee676a5cc3cf82',\r\n    },\r\n    token: serializedTokens.popen,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 335,\r\n    lpSymbol: 'LIEN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xa4963B38b271c0D714593063497Fc786Fa4029Ce',\r\n    },\r\n    token: serializedTokens.lien,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 392,\r\n    lpSymbol: 'WELL-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1d94cb25895abd6ccfef863c53372bb462aa6b86',\r\n    },\r\n    token: serializedTokens.well,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 391,\r\n    lpSymbol: 'DERI-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xdc7188ac11e124b1fa650b73ba88bf615ef15256',\r\n    },\r\n    token: serializedTokens.deri,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 390,\r\n    lpSymbol: 'CHR-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6045931e511ef7e53a4a817f971e0ca28c758809',\r\n    },\r\n    token: serializedTokens.chr,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 389,\r\n    lpSymbol: 'CAKE-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x804678fa97d91B974ec2af3c843270886528a9E6',\r\n    },\r\n    token: serializedTokens.cake,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 388,\r\n    lpSymbol: 'CYC-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xecf30fbecfa642012f54212a3be92eef1e48edac',\r\n    },\r\n    token: serializedTokens.cyc,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 387,\r\n    lpSymbol: 'XEND-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xcecfc2789af72ed151589a96a59f3a1abc65c3b5',\r\n    },\r\n    token: serializedTokens.xend,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 296,\r\n    lpSymbol: 'HGET-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xF74ee1e10e097dc326a2ad004F9Cc95CB71088d3',\r\n    },\r\n    token: serializedTokens.hget,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 386,\r\n    lpSymbol: 'HOTCROSS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xf23bad605e94de0e3b60c9718a43a94a5af43915',\r\n    },\r\n    token: serializedTokens.hotcross,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 385,\r\n    lpSymbol: 'RFOX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8e04b3972b5c25766c681dfd30a8a1cbf6dcc8c1',\r\n    },\r\n    token: serializedTokens.rfox,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 384,\r\n    lpSymbol: 'WMASS-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xec95ff6281c3ad8e27372fa6675eb337640b8e5e',\r\n    },\r\n    token: serializedTokens.wmass,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 383,\r\n    lpSymbol: 'UBXT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8d3ff27d2ad6a9556b7c4f82f4d602d20114bc90',\r\n    },\r\n    token: serializedTokens.ubxt,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 381,\r\n    lpSymbol: 'BTR-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbc7ac609fa730239190a70952e64ee1dfc2530ac',\r\n    },\r\n    token: serializedTokens.btr,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 380,\r\n    lpSymbol: 'τDOGE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2030845Ce7d4224523fd2F03Ca20Afe4aAD1D890',\r\n    },\r\n    token: serializedTokens.τdoge,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 378,\r\n    lpSymbol: 'ONE-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4d057f769d930eafd597b49d6fb2e1009a73a702',\r\n    },\r\n    token: serializedTokens.one,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 377,\r\n    lpSymbol: 'FINE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc309a6d2f1537922e06f15aa2eb21caa1b2eedb6',\r\n    },\r\n    token: serializedTokens.fine,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 376,\r\n    lpSymbol: 'DOGE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xac109c8025f272414fd9e2faa805a583708a017f',\r\n    },\r\n    token: serializedTokens.doge,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 310,\r\n    lpSymbol: 'bMXX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc20A92a1424b29b78DFaF92FD35D4cf8A06419B4',\r\n    },\r\n    token: serializedTokens.bmxx,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 375,\r\n    lpSymbol: 'OIN-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6a00e41561ac36a78dba1d09091b0f00c4e53724',\r\n    },\r\n    token: serializedTokens.oin,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 374,\r\n    lpSymbol: 'HYFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0716725d78081a9e0e1ff81516f5415b399e274d',\r\n    },\r\n    token: serializedTokens.hyfi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 373,\r\n    lpSymbol: 'KUN-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xea61020e5a128d2bec67d48f7cfbe3408db7e391',\r\n    },\r\n    token: serializedTokens.kun,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 372,\r\n    lpSymbol: 'KUN-QSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4eafbf68a2d50291ffd163d4e00ad0f040aae707',\r\n    },\r\n    token: serializedTokens.kun,\r\n    quoteToken: serializedTokens.qsd,\r\n  },\r\n  {\r\n    pid: 371,\r\n    lpSymbol: 'MATH-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb7cada0f120ca46745a024e6b9fe907b2fe10cf3',\r\n    },\r\n    token: serializedTokens.math,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 370,\r\n    lpSymbol: 'mCOIN-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbcf01a42f6bc42f3cfe81b05519565044d65d22a',\r\n    },\r\n    token: serializedTokens.mcoin,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 366,\r\n    lpSymbol: 'PNT-pBTC LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xdaa89d335926628367b47852989bb22ee62ca5de',\r\n    },\r\n    token: serializedTokens.pnt,\r\n    quoteToken: serializedTokens.pbtc,\r\n  },\r\n  {\r\n    pid: 311,\r\n    lpSymbol: 'xMARK-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xAa40f1AC20AAFcFEE8595Da606D78C503C7e70A3',\r\n    },\r\n    token: serializedTokens.xmark,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 365,\r\n    lpSymbol: 'BTCB-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xf45cd219aef8618a92baa7ad848364a158a24f33',\r\n    },\r\n    token: serializedTokens.btcb,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 364,\r\n    lpSymbol: 'LMT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8271d7eafeeb8f24d7c9fe1acce2ae20611972e5',\r\n    },\r\n    token: serializedTokens.lmt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 363,\r\n    lpSymbol: 'DFD-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x029d66f9c0469450b7b4834b8ddc6a1118cec3e1',\r\n    },\r\n    token: serializedTokens.dfd,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 362,\r\n    lpSymbol: 'ALPACA-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7752e1fa9f3a2e860856458517008558deb989e3',\r\n    },\r\n    token: serializedTokens.alpaca,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 361,\r\n    lpSymbol: 'τBTC-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8046fa66753928F35f7Db23ae0188ee6743C2FBA',\r\n    },\r\n    token: serializedTokens.τbtc,\r\n    quoteToken: serializedTokens.btcb,\r\n  },\r\n  {\r\n    pid: 304,\r\n    lpSymbol: 'SWINGBY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4Fd6D315bEf387fAD2322fbc64368fC443F0886D',\r\n    },\r\n    token: serializedTokens.swingby,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 360,\r\n    lpSymbol: 'XED-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xa7A0b605343dF36B748FF4B5f7578b3F2D0651CE',\r\n    },\r\n    token: serializedTokens.xed,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 359,\r\n    lpSymbol: 'HAKKA-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2C624C9Ecf16Cb81aB85cC2C0B0c5e12A09AFDa6',\r\n    },\r\n    token: serializedTokens.hakka,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 358,\r\n    lpSymbol: 'CGG-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0604471c532F9fEBAD3E37190B667f44BD0894b3',\r\n    },\r\n    token: serializedTokens.cgg,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 356,\r\n    lpSymbol: 'bROOBEE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x950FD020F8E4B8C57285EC7020b7a204348dadFa',\r\n    },\r\n    token: serializedTokens.broobee,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 355,\r\n    lpSymbol: 'HZN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xDc9a574b9B341D4a98cE29005b614e1E27430E74',\r\n    },\r\n    token: serializedTokens.hzn,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 354,\r\n    lpSymbol: 'ALPA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4cC442220BE1cE560C1f2573f8CA8f460B3E4172',\r\n    },\r\n    token: serializedTokens.alpa,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 353,\r\n    lpSymbol: 'PERL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x61010e6CbA3b56ba47E9dFd56Da682daCFe76131',\r\n    },\r\n    token: serializedTokens.perl,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 352,\r\n    lpSymbol: 'TLM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xE6b421a4408c82381b226Ab5B6F8C4b639044359',\r\n    },\r\n    token: serializedTokens.tlm,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 350,\r\n    lpSymbol: 'EPS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xddE420cbB3794ebD8FFC3Ac69F9c78e5d1411870',\r\n    },\r\n    token: serializedTokens.eps,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 349,\r\n    lpSymbol: 'ARPA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9730c791743300E9f984C9264395ce705A55Da7c',\r\n    },\r\n    token: serializedTokens.arpa,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 348,\r\n    lpSymbol: 'ITAM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd02DA76c813b9cd4516eD50442923E625f90228f',\r\n    },\r\n    token: serializedTokens.itam,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 346,\r\n    lpSymbol: 'TKO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xFFd4B200d3C77A0B691B5562D804b3bd54294e6e',\r\n    },\r\n    token: serializedTokens.tko,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 345,\r\n    lpSymbol: 'APYS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x510b29a93ebf098f3fC24A16541aAA0114D07056',\r\n    },\r\n    token: serializedTokens.apys,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 344,\r\n    lpSymbol: 'HOO-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3e42C1f7239231E3752B507764445dd8e6A570d5',\r\n    },\r\n    token: serializedTokens.hoo,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 342,\r\n    lpSymbol: 'EASY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x20c6De8983Fb2D641c55004646aEF40b4EA66E18',\r\n    },\r\n    token: serializedTokens.easy,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 341,\r\n    lpSymbol: 'NRV-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xE482249Cd295C0d1e9D2baAEE71e66de21024C68',\r\n    },\r\n    token: serializedTokens.nrv,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 340,\r\n    lpSymbol: 'DEGO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xF1Ec67fA1881796BFf63Db3E1A301cE9cb787Fad',\r\n    },\r\n    token: serializedTokens.dego,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 338,\r\n    lpSymbol: 'pBTC-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0362ba706DFE8ED12Ec1470aB171d8Dcb1C72B8D',\r\n    },\r\n    token: serializedTokens.pbtc,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 336,\r\n    lpSymbol: 'SWTH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x123D475E13aA54A43a7421d94CAa4459dA021c77',\r\n    },\r\n    token: serializedTokens.swth,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 334,\r\n    lpSymbol: 'ZIL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6A97867a4b7Eb7646ffB1F359ad582e9903aa1C2',\r\n    },\r\n    token: serializedTokens.zil,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 333,\r\n    lpSymbol: 'pCWS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6615CE60D71513aA4849269dD63821D324A23F8C',\r\n    },\r\n    token: serializedTokens.pcws,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 332,\r\n    lpSymbol: 'bBADGER-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5A58609dA96469E9dEf3fE344bC39B00d18eb9A5',\r\n    },\r\n    token: serializedTokens.bbadger,\r\n    quoteToken: serializedTokens.btcb,\r\n  },\r\n  {\r\n    pid: 331,\r\n    lpSymbol: 'bDIGG-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x81d776C90c89B8d51E9497D58338933127e2fA80',\r\n    },\r\n    token: serializedTokens.bdigg,\r\n    quoteToken: serializedTokens.btcb,\r\n  },\r\n  {\r\n    pid: 330,\r\n    lpSymbol: 'LTO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xa5Bb44c6F5fD9B836E5a654c8AbbCCc96A15deE5',\r\n    },\r\n    token: serializedTokens.lto,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 329,\r\n    lpSymbol: 'MIR-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x89666d026696660e93Bf6edf57B71A68615768B7',\r\n    },\r\n    token: serializedTokens.mir,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 328,\r\n    lpSymbol: 'TRADE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8F6baf368E7A4f6e2C9c995f22702d5e654A0237',\r\n    },\r\n    token: serializedTokens.trade,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 327,\r\n    lpSymbol: 'DUSK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x678EDb8B268e73dB57b7694c163e1dc296b6e219',\r\n    },\r\n    token: serializedTokens.dusk,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 326,\r\n    lpSymbol: 'BIFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3f1A9f3D9aaD8bD339eD4853F345d2eF89fbfE0c',\r\n    },\r\n    token: serializedTokens.bifi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 325,\r\n    lpSymbol: 'TXL-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1434BB50196A0C7eA825940b1DFd8aAd25d79817',\r\n    },\r\n    token: serializedTokens.txl,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 324,\r\n    lpSymbol: 'COS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe98585bBb2dc81854fF100A3d9D7B0F53E0dafEd',\r\n    },\r\n    token: serializedTokens.cos,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 323,\r\n    lpSymbol: 'BUNNY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5aFEf8567414F29f0f927A0F2787b188624c10E2',\r\n    },\r\n    token: serializedTokens.bunny,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 322,\r\n    lpSymbol: 'ALICE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xcAD7019D6d84a3294b0494aEF02e73BD0f2572Eb',\r\n    },\r\n    token: serializedTokens.alice,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 321,\r\n    lpSymbol: 'FOR-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xE60B4e87645093A42fa9dcC5d0C8Df6E67f1f9d2',\r\n    },\r\n    token: serializedTokens.for,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 320,\r\n    lpSymbol: 'BUX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x222C3CbB89647bF77822435Bd4c234A04272A77A',\r\n    },\r\n    token: serializedTokens.bux,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 319,\r\n    lpSymbol: 'NULS-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x853784B7BDe87d858555715c0123374242db7943',\r\n    },\r\n    token: serializedTokens.nuls,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 318,\r\n    lpSymbol: 'BELT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xF3Bc6FC080ffCC30d93dF48BFA2aA14b869554bb',\r\n    },\r\n    token: serializedTokens.belt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 316,\r\n    lpSymbol: 'BFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x153Ad7d25B0b810497483d0cEE8AF42Fc533FeC8',\r\n    },\r\n    token: serializedTokens.bfi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 315,\r\n    lpSymbol: 'DEXE-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3578B1f9BCE98D2F4D293b422d8850fdf48B1f21',\r\n    },\r\n    token: serializedTokens.dexe,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 313,\r\n    lpSymbol: 'TPT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6D0c831254221ba121fB53fb44Df289A6558867d',\r\n    },\r\n    token: serializedTokens.tpt,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 312,\r\n    lpSymbol: 'WATCH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x13321AcfF4A27f3d2bcA64b8bEaC6e5FdAAAf12C',\r\n    },\r\n    token: serializedTokens.watch,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 309,\r\n    lpSymbol: 'IOTX-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc13aA76AAc067c86aE38028019F414D731b3D86A',\r\n    },\r\n    token: serializedTokens.iotx,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 308,\r\n    lpSymbol: 'BOR-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe094c686aD6cDda57b9564457F541FBF099B948A',\r\n    },\r\n    token: serializedTokens.bor,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 307,\r\n    lpSymbol: 'bOPEN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc7A9c2af263ebB86139Cca9349e49b17129Ba033',\r\n    },\r\n    token: serializedTokens.bopen,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 306,\r\n    lpSymbol: 'SUSHI-ETH LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x16aFc4F2Ad82986bbE2a4525601F8199AB9c832D',\r\n    },\r\n    token: serializedTokens.sushi,\r\n    quoteToken: serializedTokens.eth,\r\n  },\r\n  {\r\n    pid: 305,\r\n    lpSymbol: 'DODO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xA9986Fcbdb23c2E8B11AB40102990a08f8E58f06',\r\n    },\r\n    token: serializedTokens.dodo,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 303,\r\n    lpSymbol: 'BRY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x21dD71aB78EDE3033c976948f769D506E4F489eE',\r\n    },\r\n    token: serializedTokens.bry,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 302,\r\n    lpSymbol: 'ZEE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8e799cB0737525CeB8A6C6Ad07f748535fF6377B',\r\n    },\r\n    token: serializedTokens.zee,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 301,\r\n    lpSymbol: 'SWGb-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x856f9AD94cA8680B899214Bb1EB3d235a3C33Afe',\r\n    },\r\n    token: serializedTokens.swgb,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 300,\r\n    lpSymbol: 'COMP-ETH LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x37908620dEf1491Dd591b5a2d16022A33cDDA415',\r\n    },\r\n    token: serializedTokens.comp,\r\n    quoteToken: serializedTokens.eth,\r\n  },\r\n  {\r\n    pid: 299,\r\n    lpSymbol: 'SFP-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x942b294e59a8c47a0F7F20DF105B082710F7C305',\r\n    },\r\n    token: serializedTokens.sfp,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 298,\r\n    lpSymbol: 'LINA-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xC5768c5371568Cf1114cddD52CAeD163A42626Ed',\r\n    },\r\n    token: serializedTokens.lina,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 297,\r\n    lpSymbol: 'LIT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1F37d4226d23d09044B8005c127C0517BD7e94fD',\r\n    },\r\n    token: serializedTokens.lit,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 295,\r\n    lpSymbol: 'BDO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4288706624e3dD839b069216eB03B8B9819C10d2',\r\n    },\r\n    token: serializedTokens.bdo,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 294,\r\n    lpSymbol: 'EGLD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xcD68856b6E72E99b5eEaAE7d41Bb4A3b484c700D',\r\n    },\r\n    token: serializedTokens.egld,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 293,\r\n    lpSymbol: 'UST-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x05faf555522Fa3F93959F86B41A3808666093210',\r\n    },\r\n    token: serializedTokens.ust,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 292,\r\n    lpSymbol: 'mAMZN-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xC05654C66756eBB82c518598c5f1ea1a0199a563',\r\n    },\r\n    token: serializedTokens.mamzn,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 291,\r\n    lpSymbol: 'mGOOGL-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xA3BfBbAd526C6B856B1Fdf73F99BCD894761fbf3',\r\n    },\r\n    token: serializedTokens.mgoogl,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 290,\r\n    lpSymbol: 'mNFLX-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x91417426C3FEaA3Ca795921eB9FdD9715ad92537',\r\n    },\r\n    token: serializedTokens.mnflx,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 289,\r\n    lpSymbol: 'mTSLA-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xEc6b56a736859AE8ea4bEdA16279Ecd8c60dA7EA',\r\n    },\r\n    token: serializedTokens.mtsla,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 288,\r\n    lpSymbol: 'wSOTE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7653D2c31440f04d2c6520D482dC5DbD7650f70a',\r\n    },\r\n    token: serializedTokens.wsote,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 287,\r\n    lpSymbol: 'FRONT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xC6b668548aA4A56792e8002A920d3159728121D5',\r\n    },\r\n    token: serializedTokens.front,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 286,\r\n    lpSymbol: 'Helmet-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xC869A9943b702B03770B6A92d2b2d25cf3a3f571',\r\n    },\r\n    token: serializedTokens.helmet,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 285,\r\n    lpSymbol: 'BTCST-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xB2678C414ebC63c9CC6d1a0fC45f43E249B50fdE',\r\n    },\r\n    token: serializedTokens.btcst,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 284,\r\n    lpSymbol: 'LTC-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x71b01eBdDD797c8E9E0b003ea2f4FD207fBF46cC',\r\n    },\r\n    token: serializedTokens.ltc,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 283,\r\n    lpSymbol: 'USDC-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1',\r\n    },\r\n    token: serializedTokens.usdc,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 282,\r\n    lpSymbol: 'DAI-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x66FDB2eCCfB58cF098eaa419e5EfDe841368e489',\r\n    },\r\n    token: serializedTokens.dai,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 281,\r\n    lpSymbol: 'BSCX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x47C42b0A056A9C6e9C65b9Ef79020Af518e767A5',\r\n    },\r\n    token: serializedTokens.bscx,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 280,\r\n    lpSymbol: 'TEN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1B415C3ec8095AfBF9d78882b3a6263c4ad141B5',\r\n    },\r\n    token: serializedTokens.ten,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 279,\r\n    lpSymbol: 'bALBT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x24EB18bA412701f278B172ef96697c4622b19da6',\r\n    },\r\n    token: serializedTokens.balbt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 278,\r\n    lpSymbol: 'REEF-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd63b5CecB1f40d626307B92706Df357709D05827',\r\n    },\r\n    token: serializedTokens.reef,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 277,\r\n    lpSymbol: 'Ditto-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8645148dE4E339964bA480AE3478653b5bc6E211',\r\n    },\r\n    token: serializedTokens.ditto,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 276,\r\n    lpSymbol: 'VAI-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x133ee93FE93320e1182923E1a640912eDE17C90C',\r\n    },\r\n    token: serializedTokens.vai,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 275,\r\n    lpSymbol: 'BLK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x356Dd24BfF8e23BdE0430f00ad0C290E33438bD7',\r\n    },\r\n    token: serializedTokens.blink,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 274,\r\n    lpSymbol: 'UNFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x44EA47F2765fd5D26b7eF0222736AD6FD6f61950',\r\n    },\r\n    token: serializedTokens.unfi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 273,\r\n    lpSymbol: 'HARD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x73566ca86248bD12F0979793e4671e99a40299A7',\r\n    },\r\n    token: serializedTokens.hard,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 272,\r\n    lpSymbol: 'CTK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x460b4193Ec4C1a17372Aa5FDcd44c520ba658646',\r\n    },\r\n    token: serializedTokens.ctk,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 271,\r\n    lpSymbol: 'SXP-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD8E2F8b6Db204c405543953Ef6359912FE3A88d6',\r\n    },\r\n    token: serializedTokens.sxp,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 270,\r\n    lpSymbol: 'INJ-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1BdCebcA3b93af70b58C41272AEa2231754B23ca',\r\n    },\r\n    token: serializedTokens.inj,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 269,\r\n    lpSymbol: 'FIL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD9bCcbbbDFd9d67BEb5d2273102CE0762421D1e3',\r\n    },\r\n    token: serializedTokens.fil,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 268,\r\n    lpSymbol: 'UNI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x014608E87AF97a054C9a49f81E1473076D51d9a3',\r\n    },\r\n    token: serializedTokens.uni,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 267,\r\n    lpSymbol: 'YFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xCE383277847f8217392eeA98C5a8B4a7D27811b0',\r\n    },\r\n    token: serializedTokens.yfi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 266,\r\n    lpSymbol: 'ATOM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x468b2DC8DC75990eE3E9dc0648965Ad6294E7914',\r\n    },\r\n    token: serializedTokens.atom,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 265,\r\n    lpSymbol: 'XRP-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x03F18135c44C64ebFdCBad8297fe5bDafdBbdd86',\r\n    },\r\n    token: serializedTokens.xrp,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 264,\r\n    lpSymbol: 'USDT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE',\r\n    },\r\n    token: serializedTokens.usdt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 263,\r\n    lpSymbol: 'ALPHA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xACF47CBEaab5c8A6Ee99263cfE43995f89fB3206',\r\n    },\r\n    token: serializedTokens.alpha,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 262,\r\n    lpSymbol: 'BTCB-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x61EB789d75A95CAa3fF50ed7E47b96c132fEc082',\r\n    },\r\n    token: serializedTokens.btcb,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 261,\r\n    lpSymbol: 'ETH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x74E4716E431f45807DCF19f284c7aA99F18a4fbc',\r\n    },\r\n    token: serializedTokens.eth,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 260,\r\n    lpSymbol: 'XVS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7EB5D86FD78f3852a3e0e064f2842d45a3dB6EA2',\r\n    },\r\n    token: serializedTokens.xvs,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 259,\r\n    lpSymbol: 'TWT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3DcB1787a95D2ea0Eb7d00887704EeBF0D79bb13',\r\n    },\r\n    token: serializedTokens.twt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 258,\r\n    lpSymbol: 'USDT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7EFaEf62fDdCCa950418312c6C91Aef321375A00',\r\n    },\r\n    token: serializedTokens.usdt,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 257,\r\n    lpSymbol: 'LINK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x824eb9faDFb377394430d2744fa7C42916DE3eCe',\r\n    },\r\n    token: serializedTokens.link,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 256,\r\n    lpSymbol: 'EOS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xB6e34b5C65Eda51bb1BD4ea5F79d385Fb94b9504',\r\n    },\r\n    token: serializedTokens.eos,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 255,\r\n    lpSymbol: 'DOT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xDd5bAd8f8b360d76d12FdA230F8BAF42fe0022CF',\r\n    },\r\n    token: serializedTokens.dot,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 254,\r\n    lpSymbol: 'BAND-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x168B273278F3A8d302De5E879aA30690B7E6c28f',\r\n    },\r\n    token: serializedTokens.band,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 253,\r\n    lpSymbol: 'ADA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x28415ff2C35b65B9E5c7de82126b4015ab9d031F',\r\n    },\r\n    token: serializedTokens.ada,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  /**\r\n   * V2 farms, set to be removed once unstaked\r\n   */\r\n  {\r\n    pid: 139,\r\n    lpSymbol: 'CAKE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xFB7E9FE9D13561AdA7131Fa746942a14F7dd4Cf6',\r\n    },\r\n    token: serializedTokens.cake,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 250,\r\n    lpSymbol: 'τBTC-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xFD09CDbd6A7dCAd8AC47df4F139443a729264763',\r\n    },\r\n    token: serializedTokens.τbtc,\r\n    quoteToken: serializedTokens.btcb,\r\n  },\r\n  {\r\n    pid: 193,\r\n    lpSymbol: 'SWINGBY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xA0e3F72BAFcc5d52F0052a39165FD40D3d4d34Fc',\r\n    },\r\n    token: serializedTokens.swingby,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 249,\r\n    lpSymbol: 'XED-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xBbE20dA99db94Fa1077F1C9A5d256761dAf89C60',\r\n    },\r\n    token: serializedTokens.xed,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 248,\r\n    lpSymbol: 'HAKKA-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9ed1ca73AA8F1ccdc3c3a174E77014f8900411CE',\r\n    },\r\n    token: serializedTokens.hakka,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 247,\r\n    lpSymbol: 'CGG-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xB9aA8B0d67DE546aaa82091065a64B7F1C4B1a1F',\r\n    },\r\n    token: serializedTokens.cgg,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 246,\r\n    lpSymbol: 'SUTER-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6f41c9226fa89a552009c3AC087BA74b83772C52',\r\n    },\r\n    token: serializedTokens.suter,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 245,\r\n    lpSymbol: 'bROOBEE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5Ac5184eA06dE24ce8ED2133f58b4Aa2CEd2dC3b',\r\n    },\r\n    token: serializedTokens.broobee,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 244,\r\n    lpSymbol: 'HZN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xF7fcD7e7B3853bf59bCA9183476F218ED07eD3B0',\r\n    },\r\n    token: serializedTokens.hzn,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 243,\r\n    lpSymbol: 'ALPA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xBB41898A3051A6b6D4A36a1c43e906b05799B744',\r\n    },\r\n    token: serializedTokens.alpa,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 242,\r\n    lpSymbol: 'PERL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xB1C2e08A992a619DA570425E78828A8508654f4F',\r\n    },\r\n    token: serializedTokens.perl,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 241,\r\n    lpSymbol: 'TLM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x25f15Cb3D3B3753702E1d5c4E5f6F0720b197843',\r\n    },\r\n    token: serializedTokens.tlm,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 240,\r\n    lpSymbol: 'JGN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8fD5ca41B2B44e4713590584f97c85f9FF59F00D',\r\n    },\r\n    token: serializedTokens.jgn,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 239,\r\n    lpSymbol: 'EPS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x43bc6C256240e657Ad84aFb86825E21B48FEDe78',\r\n    },\r\n    token: serializedTokens.eps,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 238,\r\n    lpSymbol: 'ARPA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD55e5A7b886aE9657b95641c6A7dc5A662EcAbF3',\r\n    },\r\n    token: serializedTokens.arpa,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 237,\r\n    lpSymbol: 'ITAM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3e78b0eD211a49e263fF9b3F0B410932a021E368',\r\n    },\r\n    token: serializedTokens.itam,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 236,\r\n    lpSymbol: 'BONDLY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2205a6424ec4D74a7588450fB71ffd0C4A3Ead65',\r\n    },\r\n    token: serializedTokens.bondly,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 235,\r\n    lpSymbol: 'TKO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc43EdF4a7e89160135C2553E9868446fef9C18DD',\r\n    },\r\n    token: serializedTokens.tko,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 234,\r\n    lpSymbol: 'APYS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7A5523f50a80790cAD011167E20bD21056A2f04A',\r\n    },\r\n    token: serializedTokens.apys,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 233,\r\n    lpSymbol: 'HOO-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc12dAD966505443b5aad7b0C55716c13d285B520',\r\n    },\r\n    token: serializedTokens.hoo,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 232,\r\n    lpSymbol: 'ODDZ-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3B0a7d1030bcDFf45ABB7B03C04110FcCc8095BC',\r\n    },\r\n    token: serializedTokens.oddz,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 231,\r\n    lpSymbol: 'EASY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4b0ec41404a7FF59BaE33C8Dc420804c58B7bF24',\r\n    },\r\n    token: serializedTokens.easy,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 230,\r\n    lpSymbol: 'NRV-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x25dea33a42c7775F6945fae22A8fFBfAC9fB22CD',\r\n    },\r\n    token: serializedTokens.nrv,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 229,\r\n    lpSymbol: 'DEGO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6108aBd546AF17D8f7aFAe59EBfb4A01132A11Bb',\r\n    },\r\n    token: serializedTokens.dego,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 228,\r\n    lpSymbol: 'GUM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xA99d1926a3c15DC4Fb83aB3Fafd63B6C3E87CF22',\r\n    },\r\n    token: serializedTokens.gum,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 227,\r\n    lpSymbol: 'pBTC-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xaccd6673FFc24cD56B080D71384327f78fD92496',\r\n    },\r\n    token: serializedTokens.pbtc,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 226,\r\n    lpSymbol: 'DFT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe86d075051f20eb8c741007Cb8e262f4519944ee',\r\n    },\r\n    token: serializedTokens.dft,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 225,\r\n    lpSymbol: 'SWTH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4f6dfFc9795d35dc1D92c2a7B23Cb7d6EF190B33',\r\n    },\r\n    token: serializedTokens.swth,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 224,\r\n    lpSymbol: 'LIEN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbe7BDE4aD1c136038Dc9f57ef94d1d16e6F9CbF7',\r\n    },\r\n    token: serializedTokens.lien,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 223,\r\n    lpSymbol: 'ZIL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xcBDf499db66Df19A66aB48F16C790FF9eE872add',\r\n    },\r\n    token: serializedTokens.zil,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 222,\r\n    lpSymbol: 'pCWS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe3D941e74141311436F82523817EBaa26462967d',\r\n    },\r\n    token: serializedTokens.pcws,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 221,\r\n    lpSymbol: 'bBADGER-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x87Ae7b5c43D4e160cDB9427a78BA87B9503ee37b',\r\n    },\r\n    token: serializedTokens.bbadger,\r\n    quoteToken: serializedTokens.btcb,\r\n  },\r\n  {\r\n    pid: 220,\r\n    lpSymbol: 'bDIGG-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xfbfa92e037e37F946c0105902640914E3aCe6752',\r\n    },\r\n    token: serializedTokens.bdigg,\r\n    quoteToken: serializedTokens.btcb,\r\n  },\r\n  {\r\n    pid: 219,\r\n    lpSymbol: 'LTO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xF62e92292772F24EAa6B6B8a105c9FC7B8F31EC5',\r\n    },\r\n    token: serializedTokens.lto,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 218,\r\n    lpSymbol: 'MIR-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x905186a70ba3Eb50090d1d0f6914F5460B4DdB40',\r\n    },\r\n    token: serializedTokens.mir,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 217,\r\n    lpSymbol: 'TRADE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x52fCfB6d91Bcf1F1f6d375D0f6c303688b0E8550',\r\n    },\r\n    token: serializedTokens.trade,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 216,\r\n    lpSymbol: 'DUSK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x69773f622cE228Ca7dEd42D8C34Eba8582e85dcA',\r\n    },\r\n    token: serializedTokens.dusk,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 215,\r\n    lpSymbol: 'BIFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x01956F08A55e4FF9775bc01aF6ACb09144564837',\r\n    },\r\n    token: serializedTokens.bifi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 214,\r\n    lpSymbol: 'TXL-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8Ba7eB4056338fd7271E1b7431C8ca3827eF907c',\r\n    },\r\n    token: serializedTokens.txl,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 213,\r\n    lpSymbol: 'COS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xAfB2e729A24629aBdE8E55CEB0e1f899bEe0f70f',\r\n    },\r\n    token: serializedTokens.cos,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 212,\r\n    lpSymbol: 'BUNNY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x283FA8d459Da6e3165B2faF7FA0DD0137503DECf',\r\n    },\r\n    token: serializedTokens.bunny,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 211,\r\n    lpSymbol: 'ALICE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9e1BB5033d47BF8F16FC017CEC0959De7FF00833',\r\n    },\r\n    token: serializedTokens.alice,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 210,\r\n    lpSymbol: 'FOR-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xaBB817B07663521Cf64B006EC9D0FF185b65cfE5',\r\n    },\r\n    token: serializedTokens.for,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 209,\r\n    lpSymbol: 'BUX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7aA4eb5c3bF33e3AD41A47e26b3Bd9b902984610',\r\n    },\r\n    token: serializedTokens.bux,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 208,\r\n    lpSymbol: 'NULS-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xaB46737CAAFbB99999f8b91E4D3C6D4D28E10e05',\r\n    },\r\n    token: serializedTokens.nuls,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 207,\r\n    lpSymbol: 'BELT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x446ff2C0F5350bF2dadD0e0F1AaAA573b362CA6B',\r\n    },\r\n    token: serializedTokens.belt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 206,\r\n    lpSymbol: 'RAMP-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6ED589e69D1927AC45054cBb6E57877879384d6F',\r\n    },\r\n    token: serializedTokens.ramp,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 205,\r\n    lpSymbol: 'BFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xFFA2357f1E6f48d74b1c18c363c3Fe58A032405a',\r\n    },\r\n    token: serializedTokens.bfi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 204,\r\n    lpSymbol: 'DEXE-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x534b0b0700c0cfF9785852707f07f60E7C0bc07E',\r\n    },\r\n    token: serializedTokens.dexe,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 203,\r\n    lpSymbol: 'BEL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2013265224E3cB6A53C67130F9Fe53Ae36CFcfdd',\r\n    },\r\n    token: serializedTokens.bel,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 202,\r\n    lpSymbol: 'TPT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xC14c2dd21d6aEA3C2068A1F8e58d41D3c28F9288',\r\n    },\r\n    token: serializedTokens.tpt,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 201,\r\n    lpSymbol: 'WATCH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD5fBfFf5faB9d29f614d9bd50AF9b1356C53049C',\r\n    },\r\n    token: serializedTokens.watch,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 200,\r\n    lpSymbol: 'xMARK-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x601aE41C5a65b2089a6af2CcfaF984896a1f52AD',\r\n    },\r\n    token: serializedTokens.xmark,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 199,\r\n    lpSymbol: 'bMXX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x037d38c7DfF5732DAA5f8C05478Eb75cdf24f42B',\r\n    },\r\n    token: serializedTokens.bmxx,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 198,\r\n    lpSymbol: 'IOTX-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8503462D0d4D3ce73e857bCC7D0Ef1125B0d66fF',\r\n    },\r\n    token: serializedTokens.iotx,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 197,\r\n    lpSymbol: 'BOR-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xE0243Ce3b50bd551168cE6964F178507d0a1acD5',\r\n    },\r\n    token: serializedTokens.bor,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 196,\r\n    lpSymbol: 'bOPEN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD2FcF98EaeD2c08e9BcA854802C07b93D27913aC',\r\n    },\r\n    token: serializedTokens.bopen,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 195,\r\n    lpSymbol: 'SUSHI-ETH LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3BECbb09F622187B544C0892EeDeB58C004117e1',\r\n    },\r\n    token: serializedTokens.sushi,\r\n    quoteToken: serializedTokens.eth,\r\n  },\r\n  {\r\n    pid: 194,\r\n    lpSymbol: 'DODO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x220e34306a93002fB7947C9Fc633d6f538bd5032',\r\n    },\r\n    token: serializedTokens.dodo,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 192,\r\n    lpSymbol: 'BRY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xC3E303647cbD43EC22989275e7ecFA8952A6BA02',\r\n    },\r\n    token: serializedTokens.bry,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 191,\r\n    lpSymbol: 'ZEE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6d1299B158bd13F4B50e951aaBf2Aa501FD87E52',\r\n    },\r\n    token: serializedTokens.zee,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 190,\r\n    lpSymbol: 'SWGb-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd2A5008d555371e97F30B6dD71597b4F1eDB0f20',\r\n    },\r\n    token: serializedTokens.swgb,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 189,\r\n    lpSymbol: 'COMP-ETH LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6A55a9176f11c1118f01CBaf6c4033a5c1B22a81',\r\n    },\r\n    token: serializedTokens.comp,\r\n    quoteToken: serializedTokens.eth,\r\n  },\r\n  {\r\n    pid: 188,\r\n    lpSymbol: 'SFP-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x01744B868fe98dB669EBf4e9CA557462BAA6097c',\r\n    },\r\n    token: serializedTokens.sfp,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 187,\r\n    lpSymbol: 'LINA-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb923A2Beeb0834528D20b8973A2c69088571aA9E',\r\n    },\r\n    token: serializedTokens.lina,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 186,\r\n    lpSymbol: 'LIT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x41D69Beda3AFF2FFE48E715e2f4248Cb272cFf30',\r\n    },\r\n    token: serializedTokens.lit,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 185,\r\n    lpSymbol: 'HGET-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x239aD1874114B2235485e34b14c48dB73CCA3ffb',\r\n    },\r\n    token: serializedTokens.hget,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 184,\r\n    lpSymbol: 'BDO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xF7045D7dE334a3F6c1254f98167b2af130eEA8E6',\r\n    },\r\n    token: serializedTokens.bdo,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 183,\r\n    lpSymbol: 'EGLD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xB4670bBEce2D02c4D30786D173985A984686042C',\r\n    },\r\n    token: serializedTokens.egld,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 182,\r\n    lpSymbol: 'UST-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1719606031F1E0B3CCaCa11A2CF550Ef8feBEB0F',\r\n    },\r\n    token: serializedTokens.ust,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 181,\r\n    lpSymbol: 'mAMZN-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2c065E42B464ef38480778B0624A207A09042481',\r\n    },\r\n    token: serializedTokens.mamzn,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 180,\r\n    lpSymbol: 'mGOOGL-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x74d8Dbac5053d31E904a821A3B4C411Bd4dd2307',\r\n    },\r\n    token: serializedTokens.mgoogl,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 179,\r\n    lpSymbol: 'mNFLX-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe1d76359FE4Eb7f0dAd1D719256c22890864718E',\r\n    },\r\n    token: serializedTokens.mnflx,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 178,\r\n    lpSymbol: 'mTSLA-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x36285DDD149949f366b5aFb3f41Cea71d35B8c9e',\r\n    },\r\n    token: serializedTokens.mtsla,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 177,\r\n    lpSymbol: 'wSOTE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe5909de3822d589c220Fb4FA1660A0Fd251Fa87d',\r\n    },\r\n    token: serializedTokens.wsote,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 176,\r\n    lpSymbol: 'FRONT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x84Df48B3e900C79539F6c523D6F528802BeAa713',\r\n    },\r\n    token: serializedTokens.front,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 175,\r\n    lpSymbol: 'Helmet-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD09648792d7e77523ae311Fa5A8F38E4684A5f15',\r\n    },\r\n    token: serializedTokens.helmet,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 174,\r\n    lpSymbol: 'BTCST-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xf967845A6D30C44b555C49C50530076dF5D7fd75',\r\n    },\r\n    token: serializedTokens.btcst,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 173,\r\n    lpSymbol: 'LTC-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x286E8d71722c585c9A82876B1B2FB4dEe9fc536E',\r\n    },\r\n    token: serializedTokens.ltc,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 172,\r\n    lpSymbol: 'USDC-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x05FC2ac8a4FA697501087C916c87b8a5dc4f7b46',\r\n    },\r\n    token: serializedTokens.usdc,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 171,\r\n    lpSymbol: 'DAI-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xdaFE10aA3AB6758596aDAC70f6873C49F5a9bf86',\r\n    },\r\n    token: serializedTokens.dai,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 170,\r\n    lpSymbol: 'BSCX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5fE5394BBc394345737b8e6e48be2804E89eC0eB',\r\n    },\r\n    token: serializedTokens.bscx,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 169,\r\n    lpSymbol: 'TEN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x003C4d60de42eAD30739dD204BD153fE69E20Fb2',\r\n    },\r\n    token: serializedTokens.ten,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 168,\r\n    lpSymbol: 'bALBT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1B8ab50d894CfE793B44057F681A950E87Bd0331',\r\n    },\r\n    token: serializedTokens.balbt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 167,\r\n    lpSymbol: 'REEF-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x074ed2De503580887073A0F788E035C0fbe13F48',\r\n    },\r\n    token: serializedTokens.reef,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 166,\r\n    lpSymbol: 'Ditto-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb33D432eACe45DF62F0145228B550b214DCaA6D4',\r\n    },\r\n    token: serializedTokens.ditto,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 165,\r\n    lpSymbol: 'VAI-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9d95063661fa34B67E0Be0cc71Cf92fc6126aF37',\r\n    },\r\n    token: serializedTokens.vai,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 164,\r\n    lpSymbol: 'BLK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xdA5a79fFe24739876a52AEF0d419aBB3b2517922',\r\n    },\r\n    token: serializedTokens.blink,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 163,\r\n    lpSymbol: 'UNFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x029f944CD3afa7c229122b19c706d8B7c01e062a',\r\n    },\r\n    token: serializedTokens.unfi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 162,\r\n    lpSymbol: 'HARD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x158e337e7Dcfcd8FC512840208BB522d122bB19d',\r\n    },\r\n    token: serializedTokens.hard,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 161,\r\n    lpSymbol: 'CTK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xcbb3fCE7134aF9ef2f3DCe0EAE96db68961b1337',\r\n    },\r\n    token: serializedTokens.ctk,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 160,\r\n    lpSymbol: 'SXP-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6294D8518b7321dc22E32AA907A89B1DAfc1aDbB',\r\n    },\r\n    token: serializedTokens.sxp,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 159,\r\n    lpSymbol: 'INJ-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0444712EE8DFF8913B2b44CB1D2a0273b4CDaBe9',\r\n    },\r\n    token: serializedTokens.inj,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 158,\r\n    lpSymbol: 'FIL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD027c0B352578b1Cf57f472107591CaE5fa27Eb1',\r\n    },\r\n    token: serializedTokens.fil,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 157,\r\n    lpSymbol: 'UNI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2937202a53C82E36bC8beCFBe79795bedF284804',\r\n    },\r\n    token: serializedTokens.uni,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 156,\r\n    lpSymbol: 'YFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xfffad7374c894E65b498BDBD489a9a5324A59F60',\r\n    },\r\n    token: serializedTokens.yfi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 155,\r\n    lpSymbol: 'YFII-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x237E7016Ff50D3B704A7e07571aE08628909A116',\r\n    },\r\n    token: serializedTokens.yfii,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 154,\r\n    lpSymbol: 'ATOM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7DD05eF533b1eBCE7815c90678D4B7344E32b8c9',\r\n    },\r\n    token: serializedTokens.atom,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 153,\r\n    lpSymbol: 'XRP-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0F640E3ec77415Fd810D18B3ac000cD8a172E22f',\r\n    },\r\n    token: serializedTokens.xrp,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 152,\r\n    lpSymbol: 'USDT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4160910ca32eAD83B6d4b32107974397D2579c2d',\r\n    },\r\n    token: serializedTokens.usdt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 151,\r\n    lpSymbol: 'ALPHA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0edAA38Bd263E83fAECbC8476822800F30eE6028',\r\n    },\r\n    token: serializedTokens.alpha,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 150,\r\n    lpSymbol: 'BTCB-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x356b7d0d3c54F22C82B7a670C6Ba9E2381b0624c',\r\n    },\r\n    token: serializedTokens.btcb,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 149,\r\n    lpSymbol: 'ETH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4D7078a6B348766E7a16cD6e6fCb3064721bc6a6',\r\n    },\r\n    token: serializedTokens.eth,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 148,\r\n    lpSymbol: 'XVS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x77B5dB64fD4Cf5B699855420fF2608B2EA6708B3',\r\n    },\r\n    token: serializedTokens.xvs,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 147,\r\n    lpSymbol: 'TWT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x34910518Faf5bfd3a4D15ccFE104B63f06ee3d85',\r\n    },\r\n    token: serializedTokens.twt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 146,\r\n    lpSymbol: 'USDT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x28b81C6b155fd9152AE4A09c4eeB7E7F1C114FaC',\r\n    },\r\n    token: serializedTokens.usdt,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 145,\r\n    lpSymbol: 'LINK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x380941fFd7b7cbf4AEbBfa8A26aa80c2f6570909',\r\n    },\r\n    token: serializedTokens.link,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 144,\r\n    lpSymbol: 'EOS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x082A80b3a55BD3B320a16678784186a979882b21',\r\n    },\r\n    token: serializedTokens.eos,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 143,\r\n    lpSymbol: 'DOT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3aFfc4dd05286ed6B7206Fc85219d222130e35a9',\r\n    },\r\n    token: serializedTokens.dot,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 142,\r\n    lpSymbol: 'BAND-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x473390697036E7611a670575eA9141583471fF47',\r\n    },\r\n    token: serializedTokens.band,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 141,\r\n    lpSymbol: 'ADA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xec0C5719cC100DfB6c6F371bb48d3D079ab6A6D2',\r\n    },\r\n    token: serializedTokens.ada,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 140,\r\n    lpSymbol: 'BUSD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9bdEdb0c876fC0Da79D945DF28942b898Af89Fc7',\r\n    },\r\n    token: serializedTokens.busd,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  /**\r\n   * All farms below here are from v1 and are to be set to 0x\r\n   */\r\n  {\r\n    pid: 1,\r\n    lpSymbol: 'CAKE-BNB LP',\r\n    lpAddresses: {\r\n      97: '0x3ed8936cAFDF85cfDBa29Fbe5940A5b0524824F4',\r\n      56: '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',\r\n    },\r\n    token: serializedTokens.cake,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 136,\r\n    lpSymbol: 'τBTC-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2d4e52c48fd18ee06d3959e82ab0f773c41b9277',\r\n    },\r\n    token: serializedTokens.τbtc,\r\n    quoteToken: serializedTokens.btcb,\r\n  },\r\n  {\r\n    pid: 76,\r\n    lpSymbol: 'SWINGBY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4576C456AF93a37a096235e5d83f812AC9aeD027',\r\n    },\r\n    token: serializedTokens.swingby,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 135,\r\n    lpSymbol: 'XED-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x718d3baa161e1a38758bb0f1fe751e401f431ac4',\r\n    },\r\n    token: serializedTokens.xed,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 134,\r\n    lpSymbol: 'HAKKA-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x56bc8de6e90a8454cb2614b33e750d960aecdf12',\r\n    },\r\n    token: serializedTokens.hakka,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 133,\r\n    lpSymbol: 'CGG-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x484c60f6202c8043DCA0236bB3101ada7ec50AD4',\r\n    },\r\n    token: serializedTokens.cgg,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 132,\r\n    lpSymbol: 'SUTER-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6Ff75C20656A0E4745E7c114972D361F483AFa5f',\r\n    },\r\n    token: serializedTokens.suter,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 131,\r\n    lpSymbol: 'bROOBEE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9e6f9f3382f9edc683203b528222c554c92382c2',\r\n    },\r\n    token: serializedTokens.broobee,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 130,\r\n    lpSymbol: 'HZN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xee4ca18e91012bf87fefde3dd6723a8834347a4d',\r\n    },\r\n    token: serializedTokens.hzn,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 129,\r\n    lpSymbol: 'ALPA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x837cd42282801e340f1f17aadf3166fee99fb07c',\r\n    },\r\n    token: serializedTokens.alpa,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 128,\r\n    lpSymbol: 'PERL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x044e9985c14a547d478b1e3d4a4e562e69c8f936',\r\n    },\r\n    token: serializedTokens.perl,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 127,\r\n    lpSymbol: 'TLM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x34e821e785A93261B697eBD2797988B3AA78ca33',\r\n    },\r\n    token: serializedTokens.tlm,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 125,\r\n    lpSymbol: 'JGN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x890479844484D67e34B99e1BBc1468231b254c08',\r\n    },\r\n    token: serializedTokens.jgn,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 124,\r\n    lpSymbol: 'EPS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xf9045866e7b372def1eff3712ce55fac1a98daf0',\r\n    },\r\n    token: serializedTokens.eps,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 123,\r\n    lpSymbol: 'ARPA-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xfb29fca952b478ddcb8a43f57176161e498225b1',\r\n    },\r\n    token: serializedTokens.arpa,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 122,\r\n    lpSymbol: 'ITAM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xCdC53345192D0e31eEAD03D7E9e008Ee659FAEbE',\r\n    },\r\n    token: serializedTokens.itam,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 121,\r\n    lpSymbol: 'BONDLY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x67581bfb4fc13bb73c71489b504e9b5354769063',\r\n    },\r\n    token: serializedTokens.bondly,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 120,\r\n    lpSymbol: 'TKO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x496a8b716A3A3410B16e71E3c906968CE4488e52',\r\n    },\r\n    token: serializedTokens.tko,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 119,\r\n    lpSymbol: 'APYS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xE5783Cc9dFb3E7e474B81B07369a008e80F1cEdb',\r\n    },\r\n    token: serializedTokens.apys,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 118,\r\n    lpSymbol: 'HOO-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3c9e55edbd937ae0ad8c084a1a8302110612a371',\r\n    },\r\n    token: serializedTokens.hoo,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 117,\r\n    lpSymbol: 'ODDZ-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x61376b56ff33c618b115131712a4138f98810a6a',\r\n    },\r\n    token: serializedTokens.oddz,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 116,\r\n    lpSymbol: 'EASY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbd1ec00b0d1cca9d5b28fbe0bb7d664238af2ffa',\r\n    },\r\n    token: serializedTokens.easy,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 115,\r\n    lpSymbol: 'NRV-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5a805994a2e30ac710e7376ccc0211285bd4dd92',\r\n    },\r\n    token: serializedTokens.nrv,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 114,\r\n    lpSymbol: 'DEGO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x17F0b998B81cE75074a7CDAdAe6D63Da3cb23572',\r\n    },\r\n    token: serializedTokens.dego,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 113,\r\n    lpSymbol: 'GUM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x155645cDF8e4B28d5B7790b65d9f79efc222740C',\r\n    },\r\n    token: serializedTokens.gum,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 112,\r\n    lpSymbol: 'pBTC-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb5f6f7dad23132d40d778085d795bd0fd4b859cd',\r\n    },\r\n    token: serializedTokens.pbtc,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 111,\r\n    lpSymbol: 'DFT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8FbCbD7e30b1733965a8980bf7Ae2ca1c0C456cc',\r\n    },\r\n    token: serializedTokens.dft,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 110,\r\n    lpSymbol: 'SWTH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x8c5cFfad6cddb96Ee33DA685D0d50a37e030E115',\r\n    },\r\n    token: serializedTokens.swth,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 109,\r\n    lpSymbol: 'LIEN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xcd14855150335AAE984aa6D281E090c27035C692',\r\n    },\r\n    token: serializedTokens.lien,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 108,\r\n    lpSymbol: 'ZIL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc746337b5f800a0e19ed4eb3bda03ff1401b8167',\r\n    },\r\n    token: serializedTokens.zil,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 107,\r\n    lpSymbol: 'pCWS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x889e81d25bffba437b2a5d3e0e4fc58a0e2749c5',\r\n    },\r\n    token: serializedTokens.pcws,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 106,\r\n    lpSymbol: 'bBADGER-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x10F461CEAC7A17F59e249954Db0784d42EfF5DB5',\r\n    },\r\n    token: serializedTokens.bbadger,\r\n    quoteToken: serializedTokens.btcb,\r\n  },\r\n  {\r\n    pid: 104,\r\n    lpSymbol: 'bDIGG-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xE1E33459505bB3763843a426F7Fd9933418184ae',\r\n    },\r\n    token: serializedTokens.bdigg,\r\n    quoteToken: serializedTokens.btcb,\r\n  },\r\n  {\r\n    pid: 103,\r\n    lpSymbol: 'LTO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x85644fcd00c401e1a0a0a10d2ae6bbe04a73e4ab',\r\n    },\r\n    token: serializedTokens.lto,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 102,\r\n    lpSymbol: 'MIR-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xf64a269F0A06dA07D23F43c1Deb217101ee6Bee7',\r\n    },\r\n    token: serializedTokens.mir,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 101,\r\n    lpSymbol: 'TRADE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2562f94E90dE6D9eb4fB6B3b8Eab56b15Aa4FC72',\r\n    },\r\n    token: serializedTokens.trade,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 100,\r\n    lpSymbol: 'DUSK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xB7918560273FD56e50E9c215CC0DFE8D764C36C5',\r\n    },\r\n    token: serializedTokens.dusk,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 99,\r\n    lpSymbol: 'BIFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd132D2C24F29EE8ABb64a66559d1b7aa627Bd7fD',\r\n    },\r\n    token: serializedTokens.bifi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 98,\r\n    lpSymbol: 'TXL-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD20E0BcCa8B29409bf5726CB24DD779Fe337020e',\r\n    },\r\n    token: serializedTokens.txl,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 97,\r\n    lpSymbol: 'COS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7b1e440240B220244761C9D9A3B07fbA1995BD84',\r\n    },\r\n    token: serializedTokens.cos,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 96,\r\n    lpSymbol: 'BUNNY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7Bb89460599Dbf32ee3Aa50798BBcEae2A5F7f6a',\r\n    },\r\n    token: serializedTokens.bunny,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 95,\r\n    lpSymbol: 'ALICE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe022baa3E5E87658f789c9132B10d7425Fd3a389',\r\n    },\r\n    token: serializedTokens.alice,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 94,\r\n    lpSymbol: 'FOR-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xfEc200A5E3adDD4a7915a556DDe3F5850e644020',\r\n    },\r\n    token: serializedTokens.for,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 93,\r\n    lpSymbol: 'BUX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0F556f4E47513d1a19Be456a9aF778d7e1A226B9',\r\n    },\r\n    token: serializedTokens.bux,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 92,\r\n    lpSymbol: 'NULS-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xCA01F5D89d5b1d24ca5D6Ecc856D21e8a61DAFCc',\r\n    },\r\n    token: serializedTokens.nuls,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 91,\r\n    lpSymbol: 'NULS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xad7e515409e5a7d516411a85acc88c5e993f570a',\r\n    },\r\n    token: serializedTokens.nuls,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 90,\r\n    lpSymbol: 'BELT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x83B92D283cd279fF2e057BD86a95BdEfffED6faa',\r\n    },\r\n    token: serializedTokens.belt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 89,\r\n    lpSymbol: 'RAMP-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbF36959939982D0D34B37Fb3f3425da9676C13a3',\r\n    },\r\n    token: serializedTokens.ramp,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 88,\r\n    lpSymbol: 'BFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x45a9e8d48bc560416008d122c9437927fed50e7d',\r\n    },\r\n    token: serializedTokens.bfi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 87,\r\n    lpSymbol: 'DEXE-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x69ab367bc1bea1d2c0fb4dbaec6b7197951da56c',\r\n    },\r\n    token: serializedTokens.dexe,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 86,\r\n    lpSymbol: 'BEL-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xAB97952a2806D5c92b7046c7aB13a72A87e0097b',\r\n    },\r\n    token: serializedTokens.bel,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 85,\r\n    lpSymbol: 'TPT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4db28767d1527ba545ca5bbda1c96a94ed6ff242',\r\n    },\r\n    token: serializedTokens.tpt,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 84,\r\n    lpSymbol: 'WATCH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xdc6c130299e53acd2cc2d291fa10552ca2198a6b',\r\n    },\r\n    token: serializedTokens.watch,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 83,\r\n    lpSymbol: 'xMARK-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x292ca56ed5b3330a19037f835af4a9c0098ea6fa',\r\n    },\r\n    token: serializedTokens.xmark,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 82,\r\n    lpSymbol: 'bMXX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4D5aA94Ce6BbB1BC4eb73207a5a5d4D052cFcD67',\r\n    },\r\n    token: serializedTokens.bmxx,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 81,\r\n    lpSymbol: 'IOTX-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x36b8b28d37f93372188f2aa2507b68a5cd8b2664',\r\n    },\r\n    token: serializedTokens.iotx,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 80,\r\n    lpSymbol: 'BOR-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x86e650350c40a5178a5d014ba37fe8556232b898',\r\n    },\r\n    token: serializedTokens.bor,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 79,\r\n    lpSymbol: 'bOPEN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9d8b7e4a9d53654d82f12c83448d8f92732bc761',\r\n    },\r\n    token: serializedTokens.bopen,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 78,\r\n    lpSymbol: 'SUSHI-ETH LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x17580340f3daedae871a8c21d15911742ec79e0f',\r\n    },\r\n    token: serializedTokens.sushi,\r\n    quoteToken: serializedTokens.eth,\r\n  },\r\n  {\r\n    pid: 77,\r\n    lpSymbol: 'DODO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9e642d174b14faea31d842dc83037c42b53236e6',\r\n    },\r\n    token: serializedTokens.dodo,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 75,\r\n    lpSymbol: 'BRY-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5E3CD27F36932Bc0314aC4e2510585798C34a2fC',\r\n    },\r\n    token: serializedTokens.bry,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 74,\r\n    lpSymbol: 'ZEE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb5ab3996808c7e489dcdc0f1af2ab212ae0059af',\r\n    },\r\n    token: serializedTokens.zee,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 73,\r\n    lpSymbol: 'SWGb-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc1800c29cf91954357cd0bf3f0accaada3d0109c',\r\n    },\r\n    token: serializedTokens.swgb,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 72,\r\n    lpSymbol: 'COMP-ETH LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0392957571f28037607c14832d16f8b653edd472',\r\n    },\r\n    token: serializedTokens.comp,\r\n    quoteToken: serializedTokens.eth,\r\n  },\r\n  {\r\n    pid: 71,\r\n    lpSymbol: 'SFP-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xcbe2cf3bd012e9c1ade2ee4d41db3dac763e78f3',\r\n    },\r\n    token: serializedTokens.sfp,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 70,\r\n    lpSymbol: 'BETH-ETH LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x99d865ed50d2c32c1493896810fa386c1ce81d91',\r\n    },\r\n    token: serializedTokens.beth,\r\n    quoteToken: serializedTokens.eth,\r\n  },\r\n  {\r\n    pid: 69,\r\n    lpSymbol: 'LINA-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xeb325a8ea1c5abf40c7ceaf645596c1f943d0948',\r\n    },\r\n    token: serializedTokens.lina,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 68,\r\n    lpSymbol: 'LIT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x60bB03D1010b99CEAdD0dd209b64bC8bd83da161',\r\n    },\r\n    token: serializedTokens.lit,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 67,\r\n    lpSymbol: 'HGET-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x66b9e1eac8a81f3752f7f3a5e95de460688a17ee',\r\n    },\r\n    token: serializedTokens.hget,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 66,\r\n    lpSymbol: 'BDO-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x74690f829fec83ea424ee1f1654041b2491a7be9',\r\n    },\r\n    token: serializedTokens.bdo,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 65,\r\n    lpSymbol: 'EGLD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3ef4952c7a9afbe374ea02d1bf5ed5a0015b7716',\r\n    },\r\n    token: serializedTokens.egld,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 63,\r\n    lpSymbol: 'UST-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD1F12370b2ba1C79838337648F820a87eDF5e1e6',\r\n    },\r\n    token: serializedTokens.ust,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 62,\r\n    lpSymbol: 'mAMZN-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc92Dc34665c8a21f98E1E38474580b61b4f3e1b9',\r\n    },\r\n    token: serializedTokens.mamzn,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 61,\r\n    lpSymbol: 'mGOOGL-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x852A68181f789AE6d1Da3dF101740a59A071004f',\r\n    },\r\n    token: serializedTokens.mgoogl,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 60,\r\n    lpSymbol: 'mNFLX-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xF609ade3846981825776068a8eD7746470029D1f',\r\n    },\r\n    token: serializedTokens.mnflx,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 59,\r\n    lpSymbol: 'mTSLA-UST LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xD5664D2d15cdffD597515f1c0D945c6c1D3Bf85B',\r\n    },\r\n    token: serializedTokens.mtsla,\r\n    quoteToken: serializedTokens.ust,\r\n  },\r\n  {\r\n    pid: 58,\r\n    lpSymbol: 'wSOTE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xffb9e2d5ce4378f1a89b29bf53f80804cc078102',\r\n    },\r\n    token: serializedTokens.wsote,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 57,\r\n    lpSymbol: 'FRONT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x36b7d2e5c7877392fb17f9219efad56f3d794700',\r\n    },\r\n    token: serializedTokens.front,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 56,\r\n    lpSymbol: 'Helmet-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x6411310c07d8c48730172146fd6f31fa84034a8b',\r\n    },\r\n    token: serializedTokens.helmet,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 55,\r\n    lpSymbol: 'BTCST-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x91589786D36fEe5B27A5539CfE638a5fc9834665',\r\n    },\r\n    token: serializedTokens.btcst,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 54,\r\n    lpSymbol: 'LTC-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbc765fd113c5bdb2ebc25f711191b56bb8690aec',\r\n    },\r\n    token: serializedTokens.ltc,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 53,\r\n    lpSymbol: 'USDC-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x680dd100e4b394bda26a59dd5c119a391e747d18',\r\n    },\r\n    token: serializedTokens.usdc,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 52,\r\n    lpSymbol: 'DAI-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x3aB77e40340AB084c3e23Be8e5A6f7afed9D41DC',\r\n    },\r\n    token: serializedTokens.dai,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 51,\r\n    lpSymbol: 'BSCX-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x20781bc3701c5309ac75291f5d09bdc23d7b7fa8',\r\n    },\r\n    token: serializedTokens.bscx,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 50,\r\n    lpSymbol: 'TEN-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x01ecc44ddd2d104f44d2aa1a2bd9dfbc91ae8275',\r\n    },\r\n    token: serializedTokens.ten,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 49,\r\n    lpSymbol: 'bALBT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbe14f3a89a4f7f279af9d99554cf12e8c29db921',\r\n    },\r\n    token: serializedTokens.balbt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 46,\r\n    lpSymbol: 'OG-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x64373608f2e93ea97ad4d8ca2cce6b2575db2f55',\r\n    },\r\n    token: serializedTokens.og,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 47,\r\n    lpSymbol: 'ASR-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd6b900d5308356317299dafe303e661271aa12f1',\r\n    },\r\n    token: serializedTokens.asr,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 48,\r\n    lpSymbol: 'ATM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd5b3ebf1a85d32c73a82b40f75e1cd929caf4029',\r\n    },\r\n    token: serializedTokens.atm,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 45,\r\n    lpSymbol: 'REEF-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x58B58cab6C5cF158f63A2390b817710826d116D0',\r\n    },\r\n    token: serializedTokens.reef,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 44,\r\n    lpSymbol: 'Ditto-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x470bc451810b312bbb1256f96b0895d95ea659b1',\r\n    },\r\n    token: serializedTokens.ditto,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 43,\r\n    lpSymbol: 'JUV-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x51a2ffa5b7de506f9a22549e48b33f6cf0d9030e',\r\n    },\r\n    token: serializedTokens.juv,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 42,\r\n    lpSymbol: 'PSG-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9c4f6a5050cf863e67a402e8b377973b4e3372c1',\r\n    },\r\n    token: serializedTokens.psg,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 39,\r\n    lpSymbol: 'UNFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbEA35584b9a88107102ABEf0BDeE2c4FaE5D8c31',\r\n    },\r\n    token: serializedTokens.unfi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 41,\r\n    lpSymbol: 'VAI-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xff17ff314925dff772b71abdff2782bc913b3575',\r\n    },\r\n    token: serializedTokens.vai,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 40,\r\n    lpSymbol: 'BLK-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xC743Dc05F03D25E1aF8eC5F8228f4BD25513c8d0',\r\n    },\r\n    token: serializedTokens.blink,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 37,\r\n    lpSymbol: 'HARD-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x9f40e8a2fcaa267a0c374b6c661e0b372264cc3d',\r\n    },\r\n    token: serializedTokens.hard,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 2,\r\n    lpSymbol: 'BUSD-BNB LP',\r\n    lpAddresses: {\r\n      97: '0x2f7682b64b88149ba3250aee32db712964de5fa9',\r\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\r\n    },\r\n    token: serializedTokens.busd,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 3,\r\n    lpSymbol: 'ADA-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xcbe3282a562e23b8c61ed04bb72ffdbb9233b1ce',\r\n      56: '0xba51d1ab95756ca4eab8737ecd450cd8f05384cf',\r\n    },\r\n    token: serializedTokens.ada,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 4,\r\n    lpSymbol: 'BAND-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xcbe3282a562e23b8c61ed04bb72ffdbb9233b1ce',\r\n      56: '0xc639187ef82271d8f517de6feae4faf5b517533c',\r\n    },\r\n    token: serializedTokens.band,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 5,\r\n    lpSymbol: 'DOT-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0xbcd62661a6b1ded703585d3af7d7649ef4dcdb5c',\r\n    },\r\n    token: serializedTokens.dot,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 6,\r\n    lpSymbol: 'EOS-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x981d2ba1b298888408d342c39c2ab92e8991691e',\r\n    },\r\n    token: serializedTokens.eos,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 7,\r\n    lpSymbol: 'LINK-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0xaebe45e3a03b734c68e5557ae04bfc76917b4686',\r\n    },\r\n    token: serializedTokens.link,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 11,\r\n    lpSymbol: 'USDT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0xc15fa3E22c912A276550F3E5FE3b0Deb87B55aCd',\r\n    },\r\n    token: serializedTokens.usdt,\r\n    quoteToken: serializedTokens.busd,\r\n  },\r\n  {\r\n    pid: 12,\r\n    lpSymbol: 'TWT-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x610e7a287c27dfFcaC0F0a94f547Cc1B770cF483',\r\n    },\r\n    token: serializedTokens.twt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 13,\r\n    lpSymbol: 'XVS-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x41182c32F854dd97bA0e0B1816022e0aCB2fc0bb',\r\n    },\r\n    token: serializedTokens.xvs,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 14,\r\n    lpSymbol: 'ETH-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x70D8929d04b60Af4fb9B58713eBcf18765aDE422',\r\n    },\r\n    token: serializedTokens.eth,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 15,\r\n    lpSymbol: 'BTCB-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x7561EEe90e24F3b348E1087A005F78B4c8453524',\r\n    },\r\n    token: serializedTokens.btcb,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 16,\r\n    lpSymbol: 'ALPHA-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x4e0f3385d932F7179DeE045369286FFa6B03d887',\r\n    },\r\n    token: serializedTokens.alpha,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 17,\r\n    lpSymbol: 'USDT-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x20bcc3b8a0091ddac2d0bc30f68e6cbb97de59cd',\r\n    },\r\n    token: serializedTokens.usdt,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 18,\r\n    lpSymbol: 'XRP-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0xc7b4b32a3be2cb6572a1c9959401f832ce47a6d2',\r\n    },\r\n    token: serializedTokens.xrp,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 19,\r\n    lpSymbol: 'ATOM-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x2333c77fc0b2875c11409cdcd3c75d42d402e834',\r\n    },\r\n    token: serializedTokens.atom,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 20,\r\n    lpSymbol: 'YFII-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x574a978c2d0d36d707a05e459466c7a1054f1210',\r\n    },\r\n    token: serializedTokens.yfii,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 21,\r\n    lpSymbol: 'DAI-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x56c77d59e82f33c712f919d09fceddf49660a829',\r\n    },\r\n    token: serializedTokens.dai,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 22,\r\n    lpSymbol: 'XTZ-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x5acac332f0f49c8badc7afd0134ad19d3db972e6',\r\n    },\r\n    token: serializedTokens.xtz,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 23,\r\n    lpSymbol: 'BCH-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x54edd846db17f43b6e43296134ecd96284671e81',\r\n    },\r\n    token: serializedTokens.bch,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 24,\r\n    lpSymbol: 'YFI-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x68Ff2ca47D27db5Ac0b5c46587645835dD51D3C1',\r\n    },\r\n    token: serializedTokens.yfi,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 25,\r\n    lpSymbol: 'UNI-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x4269e7F43A63CEA1aD7707Be565a94a9189967E9',\r\n    },\r\n    token: serializedTokens.uni,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 26,\r\n    lpSymbol: 'FIL-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x35fe9787f0ebf2a200bac413d3030cf62d312774',\r\n    },\r\n    token: serializedTokens.fil,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 27,\r\n    lpSymbol: 'INJ-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x7a34bd64d18e44CfdE3ef4B81b87BAf3EB3315B6',\r\n    },\r\n    token: serializedTokens.inj,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 29,\r\n    lpSymbol: 'USDC-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x30479874f9320a62bce3bc0e315c920e1d73e278',\r\n    },\r\n    token: serializedTokens.usdc,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 30,\r\n    lpSymbol: 'SXP-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x752E713fB70E3FA1Ac08bCF34485F14A986956c4',\r\n    },\r\n    token: serializedTokens.sxp,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 32,\r\n    lpSymbol: 'CTK-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x7793870484647a7278907498ec504879d6971EAb',\r\n    },\r\n    token: serializedTokens.ctk,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 34,\r\n    lpSymbol: 'STAX-CAKE LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x7cd05f8b960ba071fdf69c750c0e5a57c8366500',\r\n    },\r\n    token: serializedTokens.stax,\r\n    quoteToken: serializedTokens.cake,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 35,\r\n    lpSymbol: 'NAR-CAKE LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x745c4fd226e169d6da959283275a8e0ecdd7f312',\r\n    },\r\n    token: serializedTokens.nar,\r\n    quoteToken: serializedTokens.cake,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 36,\r\n    lpSymbol: 'NYA-CAKE LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x2730bf486d658838464a4ef077880998d944252d',\r\n    },\r\n    token: serializedTokens.nya,\r\n    quoteToken: serializedTokens.cake,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 38,\r\n    lpSymbol: 'bROOBEE-CAKE LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x970858016C963b780E06f7DCfdEf8e809919BcE8',\r\n    },\r\n    token: serializedTokens.broobee,\r\n    quoteToken: serializedTokens.cake,\r\n    isCommunity: true,\r\n  },\r\n  {\r\n    pid: 8,\r\n    lpSymbol: 'BAKE-BNB Bakery LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0xc2eed0f5a0dc28cfa895084bc0a9b8b8279ae492',\r\n    },\r\n    token: serializedTokens.bake,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 9,\r\n    lpSymbol: 'BURGER-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0xd937FB9E6e47F3805981453BFB277a49FFfE04D7',\r\n    },\r\n    token: serializedTokens.burger,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 10,\r\n    lpSymbol: 'BAKE-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xE66790075ad839978fEBa15D4d8bB2b415556a1D',\r\n      56: '0x3Da30727ed0626b78C212e81B37B97A8eF8A25bB',\r\n    },\r\n    token: serializedTokens.bake,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n]\r\n\r\nexport default farms\r\n","import { useEffect, useState } from 'react'\r\n\r\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document\r\n\r\nfunction isWindowVisible() {\r\n  if (!VISIBILITY_STATE_SUPPORTED) {\r\n    return true\r\n  }\r\n\r\n  return document.visibilityState === 'visible'\r\n}\r\n\r\n/**\r\n * Returns whether the window is currently visible to the user.\r\n */\r\nexport default function useIsWindowVisible() {\r\n  const [isVisible, setIsVisible] = useState(isWindowVisible())\r\n\r\n  useEffect(() => {\r\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined\r\n\r\n    const handleVisibilityChange = () => {\r\n      setIsVisible(isWindowVisible())\r\n    }\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange)\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange)\r\n    }\r\n  }, [setIsVisible])\r\n\r\n  return isVisible\r\n}\r\n","import { useEffect, useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { setBlock } from '.'\r\nimport { State } from '../types'\r\n\r\nexport const usePollBlockNumber = (refreshTime = 6000) => {\r\n  const timer = useRef(null)\r\n  const dispatch = useAppDispatch()\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  useEffect(() => {\r\n    if (isWindowVisible) {\r\n      timer.current = setInterval(async () => {\r\n        const blockNumber = await simpleRpcProvider.getBlockNumber()\r\n        dispatch(setBlock(blockNumber))\r\n      }, refreshTime)\r\n    } else {\r\n      clearInterval(timer.current)\r\n    }\r\n\r\n    return () => clearInterval(timer.current)\r\n  }, [dispatch, timer, isWindowVisible, refreshTime])\r\n}\r\n\r\nexport const useBlock = () => {\r\n  return useSelector((state: State) => state.block)\r\n}\r\n\r\nexport const useInitialBlock = () => {\r\n  return useSelector((state: State) => state.block.initialBlock)\r\n}\r\n","import { ChainId } from '@pancakeswap/sdk'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const BASE_BSC_SCAN_URLS = {\r\n  [ChainId.MAINNET]: 'https://bscscan.com',\r\n  [ChainId.TESTNET]: 'https://testnet.bscscan.com',\r\n}\r\n\r\n// CAKE_PER_BLOCK details\r\n// 40 CAKE is minted per block\r\n// 20 CAKE per block is sent to Burn pool (A farm just for burning cake)\r\n// 10 CAKE per block goes to CAKE syrup pool\r\n// 9 CAKE per block goes to Yield farms and lottery\r\n// CAKE_PER_BLOCK in config/index.ts = 40 as we only change the amount sent to the burn pool which is effectively a farm.\r\n// CAKE/Block in src/views/Home/components/CakeDataRow.tsx = 15 (40 - Amount sent to burn pool)\r\nexport const CAKE_PER_BLOCK = 40\r\nexport const BLOCKS_PER_YEAR = (60 / BSC_BLOCK_TIME) * 60 * 24 * 365 // 10512000\r\nexport const CAKE_PER_YEAR = CAKE_PER_BLOCK * BLOCKS_PER_YEAR\r\nexport const BASE_URL = 'https://pancakeswap.finance'\r\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_URL}/add`\r\nexport const BASE_BSC_SCAN_URL = BASE_BSC_SCAN_URLS[ChainId.MAINNET]\r\nexport const DEFAULT_TOKEN_DECIMAL = BIG_TEN.pow(18)\r\nexport const DEFAULT_GAS_LIMIT = 200000\r\nexport const AUCTION_BIDDERS_TO_FETCH = 500\r\nexport const RECLAIM_AUCTIONS_TO_FETCH = 500\r\nexport const AUCTION_WHITELISTED_BIDDERS_TO_FETCH = 500\r\nexport const IPFS_GATEWAY = 'https://ipfs.io/ipfs'\r\n// In reality its 10000 because of fast refresh, a bit less here to cover for possible long request times\r\nexport const PANCAKE_BUNNIES_UPDATE_FREQUENCY = 8000\r\n","import { InjectedConnector } from '@web3-react/injected-connector'\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\r\nimport { BscConnector } from '@binance-chain/bsc-connector'\r\nimport { ConnectorNames } from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport getNodeUrl from './getRpcUrl'\r\n\r\nconst POLLING_INTERVAL = 12000\r\nconst rpcUrl = getNodeUrl()\r\n// @ts-ignore\r\nconst chainId = parseInt(window.SO_LotteryConfig.chainId, 10)\r\n\r\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\r\n\r\nconst walletconnect = new WalletConnectConnector({\r\n  rpc: { [chainId]: rpcUrl },\r\n  qrcode: true,\r\n  // @ts-ignore\r\n  pollingInterval: POLLING_INTERVAL,\r\n})\r\n\r\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\r\n\r\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.BSC]: bscConnector,\r\n}\r\n\r\nexport const getLibrary = (provider): ethers.providers.Web3Provider => {\r\n  const library = new ethers.providers.Web3Provider(provider)\r\n  library.pollingInterval = POLLING_INTERVAL\r\n  return library\r\n}\r\n\r\n/**\r\n * BSC Wallet requires a different sign method\r\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\r\n */\r\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\r\n  if (window.BinanceChain) {\r\n    const { signature } = await window.BinanceChain.bnbSign(account, message)\r\n    return signature\r\n  }\r\n\r\n  /**\r\n   * Wallet Connect does not sign the message correctly unless you use their method\r\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\r\n   */\r\n  if (provider.provider?.wc) {\r\n    const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message))\r\n    const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account])\r\n    return signature\r\n  }\r\n\r\n  return provider.getSigner(account).signMessage(message)\r\n}\r\n","import { EN } from 'config/localization/languages'\r\n\r\nconst publicUrl = process.env.PUBLIC_URL\r\n\r\nexport const LS_KEY = 'pancakeswap_language'\r\n\r\nexport const fetchLocale = async (locale) => {\r\n  const response = await fetch(`${publicUrl}/locales/${locale}.json`)\r\n  const data = await response.json()\r\n  return data\r\n}\r\n\r\nexport const getLanguageCodeFromLS = () => {\r\n  try {\r\n    const codeFromStorage = localStorage.getItem(LS_KEY)\r\n\r\n    return codeFromStorage || EN.locale\r\n  } catch {\r\n    return EN.locale\r\n  }\r\n}\r\n","const ARCHIVED_FARMS_START_PID = 139\r\nconst ARCHIVED_FARMS_END_PID = 250\r\n\r\nconst isArchivedPid = (pid: number) => pid >= ARCHIVED_FARMS_START_PID && pid <= ARCHIVED_FARMS_END_PID\r\n\r\nexport default isArchivedPid\r\n","import tokens from './tokens'\r\nimport { SerializedFarmConfig } from './types'\r\n\r\nconst priceHelperLps: SerializedFarmConfig[] = [\r\n  /**\r\n   * These LPs are just used to help with price calculation for MasterChef LPs (farms.ts).\r\n   * This list is added to the MasterChefLps and passed to fetchFarm. The calls to get contract information about the token/quoteToken in the LP are still made.\r\n   * The absence of a PID means the masterchef contract calls are skipped for this farm.\r\n   * Prices are then fetched for all farms (masterchef + priceHelperLps).\r\n   * Before storing to redux, farms without a PID are filtered out.\r\n   */\r\n  {\r\n    pid: null,\r\n    lpSymbol: 'QSD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7b3ae32eE8C532016f3E31C8941D937c59e055B9',\r\n    },\r\n    token: tokens.qsd,\r\n    quoteToken: tokens.wbnb,\r\n  },\r\n]\r\n\r\nexport default priceHelperLps\r\n","import BigNumber from 'bignumber.js'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\r\nimport multicall from 'utils/multicall'\r\nimport { SerializedFarm, SerializedBigNumber } from '../types'\r\n\r\ntype PublicFarmData = {\r\n  tokenAmountTotal: SerializedBigNumber\r\n  lpTotalInQuoteToken: SerializedBigNumber\r\n  lpTotalSupply: SerializedBigNumber\r\n  tokenPriceVsQuote: SerializedBigNumber\r\n  poolWeight: SerializedBigNumber\r\n  multiplier: string\r\n}\r\n\r\nconst fetchFarm = async (farm: SerializedFarm): Promise<PublicFarmData> => {\r\n  const { pid, lpAddresses, token, quoteToken } = farm\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const calls = [\r\n    // Balance of token in the LP contract\r\n    {\r\n      address: token.address,\r\n      name: 'balanceOf',\r\n      params: [lpAddress],\r\n    },\r\n    // Balance of quote token on LP contract\r\n    {\r\n      address: quoteToken.address,\r\n      name: 'balanceOf',\r\n      params: [lpAddress],\r\n    },\r\n    // Balance of LP tokens in the master chef contract\r\n    {\r\n      address: lpAddress,\r\n      name: 'balanceOf',\r\n      params: [getMasterChefAddress()],\r\n    },\r\n    // Total supply of LP tokens\r\n    {\r\n      address: lpAddress,\r\n      name: 'totalSupply',\r\n    },\r\n    // Token decimals\r\n    {\r\n      address: token.address,\r\n      name: 'decimals',\r\n    },\r\n    // Quote token decimals\r\n    {\r\n      address: quoteToken.address,\r\n      name: 'decimals',\r\n    },\r\n  ]\r\n\r\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\r\n    await multicall(erc20, calls)\r\n\r\n  // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\r\n  const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n  // Raw amount of token in the LP, including those not staked\r\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\r\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\r\n\r\n  // Amount of quoteToken in the LP that are staked in the MC\r\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\r\n\r\n  // Total staked in LP, in quote token value\r\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2))\r\n\r\n  // Only make masterchef calls if farm has pid\r\n  const [info, totalAllocPoint] =\r\n    pid || pid === 0\r\n      ? await multicall(masterchefABI, [\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'poolInfo',\r\n            params: [pid],\r\n          },\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'totalAllocPoint',\r\n          },\r\n        ])\r\n      : [null, null]\r\n\r\n  const allocPoint = info ? new BigNumber(info.allocPoint?._hex) : BIG_ZERO\r\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO\r\n\r\n  return {\r\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\r\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\r\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\r\n    poolWeight: poolWeight.toJSON(),\r\n    multiplier: `${allocPoint.div(100).toString()}X`,\r\n  }\r\n}\r\n\r\nexport default fetchFarm\r\n","import { SerializedFarm } from 'state/types'\r\nimport fetchPublicFarmData from './fetchPublicFarmData'\r\n\r\nconst fetchFarm = async (farm: SerializedFarm): Promise<SerializedFarm> => {\r\n  const farmPublicData = await fetchPublicFarmData(farm)\r\n\r\n  return { ...farm, ...farmPublicData }\r\n}\r\n\r\nexport default fetchFarm\r\n","import { SerializedFarmConfig } from 'config/constants/types'\r\nimport fetchFarm from './fetchFarm'\r\n\r\nconst fetchFarms = async (farmsToFetch: SerializedFarmConfig[]) => {\r\n  const data = await Promise.all(\r\n    farmsToFetch.map(async (farmConfig) => {\r\n      const farm = await fetchFarm(farmConfig)\r\n      const serializedFarm = { ...farm, token: farm.token, quoteToken: farm.quoteToken }\r\n      return serializedFarm\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import { SerializedFarm } from 'state/types'\r\n\r\n/**\r\n * Returns the first farm with a quote token that matches from an array of preferred quote tokens\r\n * @param farms Array of farms\r\n * @param preferredQuoteTokens Array of preferred quote tokens\r\n * @returns A preferred farm, if found - or the first element of the farms array\r\n */\r\nexport const filterFarmsByQuoteToken = (\r\n  farms: SerializedFarm[],\r\n  preferredQuoteTokens: string[] = ['BUSD', 'WBNB'],\r\n): SerializedFarm => {\r\n  const preferredFarm = farms.find((farm) => {\r\n    return preferredQuoteTokens.some((quoteToken) => {\r\n      return farm.quoteToken.symbol === quoteToken\r\n    })\r\n  })\r\n  return preferredFarm || farms[0]\r\n}\r\n\r\nexport default filterFarmsByQuoteToken\r\n","import BigNumber from 'bignumber.js'\r\nimport { BIG_ONE, BIG_ZERO } from 'utils/bigNumber'\r\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\r\nimport { SerializedFarm } from 'state/types'\r\nimport tokens from 'config/constants/tokens'\r\n\r\nconst getFarmFromTokenSymbol = (\r\n  farms: SerializedFarm[],\r\n  tokenSymbol: string,\r\n  preferredQuoteTokens?: string[],\r\n): SerializedFarm => {\r\n  const farmsWithTokenSymbol = farms.filter((farm) => farm.token.symbol === tokenSymbol)\r\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens)\r\n  return filteredFarm\r\n}\r\n\r\nconst getFarmBaseTokenPrice = (\r\n  farm: SerializedFarm,\r\n  quoteTokenFarm: SerializedFarm,\r\n  bnbPriceBusd: BigNumber,\r\n): BigNumber => {\r\n  const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote)\r\n\r\n  if (farm.quoteToken.symbol === tokens.busd.symbol) {\r\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === tokens.wbnb.symbol) {\r\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\r\n  if (!quoteTokenFarm) {\r\n    return BIG_ZERO\r\n  }\r\n\r\n  // Possible alternative farm quoteTokens:\r\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\r\n  // If the farm's quote token isn't BUSD or WBNB, we then use the quote token, of the original farm's quote token\r\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\r\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\r\n  if (quoteTokenFarm.quoteToken.symbol === tokens.wbnb.symbol) {\r\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote)\r\n    return hasTokenPriceVsQuote && quoteTokenInBusd\r\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n      : BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === tokens.busd.symbol) {\r\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote\r\n    return hasTokenPriceVsQuote && quoteTokenInBusd\r\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n      : BIG_ZERO\r\n  }\r\n\r\n  // Catch in case token does not have immediate or once-removed BUSD/WBNB quoteToken\r\n  return BIG_ZERO\r\n}\r\n\r\nconst getFarmQuoteTokenPrice = (\r\n  farm: SerializedFarm,\r\n  quoteTokenFarm: SerializedFarm,\r\n  bnbPriceBusd: BigNumber,\r\n): BigNumber => {\r\n  if (farm.quoteToken.symbol === 'BUSD') {\r\n    return BIG_ONE\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === 'WBNB') {\r\n    return bnbPriceBusd\r\n  }\r\n\r\n  if (!quoteTokenFarm) {\r\n    return BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'WBNB') {\r\n    return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\r\n    return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  return BIG_ZERO\r\n}\r\n\r\nconst fetchFarmsPrices = async (farms: SerializedFarm[]) => {\r\n  const bnbBusdFarm = farms.find((farm) => farm.pid === 252)\r\n  const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO\r\n\r\n  const farmsWithPrices = farms.map((farm) => {\r\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol)\r\n    const tokenPriceBusd = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\r\n    const quoteTokenPriceBusd = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\r\n\r\n    return {\r\n      ...farm,\r\n      tokenPriceBusd: tokenPriceBusd.toJSON(),\r\n      quoteTokenPriceBusd: quoteTokenPriceBusd.toJSON(),\r\n    }\r\n  })\r\n\r\n  return farmsWithPrices\r\n}\r\n\r\nexport default fetchFarmsPrices\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { SerializedFarmConfig } from 'config/constants/types'\r\n\r\nexport const fetchFarmUserAllowances = async (account: string, farmsToFetch: SerializedFarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses)\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAddress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string, farmsToFetch: SerializedFarmConfig[]) => {\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses)\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string, farmsToFetch: SerializedFarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: masterChefAddress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string, farmsToFetch: SerializedFarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: masterChefAddress,\r\n      name: 'pendingCake',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps'\r\nimport fetchFarms from './fetchFarms'\r\nimport fetchFarmsPrices from './fetchFarmsPrices'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { SerializedFarmsState, SerializedFarm } from '../types'\r\n\r\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\r\n  ...farm,\r\n  userData: {\r\n    allowance: '0',\r\n    tokenBalance: '0',\r\n    stakedBalance: '0',\r\n    earnings: '0',\r\n  },\r\n}))\r\n\r\nconst initialState: SerializedFarmsState = {\r\n  data: noAccountFarmConfig,\r\n  loadArchivedFarmsData: false,\r\n  userDataLoaded: false,\r\n}\r\n\r\nexport const nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\r\n\r\n// Async thunks\r\nexport const fetchFarmsPublicDataAsync = createAsyncThunk<SerializedFarm[], number[]>(\r\n  'farms/fetchFarmsPublicDataAsync',\r\n  async (pids) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n\r\n    // Add price helper farms\r\n    const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig)\r\n\r\n    const farms = await fetchFarms(farmsWithPriceHelpers)\r\n    const farmsWithPrices = await fetchFarmsPrices(farms)\r\n\r\n    // Filter out price helper LP config farms\r\n    const farmsWithoutHelperLps = farmsWithPrices.filter((farm: SerializedFarm) => {\r\n      return farm.pid || farm.pid === 0\r\n    })\r\n\r\n    return farmsWithoutHelperLps\r\n  },\r\n)\r\n\r\ninterface FarmUserDataResponse {\r\n  pid: number\r\n  allowance: string\r\n  tokenBalance: string\r\n  stakedBalance: string\r\n  earnings: string\r\n}\r\n\r\nexport const fetchFarmUserDataAsync = createAsyncThunk<FarmUserDataResponse[], { account: string; pids: number[] }>(\r\n  'farms/fetchFarmUserDataAsync',\r\n  async ({ account, pids }) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\r\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\r\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\r\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\r\n\r\n    return userFarmAllowances.map((farmAllowance, index) => {\r\n      return {\r\n        pid: farmsToFetch[index].pid,\r\n        allowance: userFarmAllowances[index],\r\n        tokenBalance: userFarmTokenBalances[index],\r\n        stakedBalance: userStakedBalances[index],\r\n        earnings: userFarmEarnings[index],\r\n      }\r\n    })\r\n  },\r\n)\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    // Update farms with live data\r\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = action.payload.find((farmData) => farmData.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    })\r\n\r\n    // Update farms with user data\r\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\r\n      action.payload.forEach((userDataEl) => {\r\n        const { pid } = userDataEl\r\n        const index = state.data.findIndex((farm) => farm.pid === pid)\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n      state.userDataLoaded = true\r\n    })\r\n  },\r\n})\r\n\r\nexport default farmsSlice.reducer\r\n","import { ReactNode } from 'react'\r\n\r\nexport const types = {\r\n  SUCCESS: 'success',\r\n  DANGER: 'danger',\r\n  WARNING: 'warning',\r\n  INFO: 'info',\r\n}\r\n\r\nexport type Types = typeof types[keyof typeof types]\r\n\r\nexport interface Toast {\r\n  id: string\r\n  type: Types\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nexport interface ToastContainerProps {\r\n  toasts: Toast[]\r\n  stackSpacing?: number\r\n  ttl?: number\r\n  onRemove: (id: string) => void\r\n}\r\n\r\nexport interface ToastProps {\r\n  toast: Toast\r\n  onRemove: ToastContainerProps['onRemove']\r\n  ttl: number\r\n  style: Partial<CSSStyleDeclaration>\r\n}\r\n","import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport styled from 'styled-components'\r\nimport { Alert, alertVariants } from '@pancakeswap/uikit'\r\nimport { ToastProps, types } from './types'\r\n\r\nconst alertTypeMap = {\r\n  [types.INFO]: alertVariants.INFO,\r\n  [types.SUCCESS]: alertVariants.SUCCESS,\r\n  [types.DANGER]: alertVariants.DANGER,\r\n  [types.WARNING]: alertVariants.WARNING,\r\n}\r\n\r\nconst StyledToast = styled.div`\r\n  right: 16px;\r\n  position: fixed;\r\n  max-width: calc(100% - 32px);\r\n  transition: all 250ms ease-in;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    max-width: 400px;\r\n  }\r\n`\r\n\r\nconst Toast: React.FC<ToastProps> = ({ toast, onRemove, style, ttl, ...props }) => {\r\n  const timer = useRef<number>()\r\n  const ref = useRef(null)\r\n  const removeHandler = useRef(onRemove)\r\n  const { id, title, description, type } = toast\r\n\r\n  const handleRemove = useCallback(() => removeHandler.current(id), [id, removeHandler])\r\n\r\n  const handleMouseEnter = () => {\r\n    clearTimeout(timer.current)\r\n  }\r\n\r\n  const handleMouseLeave = () => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n    }\r\n\r\n    timer.current = window.setTimeout(() => {\r\n      handleRemove()\r\n    }, ttl)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n    }\r\n\r\n    timer.current = window.setTimeout(() => {\r\n      handleRemove()\r\n    }, ttl)\r\n\r\n    return () => {\r\n      clearTimeout(timer.current)\r\n    }\r\n  }, [timer, ttl, handleRemove])\r\n\r\n  return (\r\n    <CSSTransition nodeRef={ref} timeout={250} style={style} {...props}>\r\n      <StyledToast ref={ref} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n        <Alert title={title} variant={alertTypeMap[type]} onClick={handleRemove}>\r\n          {description}\r\n        </Alert>\r\n      </StyledToast>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default Toast\r\n","import React from 'react'\r\nimport { TransitionGroup } from 'react-transition-group'\r\nimport styled from 'styled-components'\r\nimport Toast from './Toast'\r\nimport { ToastContainerProps } from './types'\r\n\r\nconst ZINDEX = 1000\r\nconst TOP_POSITION = 80 // Initial position from the top\r\n\r\nconst StyledToastContainer = styled.div`\r\n  .enter,\r\n  .appear {\r\n    opacity: 0.01;\r\n  }\r\n\r\n  .enter.enter-active,\r\n  .appear.appear-active {\r\n    opacity: 1;\r\n    transition: opacity 250ms ease-in;\r\n  }\r\n\r\n  .exit {\r\n    opacity: 1;\r\n  }\r\n\r\n  .exit.exit-active {\r\n    opacity: 0.01;\r\n    transition: opacity 250ms ease-out;\r\n  }\r\n`\r\n\r\nconst ToastContainer: React.FC<ToastContainerProps> = ({ toasts, onRemove, ttl = 6000, stackSpacing = 24 }) => {\r\n  return (\r\n    <StyledToastContainer>\r\n      <TransitionGroup>\r\n        {toasts.map((toast, index) => {\r\n          const zIndex = (ZINDEX - index).toString()\r\n          const top = TOP_POSITION + index * stackSpacing\r\n\r\n          return (\r\n            <Toast key={toast.id} toast={toast} onRemove={onRemove} ttl={ttl} style={{ top: `${top}px`, zIndex }} />\r\n          )\r\n        })}\r\n      </TransitionGroup>\r\n    </StyledToastContainer>\r\n  )\r\n}\r\n\r\nexport default ToastContainer\r\n","/**\r\n * Truncate a transaction or address hash\r\n */\r\nconst truncateHash = (address: string, startLength = 4, endLength = 4) => {\r\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\r\n}\r\n\r\nexport default truncateHash\r\n","import React from 'react'\r\nimport { Link, Text } from '@pancakeswap/uikit'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport truncateHash from 'utils/truncateHash'\r\n\r\ninterface DescriptionWithTxProps {\r\n  description?: string\r\n  txHash?: string\r\n}\r\n\r\nconst DescriptionWithTx: React.FC<DescriptionWithTxProps> = ({ txHash, children }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      {typeof children === 'string' ? <Text as=\"p\">{children}</Text> : children}\r\n      {txHash && (\r\n        <Link external href={getBscScanLink(txHash, 'transaction', chainId)}>\r\n          {t('View in explorer')}: {truncateHash(txHash, 8, 0)}\r\n        </Link>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DescriptionWithTx\r\n","export const TICKET_LIMIT_PER_REQUEST = 2500\r\nexport const NUM_ROUNDS_TO_CHECK_FOR_REWARDS = 3\r\nexport const NUM_ROUNDS_TO_FETCH_FROM_NODES = 3\r\n","import { useContext } from 'react'\r\nimport { ToastsContext } from 'contexts/ToastsContext'\r\n\r\nconst useToast = () => {\r\n  const toastContext = useContext(ToastsContext)\r\n\r\n  if (toastContext === undefined) {\r\n    throw new Error('Toasts context undefined')\r\n  }\r\n\r\n  return toastContext\r\n}\r\n\r\nexport default useToast\r\n","import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\r\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport {\r\n  getNftsFromCollectionApi,\r\n  getNftsMarketData,\r\n  getCollectionsApi,\r\n  getCollectionsSg,\r\n  getUserActivity,\r\n  combineCollectionData,\r\n  getCollectionSg,\r\n  getCollectionApi,\r\n  getNftsFromDifferentCollectionsApi,\r\n  getCompleteAccountNftData,\r\n  getNftsByBunnyIdSg,\r\n  getMarketDataForTokenIds,\r\n  getMetadataWithFallback,\r\n  getPancakeBunniesAttributesField,\r\n  combineApiAndSgResponseToNftToken,\r\n  fetchNftsFiltered,\r\n} from './helpers'\r\nimport {\r\n  State,\r\n  Collection,\r\n  ApiCollections,\r\n  TokenIdWithCollectionAddress,\r\n  NFTMarketInitializationState,\r\n  UserNftInitializationState,\r\n  NftToken,\r\n  NftLocation,\r\n  ApiSingleTokenData,\r\n  NftAttribute,\r\n  NftFilterLoadingState,\r\n  NftFilter,\r\n} from './types'\r\n\r\nconst initialNftFilterState: NftFilter = {\r\n  loadingState: NftFilterLoadingState.IDLE,\r\n  activeFilters: {},\r\n  showOnlyOnSale: true,\r\n  ordering: {\r\n    field: 'currentAskPrice',\r\n    direction: 'asc',\r\n  },\r\n}\r\n\r\nconst initialState: State = {\r\n  initializationState: NFTMarketInitializationState.UNINITIALIZED,\r\n  data: {\r\n    collections: {},\r\n    nfts: {},\r\n    filters: {},\r\n    loadingState: {\r\n      isUpdatingPancakeBunnies: false,\r\n      latestPancakeBunniesUpdateAt: 0,\r\n    },\r\n    users: {},\r\n    user: {\r\n      userNftsInitializationState: UserNftInitializationState.UNINITIALIZED,\r\n      nfts: [],\r\n      activity: {\r\n        initializationState: UserNftInitializationState.UNINITIALIZED,\r\n        askOrderHistory: [],\r\n        buyTradeHistory: [],\r\n        sellTradeHistory: [],\r\n      },\r\n    },\r\n  },\r\n}\r\n\r\n/**\r\n * Fetch all collections data by combining data from the API (static metadata) and the Subgraph (dynamic market data)\r\n */\r\nexport const fetchCollections = createAsyncThunk<Record<string, Collection>>('nft/fetchCollections', async () => {\r\n  const [collections, collectionsMarket] = await Promise.all([getCollectionsApi(), getCollectionsSg()])\r\n  return combineCollectionData(collections?.data ?? [], collectionsMarket)\r\n})\r\n\r\n/**\r\n * Fetch collection data by combining data from the API (static metadata) and the Subgraph (dynamic market data)\r\n */\r\nexport const fetchCollection = createAsyncThunk<Record<string, Collection>, string>(\r\n  'nft/fetchCollection',\r\n  async (collectionAddress) => {\r\n    const [collection, collectionMarket] = await Promise.all([\r\n      getCollectionApi(collectionAddress),\r\n      getCollectionSg(collectionAddress),\r\n    ])\r\n\r\n    return combineCollectionData([collection], [collectionMarket])\r\n  },\r\n)\r\n\r\n/**\r\n * Fetch all NFT data for a collections by combining data from the API (static metadata)\r\n * and the Subgraph (dynamic market data)\r\n * @param collectionAddress\r\n */\r\nexport const fetchNftsFromCollections = createAsyncThunk<\r\n  NftToken[],\r\n  { collectionAddress: string; page: number; size: number }\r\n>('nft/fetchNftsFromCollections', async ({ collectionAddress, page, size }) => {\r\n  try {\r\n    if (collectionAddress === pancakeBunniesAddress) {\r\n      // PancakeBunnies don't need to pre-fetch \"all nfts\" from the collection\r\n      // When user visits IndividualNFTPage required nfts will be fetched via bunny id\r\n      return []\r\n    }\r\n\r\n    const nfts = await getNftsFromCollectionApi(collectionAddress, size, page)\r\n\r\n    if (!nfts?.data) {\r\n      return []\r\n    }\r\n\r\n    const tokenIds = Object.values(nfts.data).map((nft) => nft.tokenId)\r\n    const nftsMarket = await getMarketDataForTokenIds(collectionAddress, tokenIds)\r\n\r\n    return tokenIds.map((id) => {\r\n      const apiMetadata = nfts.data[id]\r\n      const marketData = nftsMarket.find((nft) => nft.tokenId === id)\r\n\r\n      return {\r\n        tokenId: id,\r\n        name: apiMetadata.name,\r\n        description: apiMetadata.description,\r\n        collectionName: apiMetadata.collection.name,\r\n        collectionAddress,\r\n        image: apiMetadata.image,\r\n        attributes: apiMetadata.attributes,\r\n        marketData,\r\n      }\r\n    })\r\n  } catch (error) {\r\n    console.error(`Failed to fetch collection NFTs for ${collectionAddress}`, error)\r\n    return []\r\n  }\r\n})\r\n\r\nexport const filterNftsFromCollection = createAsyncThunk<\r\n  NftToken[],\r\n  { collectionAddress: string; nftFilters: Record<string, NftAttribute> }\r\n>('nft/filterNftsFromCollection', async ({ collectionAddress, nftFilters }) => {\r\n  try {\r\n    const attrParams = Object.values(nftFilters).reduce(\r\n      (accum, attr) => ({\r\n        ...accum,\r\n        [attr.traitType]: attr.value,\r\n      }),\r\n      {},\r\n    )\r\n    if (isEmpty(attrParams)) {\r\n      return []\r\n    }\r\n    const attrFilters = await fetchNftsFiltered(collectionAddress, attrParams)\r\n\r\n    // Fetch market data for each token returned\r\n    const tokenIds = Object.values(attrFilters.data).map((apiToken) => apiToken.tokenId)\r\n    const marketData = await getNftsMarketData({ tokenId_in: tokenIds, collection: collectionAddress.toLowerCase() })\r\n\r\n    const nftTokens: NftToken[] = Object.values(attrFilters.data).map((apiToken) => {\r\n      const apiTokenMarketData = marketData.find((tokenMarketData) => tokenMarketData.tokenId === apiToken.tokenId)\r\n\r\n      return {\r\n        tokenId: apiToken.tokenId,\r\n        name: apiToken.name,\r\n        description: apiToken.description,\r\n        collectionName: apiToken.collection.name,\r\n        collectionAddress,\r\n        image: apiToken.image,\r\n        attributes: apiToken.attributes,\r\n        marketData: apiTokenMarketData,\r\n      }\r\n    })\r\n\r\n    return nftTokens\r\n  } catch {\r\n    return []\r\n  }\r\n})\r\n\r\n/**\r\n * This action keeps data on the individual PancakeBunny page up-to-date. Operation is a twofold\r\n * 1. Update existing NFTs in the state in case some were sold or got price modified\r\n * 2. Fetch 30 more NFTs with specified bunny id\r\n */\r\nexport const fetchNewPBAndUpdateExisting = createAsyncThunk<\r\n  NftToken[],\r\n  {\r\n    bunnyId: string\r\n    existingTokensWithBunnyId: string[]\r\n    allExistingPBTokenIds: string[]\r\n    existingMetadata: ApiSingleTokenData\r\n    orderDirection: 'asc' | 'desc'\r\n  }\r\n>(\r\n  'nft/fetchNewPBAndUpdateExisting',\r\n  async ({ bunnyId, existingTokensWithBunnyId, allExistingPBTokenIds, existingMetadata, orderDirection }) => {\r\n    try {\r\n      // 1. Update existing NFTs in the state in case some were sold or got price modified\r\n      const [updatedNfts, updatedNftsMarket] = await Promise.all([\r\n        getNftsFromCollectionApi(pancakeBunniesAddress),\r\n        getMarketDataForTokenIds(pancakeBunniesAddress, allExistingPBTokenIds),\r\n      ])\r\n\r\n      if (!updatedNfts?.data) {\r\n        return []\r\n      }\r\n      const updatedTokens = updatedNftsMarket.map((marketData) => {\r\n        const apiMetadata = getMetadataWithFallback(updatedNfts.data, marketData.otherId)\r\n        const attributes = getPancakeBunniesAttributesField(marketData.otherId)\r\n        return combineApiAndSgResponseToNftToken(apiMetadata, marketData, attributes)\r\n      })\r\n\r\n      // 2. Fetch 30 more NFTs with specified bunny id\r\n      let newNfts = { data: { [bunnyId]: existingMetadata } }\r\n\r\n      if (!existingMetadata) {\r\n        newNfts = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      }\r\n      const nftsMarket = await getNftsByBunnyIdSg(bunnyId, existingTokensWithBunnyId, orderDirection)\r\n\r\n      if (!newNfts?.data) {\r\n        return updatedTokens\r\n      }\r\n\r\n      const moreTokensWithRequestedBunnyId = nftsMarket.map((marketData) => {\r\n        const apiMetadata = getMetadataWithFallback(newNfts.data, marketData.otherId)\r\n        const attributes = getPancakeBunniesAttributesField(marketData.otherId)\r\n        return combineApiAndSgResponseToNftToken(apiMetadata, marketData, attributes)\r\n      })\r\n      return [...updatedTokens, ...moreTokensWithRequestedBunnyId]\r\n    } catch (error) {\r\n      console.error(`Failed to update PancakeBunnies NFTs`, error)\r\n      return []\r\n    }\r\n  },\r\n)\r\n\r\nexport const fetchUserNfts = createAsyncThunk<\r\n  NftToken[],\r\n  { account: string; profileNftWithCollectionAddress?: TokenIdWithCollectionAddress; collections: ApiCollections }\r\n>('nft/fetchUserNfts', async ({ account, profileNftWithCollectionAddress, collections }) => {\r\n  const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress)\r\n  return completeNftData\r\n})\r\n\r\nexport const updateUserNft = createAsyncThunk<\r\n  NftToken,\r\n  { tokenId: string; collectionAddress: string; location?: NftLocation }\r\n>('nft/updateUserNft', async ({ tokenId, collectionAddress, location = NftLocation.WALLET }) => {\r\n  const marketDataForNft = await getNftsMarketData({\r\n    tokenId_in: [tokenId],\r\n    collection: collectionAddress.toLowerCase(),\r\n  })\r\n  const metadataForNft = await getNftsFromDifferentCollectionsApi([{ tokenId, collectionAddress }])\r\n  const completeNftData = { ...metadataForNft[0], location, marketData: marketDataForNft[0] }\r\n\r\n  return completeNftData\r\n})\r\n\r\nexport const removeUserNft = createAsyncThunk<string, { tokenId: string }>(\r\n  'nft/removeUserNft',\r\n  async ({ tokenId }) => tokenId,\r\n)\r\n\r\nexport const addUserNft = createAsyncThunk<\r\n  NftToken,\r\n  { tokenId: string; collectionAddress: string; nftLocation?: NftLocation }\r\n>('nft/addUserNft', async ({ tokenId, collectionAddress, nftLocation = NftLocation.WALLET }) => {\r\n  const marketDataForNft = await getNftsMarketData({\r\n    tokenId_in: [tokenId],\r\n    collection: collectionAddress.toLowerCase(),\r\n  })\r\n  const metadataForNft = await getNftsFromDifferentCollectionsApi([{ tokenId, collectionAddress }])\r\n\r\n  return {\r\n    ...metadataForNft[0],\r\n    location: nftLocation,\r\n    marketData: marketDataForNft[0],\r\n  }\r\n})\r\n\r\nexport const fetchUserActivity = createAsyncThunk('nft/fetchUserActivity', async (address: string) => {\r\n  const userActivity = await getUserActivity(address.toLocaleLowerCase())\r\n  return userActivity\r\n})\r\n\r\nexport const NftMarket = createSlice({\r\n  name: 'NftMarket',\r\n  initialState,\r\n  reducers: {\r\n    removeAllFilters: (state, action: PayloadAction<string>) => {\r\n      state.data.filters[action.payload] = { ...initialNftFilterState }\r\n      state.data.nfts[action.payload] = []\r\n    },\r\n    setOrdering: (state, action: PayloadAction<{ collection: string; field: string; direction: 'asc' | 'desc' }>) => {\r\n      if (state.data.filters[action.payload.collection]) {\r\n        state.data.filters[action.payload.collection].ordering = {\r\n          field: action.payload.field,\r\n          direction: action.payload.direction,\r\n        }\r\n      } else {\r\n        state.data.filters[action.payload.collection] = {\r\n          ...initialNftFilterState,\r\n          ordering: {\r\n            field: action.payload.field,\r\n            direction: action.payload.direction,\r\n          },\r\n        }\r\n      }\r\n    },\r\n    setShowOnlyOnSale: (state, action: PayloadAction<{ collection: string; showOnlyOnSale: boolean }>) => {\r\n      if (state.data.filters[action.payload.collection]) {\r\n        state.data.filters[action.payload.collection].showOnlyOnSale = action.payload.showOnlyOnSale\r\n      } else {\r\n        state.data.filters[action.payload.collection] = {\r\n          ...initialNftFilterState,\r\n          showOnlyOnSale: action.payload.showOnlyOnSale,\r\n        }\r\n      }\r\n    },\r\n    resetUserNftState: (state) => {\r\n      state.data.user = { ...initialState.data.user }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(filterNftsFromCollection.pending, (state, action) => {\r\n      const { collectionAddress } = action.meta.arg\r\n      if (state.data.filters[collectionAddress]) {\r\n        state.data.filters[collectionAddress].loadingState = NftFilterLoadingState.LOADING\r\n      } else {\r\n        state.data.filters[collectionAddress] = {\r\n          ...initialNftFilterState,\r\n          loadingState: NftFilterLoadingState.LOADING,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(filterNftsFromCollection.fulfilled, (state, action) => {\r\n      const { collectionAddress, nftFilters } = action.meta.arg\r\n\r\n      state.data.filters[collectionAddress] = {\r\n        ...state.data.filters[collectionAddress],\r\n        loadingState: NftFilterLoadingState.IDLE,\r\n        activeFilters: nftFilters,\r\n      }\r\n      state.data.nfts[collectionAddress] = action.payload\r\n    })\r\n\r\n    builder.addCase(fetchCollection.fulfilled, (state, action) => {\r\n      state.data.collections = { ...state.data.collections, ...action.payload }\r\n    })\r\n    builder.addCase(fetchCollections.fulfilled, (state, action) => {\r\n      state.data.collections = action.payload\r\n      state.initializationState = NFTMarketInitializationState.INITIALIZED\r\n    })\r\n    builder.addCase(fetchNftsFromCollections.pending, (state, action) => {\r\n      const { collectionAddress } = action.meta.arg\r\n      if (state.data.filters[collectionAddress]) {\r\n        state.data.filters[collectionAddress].loadingState = NftFilterLoadingState.LOADING\r\n      } else {\r\n        state.data.filters[collectionAddress] = {\r\n          ...initialNftFilterState,\r\n          loadingState: NftFilterLoadingState.LOADING,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchNftsFromCollections.fulfilled, (state, action) => {\r\n      const { collectionAddress } = action.meta.arg\r\n      const existingNfts: NftToken[] = state.data.nfts[collectionAddress] ?? []\r\n      const existingNftsWithoutNewOnes = existingNfts.filter(\r\n        (nftToken) => !action.payload.find((newToken) => newToken.tokenId === nftToken.tokenId),\r\n      )\r\n\r\n      state.data.filters[collectionAddress] = {\r\n        ...state.data.filters[collectionAddress],\r\n        loadingState: NftFilterLoadingState.IDLE,\r\n        activeFilters: {},\r\n      }\r\n      state.data.nfts[collectionAddress] = [...existingNftsWithoutNewOnes, ...action.payload]\r\n    })\r\n    builder.addCase(fetchNewPBAndUpdateExisting.pending, (state) => {\r\n      state.data.loadingState.isUpdatingPancakeBunnies = true\r\n    })\r\n    builder.addCase(fetchNewPBAndUpdateExisting.fulfilled, (state, action) => {\r\n      if (action.payload.length > 0) {\r\n        state.data.nfts[pancakeBunniesAddress] = action.payload\r\n      }\r\n      state.data.loadingState.isUpdatingPancakeBunnies = false\r\n      state.data.loadingState.latestPancakeBunniesUpdateAt = Date.now()\r\n    })\r\n    builder.addCase(fetchNewPBAndUpdateExisting.rejected, (state) => {\r\n      state.data.loadingState.isUpdatingPancakeBunnies = false\r\n      state.data.loadingState.latestPancakeBunniesUpdateAt = Date.now()\r\n    })\r\n    builder.addCase(fetchUserNfts.rejected, (state) => {\r\n      state.data.user.userNftsInitializationState = UserNftInitializationState.ERROR\r\n    })\r\n    builder.addCase(fetchUserNfts.pending, (state) => {\r\n      state.data.user.userNftsInitializationState = UserNftInitializationState.INITIALIZING\r\n    })\r\n    builder.addCase(fetchUserNfts.fulfilled, (state, action) => {\r\n      state.data.user.nfts = action.payload\r\n      state.data.user.userNftsInitializationState = UserNftInitializationState.INITIALIZED\r\n    })\r\n    builder.addCase(updateUserNft.fulfilled, (state, action) => {\r\n      const userNftsState: NftToken[] = state.data.user.nfts\r\n      const nftToUpdate = userNftsState.find((nft) => nft.tokenId === action.payload.tokenId)\r\n      const indexInState = userNftsState.indexOf(nftToUpdate)\r\n      state.data.user.nfts[indexInState] = action.payload\r\n    })\r\n    builder.addCase(removeUserNft.fulfilled, (state, action) => {\r\n      const copyOfState: NftToken[] = [...state.data.user.nfts]\r\n      const nftToRemove = copyOfState.find((nft) => nft.tokenId === action.payload)\r\n      const indexInState = copyOfState.indexOf(nftToRemove)\r\n      copyOfState.splice(indexInState, 1)\r\n      state.data.user.nfts = copyOfState\r\n    })\r\n    builder.addCase(addUserNft.fulfilled, (state, action) => {\r\n      state.data.user.nfts = [...state.data.user.nfts, action.payload]\r\n    })\r\n    builder.addCase(fetchUserActivity.fulfilled, (state, action) => {\r\n      state.data.user.activity = { ...action.payload, initializationState: UserNftInitializationState.INITIALIZED }\r\n    })\r\n    builder.addCase(fetchUserActivity.rejected, (state) => {\r\n      state.data.user.activity.initializationState = UserNftInitializationState.ERROR\r\n    })\r\n    builder.addCase(fetchUserActivity.pending, (state) => {\r\n      state.data.user.activity.initializationState = UserNftInitializationState.INITIALIZING\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { removeAllFilters, setOrdering, setShowOnlyOnSale, resetUserNftState } = NftMarket.actions\r\n\r\nexport default NftMarket.reducer\r\n","import React, { createContext, useCallback, useState } from 'react'\r\nimport { kebabCase } from 'lodash'\r\nimport { Toast, toastTypes } from 'components/Toast'\r\nimport { ToastContextApi } from './types'\r\n\r\nexport const ToastsContext = createContext<ToastContextApi>(undefined)\r\n\r\nexport const ToastsProvider: React.FC = ({ children }) => {\r\n  const [toasts, setToasts] = useState<ToastContextApi['toasts']>([])\r\n\r\n  const toast = useCallback(\r\n    ({ title, description, type }: Omit<Toast, 'id'>) => {\r\n      setToasts((prevToasts) => {\r\n        const id = kebabCase(title)\r\n\r\n        // Remove any existing toasts with the same id\r\n        const currentToasts = prevToasts.filter((prevToast) => prevToast.id !== id)\r\n\r\n        return [\r\n          {\r\n            id,\r\n            title,\r\n            description,\r\n            type,\r\n          },\r\n          ...currentToasts,\r\n        ]\r\n      })\r\n    },\r\n    [setToasts],\r\n  )\r\n\r\n  const toastError = (title: Toast['title'], description?: Toast['description']) => {\r\n    return toast({ title, description, type: toastTypes.DANGER })\r\n  }\r\n  const toastInfo = (title: Toast['title'], description?: Toast['description']) => {\r\n    return toast({ title, description, type: toastTypes.INFO })\r\n  }\r\n  const toastSuccess = (title: Toast['title'], description?: Toast['description']) => {\r\n    return toast({ title, description, type: toastTypes.SUCCESS })\r\n  }\r\n  const toastWarning = (title: Toast['title'], description?: Toast['description']) => {\r\n    return toast({ title, description, type: toastTypes.WARNING })\r\n  }\r\n  const clear = () => setToasts([])\r\n  const remove = (id: string) => {\r\n    setToasts((prevToasts) => prevToasts.filter((prevToast) => prevToast.id !== id))\r\n  }\r\n\r\n  return (\r\n    <ToastsContext.Provider value={{ toasts, clear, remove, toastError, toastInfo, toastSuccess, toastWarning }}>\r\n      {children}\r\n    </ToastsContext.Provider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ToastContainer } from 'components/Toast'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst ToastListener = () => {\r\n  const { toasts, remove } = useToast()\r\n\r\n  const handleRemove = (id: string) => remove(id)\r\n\r\n  return <ToastContainer toasts={toasts} onRemove={handleRemove} />\r\n}\r\n\r\nexport default ToastListener\r\n","import Cookies from 'js-cookie'\r\nimport { Profile } from 'state/types'\r\nimport { GetUserProfileResponse } from 'utils/types'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { getTeam } from 'state/teams/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getNftApi } from 'state/nftMarket/helpers'\r\n\r\nexport interface GetProfileResponse {\r\n  hasRegistered: boolean\r\n  profile?: Profile\r\n}\r\n\r\nconst transformProfileResponse = (profileResponse: GetUserProfileResponse): Partial<Profile> => {\r\n  const { 0: userId, 1: numberPoints, 2: teamId, 3: collectionAddress, 4: tokenId, 5: isActive } = profileResponse\r\n\r\n  return {\r\n    userId: userId.toNumber(),\r\n    points: numberPoints.toNumber(),\r\n    teamId: teamId.toNumber(),\r\n    tokenId: tokenId.toNumber(),\r\n    collectionAddress,\r\n    isActive,\r\n  }\r\n}\r\n\r\nconst profileContract = getProfileContract()\r\nconst profileApi = process.env.REACT_APP_API_PROFILE\r\n\r\nexport const getUsername = async (address: string): Promise<string> => {\r\n  try {\r\n    const response = await fetch(`${profileApi}/api/users/${address.toLowerCase()}`)\r\n\r\n    if (!response.ok) {\r\n      return ''\r\n    }\r\n\r\n    const { username = '' } = await response.json()\r\n\r\n    return username\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\n/**\r\n * Intended to be used for getting a profile avatar\r\n */\r\nexport const getProfileAvatar = async (address: string) => {\r\n  try {\r\n    const hasRegistered = await profileContract.hasRegistered(address)\r\n\r\n    if (!hasRegistered) {\r\n      return null\r\n    }\r\n\r\n    const profileResponse = await profileContract.getUserProfile(address)\r\n    const { tokenId, collectionAddress, isActive } = transformProfileResponse(profileResponse)\r\n\r\n    let nft = null\r\n    if (isActive) {\r\n      const apiRes = await getNftApi(collectionAddress, tokenId.toString())\r\n\r\n      nft = {\r\n        tokenId: apiRes.tokenId,\r\n        name: apiRes.name,\r\n        collectionName: apiRes.collection.name,\r\n        collectionAddress,\r\n        description: apiRes.description,\r\n        attributes: apiRes.attributes,\r\n        createdAt: apiRes.createdAt,\r\n        updatedAt: apiRes.updatedAt,\r\n        image: {\r\n          original: apiRes.image?.original,\r\n          thumbnail: apiRes.image?.thumbnail,\r\n        },\r\n      }\r\n    }\r\n\r\n    return { nft, hasRegistered }\r\n  } catch {\r\n    return { nft: null, hasRegistered: false }\r\n  }\r\n}\r\n\r\nexport const getProfile = async (address: string): Promise<GetProfileResponse> => {\r\n  try {\r\n    return { hasRegistered: false, profile: null }\r\n    const hasRegistered = await profileContract.hasRegistered(address)\r\n\r\n    if (!hasRegistered) {\r\n      return { hasRegistered, profile: null }\r\n    }\r\n\r\n    const profileResponse = await profileContract.getUserProfile(address)\r\n    const { userId, points, teamId, tokenId, collectionAddress, isActive } = transformProfileResponse(profileResponse)\r\n    const team = await getTeam(teamId)\r\n    const username = await getUsername(address)\r\n    let nftToken: NftToken\r\n\r\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\r\n    // so only fetch the nft data if active\r\n    if (isActive) {\r\n      const apiRes = await getNftApi(collectionAddress, tokenId.toString())\r\n\r\n      nftToken = {\r\n        tokenId: apiRes.tokenId,\r\n        name: apiRes.name,\r\n        collectionName: apiRes.collection.name,\r\n        collectionAddress,\r\n        description: apiRes.description,\r\n        attributes: apiRes.attributes,\r\n        createdAt: apiRes.createdAt,\r\n        updatedAt: apiRes.updatedAt,\r\n        image: {\r\n          original: apiRes.image?.original,\r\n          thumbnail: apiRes.image?.thumbnail,\r\n        },\r\n      }\r\n\r\n      // Save the preview image in a cookie so it can be used on the exchange\r\n      Cookies.set(\r\n        `profile_${address}`,\r\n        {\r\n          username,\r\n          avatar: `${nftToken.image.thumbnail}`,\r\n        },\r\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\r\n      )\r\n    }\r\n\r\n    const profile = {\r\n      userId,\r\n      points,\r\n      teamId,\r\n      tokenId,\r\n      username,\r\n      collectionAddress,\r\n      isActive,\r\n      nft: nftToken,\r\n      team,\r\n    } as Profile\r\n\r\n    return { hasRegistered, profile }\r\n  } catch (e) {\r\n    console.error(e)\r\n    return null\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getMasterchefContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getPredictionsContract,\r\n  getChainlinkOracleContract,\r\n  getSouschefV2Contract,\r\n  getLotteryV2Contract,\r\n  getBunnySpecialCakeVaultContract,\r\n  getBunnySpecialPredictionContract,\r\n  getFarmAuctionContract,\r\n  getBunnySpecialLotteryContract,\r\n  getAnniversaryAchievementContract,\r\n  getNftMarketContract,\r\n  getNftSaleContract,\r\n  getPancakeSquadContract,\r\n  getErc721CollectionContract,\r\n} from 'utils/contractHelpers'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\n// Imports below migrated from Exchange useContract.ts\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { ChainId, WETH } from '@pancakeswap/sdk'\r\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\r\nimport ENS_PUBLIC_RESOLVER_ABI from '../config/abi/ens-public-resolver.json'\r\nimport ENS_ABI from '../config/abi/ens-registrar.json'\r\nimport { ERC20_BYTES32_ABI } from '../config/abi/erc20'\r\nimport ERC20_ABI from '../config/abi/erc20.json'\r\nimport WETH_ABI from '../config/abi/weth.json'\r\nimport multiCallAbi from '../config/abi/Multicall.json'\r\nimport { getContract, getProviderOrSigner } from '../utils'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getIfoV1Contract(address, library.getSigner()), [address, library])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getIfoV2Contract(address, library.getSigner()), [address, library])\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBep20Contract(address, library.getSigner()), [address, library])\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getErc721Contract(address, library.getSigner()), [address, library])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getCakeContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnyFactoryContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getPancakeRabbitContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getProfileContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useLotteryV2Contract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getLotteryV2Contract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getMasterchefContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getSouschefContract(id, library.getSigner()), [id, library])\r\n}\r\n\r\nexport const useSousChefV2 = (id) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getSouschefV2Contract(id, library.getSigner()), [id, library])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getPointCenterIfoContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnySpecialContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getClaimRefundContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getTradingCompetitionContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getEasterNftContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getCakeVaultContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getPredictionsContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useChainlinkOracleContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getChainlinkOracleContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useSpecialBunnyCakeVaultContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnySpecialCakeVaultContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useSpecialBunnyPredictionContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnySpecialPredictionContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useBunnySpecialLotteryContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnySpecialLotteryContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useAnniversaryAchievementContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getAnniversaryAchievementContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useNftSaleContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getNftSaleContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const usePancakeSquadContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getPancakeSquadContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useFarmAuctionContract = () => {\r\n  const { account, library } = useActiveWeb3React()\r\n  // This hook is slightly different from others\r\n  // Calls were failing if unconnected user goes to farm auction page\r\n  // Using library instead of library.getSigner() fixes the problem for unconnected users\r\n  // However, this fix is not ideal, it currently has following behavior:\r\n  // - If you visit Farm Auction page coming from some other page there are no errors in console (unconnected or connected)\r\n  // - If you go directly to Farm Auction page\r\n  //   - as unconnected user you don't see any console errors\r\n  //   - as connected user you see `unknown account #0 (operation=\"getAddress\", code=UNSUPPORTED_OPERATION, ...` errors\r\n  //     the functionality of the page is not affected, data is loading fine and you can interact with the contract\r\n  //\r\n  // Similar behavior was also noticed on Trading Competition page.\r\n  return useMemo(() => getFarmAuctionContract(account ? library.getSigner() : library), [library, account])\r\n}\r\n\r\nexport const useNftMarketContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getNftMarketContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useErc721CollectionContract = (collectionAddress: string) => {\r\n  const { library, account } = useActiveWeb3React()\r\n  return useMemo(() => {\r\n    return getErc721CollectionContract(getProviderOrSigner(library, account), collectionAddress)\r\n  }, [account, library, collectionAddress])\r\n}\r\n\r\n// Code below migrated from Exchange useContract.ts\r\n\r\n// returns null on errors\r\nfunction useContract(address: string | undefined, ABI: any, withSignerIfPossible = true): Contract | null {\r\n  const { library, account } = useActiveWeb3React()\r\n\r\n  return useMemo(() => {\r\n    if (!address || !ABI || !library) return null\r\n    try {\r\n      return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\r\n    } catch (error) {\r\n      console.error('Failed to get contract', error)\r\n      return null\r\n    }\r\n  }, [address, ABI, library, withSignerIfPossible, account])\r\n}\r\n\r\nexport function useTokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\r\n  return useContract(tokenAddress, ERC20_ABI, withSignerIfPossible)\r\n}\r\n\r\nexport function useWETHContract(withSignerIfPossible?: boolean): Contract | null {\r\n  const { chainId } = useActiveWeb3React()\r\n  return useContract(chainId ? WETH[chainId].address : undefined, WETH_ABI, withSignerIfPossible)\r\n}\r\n\r\nexport function useENSRegistrarContract(withSignerIfPossible?: boolean): Contract | null {\r\n  const { chainId } = useActiveWeb3React()\r\n  let address: string | undefined\r\n  if (chainId) {\r\n    // eslint-disable-next-line default-case\r\n    switch (chainId) {\r\n      case ChainId.MAINNET:\r\n      case ChainId.TESTNET:\r\n        address = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\r\n        break\r\n    }\r\n  }\r\n  return useContract(address, ENS_ABI, withSignerIfPossible)\r\n}\r\n\r\nexport function useENSResolverContract(address: string | undefined, withSignerIfPossible?: boolean): Contract | null {\r\n  return useContract(address, ENS_PUBLIC_RESOLVER_ABI, withSignerIfPossible)\r\n}\r\n\r\nexport function useBytes32TokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\r\n  return useContract(tokenAddress, ERC20_BYTES32_ABI, withSignerIfPossible)\r\n}\r\n\r\nexport function usePairContract(pairAddress?: string, withSignerIfPossible?: boolean): Contract | null {\r\n  return useContract(pairAddress, IUniswapV2PairABI, withSignerIfPossible)\r\n}\r\n\r\nexport function useMulticallContract(): Contract | null {\r\n  return useContract(getMulticallAddress(), multiCallAbi, false)\r\n}\r\n","import { ChainId, Currency, CurrencyAmount, ETHER, Token, TokenAmount, WETH } from '@pancakeswap/sdk'\r\n\r\nexport function wrappedCurrency(currency: Currency | undefined, chainId: ChainId | undefined): Token | undefined {\r\n  return chainId && currency === ETHER ? WETH[chainId] : currency instanceof Token ? currency : undefined\r\n}\r\n\r\nexport function wrappedCurrencyAmount(\r\n  currencyAmount: CurrencyAmount | undefined,\r\n  chainId: ChainId | undefined,\r\n): TokenAmount | undefined {\r\n  const token = currencyAmount && chainId ? wrappedCurrency(currencyAmount.currency, chainId) : undefined\r\n  return token && currencyAmount ? new TokenAmount(token, currencyAmount.raw) : undefined\r\n}\r\n\r\nexport function unwrappedToken(token: Token): Currency {\r\n  if (token.equals(WETH[token.chainId])) return ETHER\r\n  return token\r\n}\r\n","import merge from 'lodash/merge'\r\nimport teamsList from 'config/constants/teams'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { Team } from 'config/constants/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { TeamsById } from 'state/types'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\n\r\nconst profileContract = getProfileContract()\r\n\r\nexport const getTeam = async (teamId: number): Promise<Team> => {\r\n  try {\r\n    const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = await profileContract.getTeamProfile(teamId)\r\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\r\n\r\n    return merge({}, staticTeamInfo, {\r\n      isJoinable,\r\n      name: teamName,\r\n      users: numberUsers.toNumber(),\r\n      points: numberPoints.toNumber(),\r\n    })\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets on-chain data and merges it with the existing static list of teams\r\n */\r\nexport const getTeams = async (): Promise<TeamsById> => {\r\n  try {\r\n    const teamsById = teamsList.reduce((accum, team) => {\r\n      return {\r\n        ...accum,\r\n        [team.id]: team,\r\n      }\r\n    }, {})\r\n    const nbTeams = await profileContract.numberTeams()\r\n\r\n    const calls = []\r\n    for (let i = 1; i <= nbTeams; i++) {\r\n      calls.push({\r\n        address: getPancakeProfileAddress(),\r\n        name: 'getTeamProfile',\r\n        params: [i],\r\n      })\r\n    }\r\n    const teamData = await multicallv2(profileABI, calls)\r\n\r\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\r\n      const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\r\n\r\n      return {\r\n        ...accum,\r\n        [index + 1]: {\r\n          name: teamName,\r\n          users: numberUsers.toNumber(),\r\n          points: numberPoints.toNumber(),\r\n          isJoinable,\r\n        },\r\n      }\r\n    }, {})\r\n\r\n    return merge({}, teamsById, onChainTeamData)\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n","import { IPFS_GATEWAY } from '../index'\r\nimport { Team } from './types'\r\n\r\nconst teams: Team[] = [\r\n  {\r\n    id: 1,\r\n    name: 'Syrup Storm',\r\n    description: \"The storm's a-comin! Watch out! These bulls are stampeding in a syrupy surge!\",\r\n    images: {\r\n      lg: 'syrup-storm-lg.png',\r\n      md: 'syrup-storm-md.png',\r\n      sm: 'syrup-storm-sm.png',\r\n      alt: 'syrup-storm-alt.png',\r\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/syrup-storm.png`,\r\n    },\r\n    background: 'syrup-storm-bg.svg',\r\n    textColor: '#191326',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Fearsome Flippers',\r\n    description: \"The flippening is coming. Don't get in these bunnies' way, or you'll get flipped, too!\",\r\n    images: {\r\n      lg: 'fearsome-flippers-lg.png',\r\n      md: 'fearsome-flippers-md.png',\r\n      sm: 'fearsome-flippers-sm.png',\r\n      alt: 'fearsome-flippers-alt.png',\r\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/fearsome-flippers.png`,\r\n    },\r\n    background: 'fearsome-flippers-bg.svg',\r\n    textColor: '#FFFFFF',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Chaotic Cakers',\r\n    description: 'Can you stand the heat? Stay out of the kitchen or you might get burned to a crisp!',\r\n    images: {\r\n      lg: 'chaotic-cakers-lg.png',\r\n      md: 'chaotic-cakers-md.png',\r\n      sm: 'chaotic-cakers-sm.png',\r\n      alt: 'chaotic-cakers-alt.png',\r\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/chaotic-cakers.png`,\r\n    },\r\n    background: 'chaotic-cakers-bg.svg',\r\n    textColor: '#191326',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n]\r\n\r\nexport default teams\r\n","import { TokenAmount, Pair, Currency } from '@pancakeswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\n\r\nimport { useMultipleContractSingleData } from '../state/multicall/hooks'\r\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\r\n\r\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI)\r\n\r\nexport enum PairState {\r\n  LOADING,\r\n  NOT_EXISTS,\r\n  EXISTS,\r\n  INVALID,\r\n}\r\n\r\nexport function usePairs(currencies: [Currency | undefined, Currency | undefined][]): [PairState, Pair | null][] {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const tokens = useMemo(\r\n    () =>\r\n      currencies.map(([currencyA, currencyB]) => [\r\n        wrappedCurrency(currencyA, chainId),\r\n        wrappedCurrency(currencyB, chainId),\r\n      ]),\r\n    [chainId, currencies],\r\n  )\r\n\r\n  const pairAddresses = useMemo(\r\n    () =>\r\n      tokens.map(([tokenA, tokenB]) => {\r\n        return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB) : undefined\r\n      }),\r\n    [tokens],\r\n  )\r\n\r\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves')\r\n\r\n  return useMemo(() => {\r\n    return results.map((result, i) => {\r\n      const { result: reserves, loading } = result\r\n      const tokenA = tokens[i][0]\r\n      const tokenB = tokens[i][1]\r\n\r\n      if (loading) return [PairState.LOADING, null]\r\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\r\n      if (!reserves) return [PairState.NOT_EXISTS, null]\r\n      const { reserve0, reserve1 } = reserves\r\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\r\n      return [\r\n        PairState.EXISTS,\r\n        new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString())),\r\n      ]\r\n    })\r\n  }, [results, tokens])\r\n}\r\n\r\nexport function usePair(tokenA?: Currency, tokenB?: Currency): [PairState, Pair | null] {\r\n  return usePairs([[tokenA, tokenB]])[0]\r\n}\r\n","import { Token, ChainId } from '@pancakeswap/sdk'\r\nimport tokens from './tokens'\r\nimport farms from './farms'\r\nimport { Ifo } from './types'\r\n\r\nconst cakeBnbLpToken = new Token(ChainId.MAINNET, farms[1].lpAddresses[ChainId.MAINNET], 18, farms[1].lpSymbol)\r\n\r\nconst ifos: Ifo[] = [\r\n  {\r\n    id: 'porto',\r\n    address: '0xFDFf29dD0b4DD49Bf5E991A30b8593eaA34B4580',\r\n    isActive: true,\r\n    name: 'FC Porto Fan Token (PORTO)',\r\n    poolBasic: {\r\n      saleAmount: '250,000 PORTO',\r\n      raiseAmount: '$500,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.5,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '250,000 PORTO',\r\n      raiseAmount: '$500,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.5,\r\n    },\r\n    currency: tokens.cake,\r\n    token: tokens.porto,\r\n    releaseBlockNumber: 12687500,\r\n    campaignId: '511140000',\r\n    articleUrl: 'https://pancakeswap.finance/voting/proposal/QmaakXYpydAwCgTuSPe3R2ZNraRtkCbK6iBRqBCCdzqKEG',\r\n    tokenOfferingPrice: 2,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'dar',\r\n    address: '0xb6eF1f36220397c434A6B15dc5EA616CFFDF58CE',\r\n    isActive: false,\r\n    name: 'Mines of Dalarnia (DAR)',\r\n    poolBasic: {\r\n      saleAmount: '6,000,000 DAR',\r\n      raiseAmount: '$450,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.5,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '6,000,000 DAR',\r\n      raiseAmount: '$450,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.5,\r\n    },\r\n    currency: tokens.cake,\r\n    token: tokens.dar,\r\n    releaseBlockNumber: 12335455,\r\n    campaignId: '511130000',\r\n    articleUrl: 'https://pancakeswap.finance/voting/proposal/QmeJenHcbY45eQxLRebzvpNk5qSCrj2wM1t4EAMHotFoJL',\r\n    tokenOfferingPrice: 0.075,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'dkt',\r\n    address: '0x89ab9852155A794e371095d863aEAa2DF198067C',\r\n    isActive: false,\r\n    name: 'Duelist King (DKT)',\r\n    poolBasic: {\r\n      saleAmount: '75,000 DKT',\r\n      raiseAmount: '$131,250',\r\n      cakeToBurn: '$65,625',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '175,000 DKT',\r\n      raiseAmount: '$306,250',\r\n      cakeToBurn: '$153,125',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.dkt,\r\n    releaseBlockNumber: 12130750,\r\n    campaignId: '511120000',\r\n    articleUrl: 'https://pancakeswap.finance/voting/proposal/QmTRWdW9a65fAkyJy1wrAJRU548fNMAZhRUDrSxzMDLmwk',\r\n    tokenOfferingPrice: 1.75,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'kalmar',\r\n    address: '0x1aFB32b76696CdF05593Ca3f3957AEFB23a220FB',\r\n    isActive: false,\r\n    name: 'Kalmar (KALM)',\r\n    poolBasic: {\r\n      saleAmount: '375,000 KALM',\r\n      raiseAmount: '$750,000',\r\n      cakeToBurn: '$375,000',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '875,000 KALM',\r\n      raiseAmount: '$2,500,000',\r\n      cakeToBurn: '$1,250,000',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.kalm,\r\n    releaseBlockNumber: 7707736,\r\n    campaignId: '511110000',\r\n    articleUrl: 'https://pancakeswap.medium.com/kalmar-kalm-ifo-to-be-hosted-on-pancakeswap-4540059753e4',\r\n    tokenOfferingPrice: 2.0,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'hotcross',\r\n    address: '0xb664cdbe385656F8c54031c0CB12Cea55b584b63',\r\n    isActive: false,\r\n    name: 'Hot Cross (HOTCROSS)',\r\n    poolBasic: {\r\n      saleAmount: '15,000,000 HOTCROSS',\r\n      raiseAmount: '$750,000',\r\n      cakeToBurn: '$375,000',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '35,000,000 HOTCROSS',\r\n      raiseAmount: '$1,750,000',\r\n      cakeToBurn: '$875,000',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.hotcross,\r\n    releaseBlockNumber: 7477900,\r\n    campaignId: '511100000',\r\n    articleUrl: 'https://pancakeswap.medium.com/hot-cross-hotcross-ifo-to-be-hosted-on-pancakeswap-10e70f1f6841',\r\n    tokenOfferingPrice: 0.05,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'horizon',\r\n    address: '0x6137B571f7F1E44839ae10310a08be86D1A4D03B',\r\n    isActive: false,\r\n    name: 'Horizon Protocol (HZN)',\r\n    poolBasic: {\r\n      saleAmount: '3,000,000 HZN',\r\n      raiseAmount: '$750,000',\r\n      cakeToBurn: '$375,000',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '7,000,000 HZN',\r\n      raiseAmount: '$1,750,000',\r\n      cakeToBurn: '$875,000',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.hzn,\r\n    releaseBlockNumber: 6581111,\r\n    campaignId: '511090000',\r\n    articleUrl: 'https://pancakeswap.medium.com/horizon-protocol-hzn-ifo-to-be-hosted-on-pancakeswap-51f79601c9d8',\r\n    tokenOfferingPrice: 0.25,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'belt',\r\n    address: '0xc9FBedC033a1c479a6AD451ffE463025E92a1d38',\r\n    isActive: false,\r\n    name: 'Belt (BELT)',\r\n    poolUnlimited: {\r\n      saleAmount: '150,000 BELT',\r\n      raiseAmount: '$3,000,000',\r\n      cakeToBurn: '$1,500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.belt,\r\n    releaseBlockNumber: 5493919,\r\n    campaignId: '511080000',\r\n    articleUrl: 'https://pancakeswap.medium.com/belt-fi-belt-ifo-to-be-hosted-on-pancakeswap-353585117e32',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'watch',\r\n    address: '0x55344b55C71Ad8834C397E6e08dF5195cF84fe6d',\r\n    isActive: false,\r\n    name: 'Yieldwatch (WATCH)',\r\n    poolUnlimited: {\r\n      saleAmount: '8,000,000 WATCH',\r\n      raiseAmount: '$800,000',\r\n      cakeToBurn: '$400,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.watch,\r\n    releaseBlockNumber: 5294924,\r\n    campaignId: '511070000',\r\n    articleUrl: 'https://pancakeswap.medium.com/yieldwatch-watch-ifo-to-be-hosted-on-pancakeswap-d24301f17241',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'berry',\r\n    address: '0x5d028cE3435B2bB9AceBfaC599EEbA1ccD63d7dd',\r\n    isActive: false,\r\n    name: 'Berry (BRY)',\r\n    poolUnlimited: {\r\n      saleAmount: '2,000,000 BRY',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.bry,\r\n    releaseBlockNumber: 4750968,\r\n    campaignId: '511060000',\r\n    articleUrl: 'https://pancakeswap.medium.com/berry-bry-ifo-to-be-hosted-on-pancakeswap-b4f9095e9cdb',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'soteria',\r\n    address: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\r\n    isActive: false,\r\n    name: 'Soteria (wSOTE)',\r\n    poolUnlimited: {\r\n      saleAmount: '1,500,000 wSOTE',\r\n      raiseAmount: '$525,000',\r\n      cakeToBurn: '$262,500',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.wsote,\r\n    releaseBlockNumber: 4086064,\r\n    campaignId: '511050000',\r\n    articleUrl: 'https://pancakeswap.medium.com/soteria-sota-ifo-to-be-hosted-on-pancakeswap-64b727c272ae',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'helmet',\r\n    address: '0xa32509d760ee47Eb2Be96D338b5d69B5FBa4eFEB',\r\n    isActive: false,\r\n    name: 'Helmet.insure (Helmet)',\r\n    poolUnlimited: {\r\n      saleAmount: '10,000,000 Helmet',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.helmet,\r\n    releaseBlockNumber: 3771926,\r\n    campaignId: '511040000',\r\n    articleUrl: 'https://pancakeswap.medium.com/1-000-000-helmet-helmet-ifo-to-be-hosted-on-pancakeswap-3379a2a89a67',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'tenet',\r\n    address: '0xB922aA19A2603A07C6C9ED6c236618C9bac51f06',\r\n    isActive: false,\r\n    name: 'Tenet (TEN)',\r\n    poolUnlimited: {\r\n      saleAmount: '1,000,000 TEN',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.ten,\r\n    releaseBlockNumber: 3483883,\r\n    campaignId: '511030000',\r\n    articleUrl: 'https://pancakeswap.medium.com/tenet-ten-ifo-to-be-hosted-on-pancakeswap-b7e1eb4cb272',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'ditto',\r\n    address: '0x570c9eB19553526Fb35895a531928E19C7D20788',\r\n    isActive: false,\r\n    name: 'Ditto (DITTO)',\r\n    poolUnlimited: {\r\n      saleAmount: '700,000 DITTO',\r\n      raiseAmount: '$630,000',\r\n      cakeToBurn: '$315,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.ditto,\r\n    releaseBlockNumber: 3279767,\r\n    campaignId: '511020000',\r\n    articleUrl: 'https://pancakeswap.medium.com/ditto-money-ditto-ifo-to-be-hosted-on-pancakeswap-342da3059a66',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'blink',\r\n    address: '0x44a9Cc8463EC00937242b660BF65B10365d99baD',\r\n    isActive: false,\r\n    name: 'BLINk (BLK)',\r\n    poolUnlimited: {\r\n      saleAmount: '100,000,000 BLINK',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.blink,\r\n    releaseBlockNumber: 3279767,\r\n    campaignId: '511010000',\r\n    articleUrl: 'https://medium.com/pancakeswap/1-000-000-ifo-blink-joins-pancakeswap-15841800bdd8',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n]\r\n\r\nexport default ifos\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import sample from 'lodash/sample'\r\n\r\nif (\r\n  process.env.NODE_ENV !== 'production' &&\r\n  (!process.env.REACT_APP_NODE_1 || !process.env.REACT_APP_NODE_2 || !process.env.REACT_APP_NODE_3)\r\n) {\r\n  throw Error('One base RPC URL is undefined')\r\n}\r\n\r\n// Array of available nodes to connect to\r\nexport const nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  // @ts-ignore\r\n  return window.SO_LotteryConfig.rpc\r\n}\r\n\r\nexport default getNodeUrl\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { BlockState } from '../types'\r\n\r\nconst initialState: BlockState = { currentBlock: 0, initialBlock: 0 }\r\n\r\nexport const blockSlice = createSlice({\r\n  name: 'Block',\r\n  initialState,\r\n  reducers: {\r\n    setBlock: (state, action: PayloadAction<number>) => {\r\n      if (state.initialBlock === 0) {\r\n        state.initialBlock = action.payload\r\n      }\r\n\r\n      state.currentBlock = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setBlock } = blockSlice.actions\r\n\r\nexport default blockSlice.reducer\r\n","import { request, gql } from 'graphql-request'\r\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints'\r\nimport { LotteryTicket } from 'config/constants/types'\r\nimport { LotteryUserGraphEntity, LotteryResponse, UserRound } from 'state/types'\r\nimport { getRoundIdsArray, fetchMultipleLotteries, hasRoundBeenClaimed } from './helpers'\r\nimport { fetchUserTicketsForMultipleRounds } from './getUserTicketsData'\r\n\r\nexport const MAX_USER_LOTTERIES_REQUEST_SIZE = 100\r\n\r\n/* eslint-disable camelcase */\r\ntype UserLotteriesWhere = { lottery_in?: string[] }\r\n\r\nconst applyNodeDataToUserGraphResponse = (\r\n  userNodeData: { roundId: string; userTickets: LotteryTicket[] }[],\r\n  userGraphData: UserRound[],\r\n  lotteryNodeData: LotteryResponse[],\r\n): UserRound[] => {\r\n  //   If no graph rounds response - return node data\r\n  if (userGraphData.length === 0) {\r\n    return lotteryNodeData.map((nodeRound) => {\r\n      const ticketDataForRound = userNodeData.find((roundTickets) => roundTickets.roundId === nodeRound.lotteryId)\r\n      return {\r\n        endTime: nodeRound.endTime,\r\n        status: nodeRound.status,\r\n        lotteryId: nodeRound.lotteryId.toString(),\r\n        claimed: hasRoundBeenClaimed(ticketDataForRound.userTickets),\r\n        totalTickets: `${ticketDataForRound.userTickets.length.toString()}`,\r\n        tickets: ticketDataForRound.userTickets,\r\n      }\r\n    })\r\n  }\r\n\r\n  // Return the rounds with combined node + subgraph data, plus all remaining subgraph rounds.\r\n  const nodeRoundsWithGraphData = userNodeData.map((userNodeRound) => {\r\n    const userGraphRound = userGraphData.find(\r\n      (graphResponseRound) => graphResponseRound.lotteryId === userNodeRound.roundId,\r\n    )\r\n    const nodeRoundData = lotteryNodeData.find((nodeRound) => nodeRound.lotteryId === userNodeRound.roundId)\r\n    return {\r\n      endTime: nodeRoundData.endTime,\r\n      status: nodeRoundData.status,\r\n      lotteryId: nodeRoundData.lotteryId.toString(),\r\n      claimed: hasRoundBeenClaimed(userNodeRound.userTickets),\r\n      totalTickets: userGraphRound?.totalTickets || userNodeRound.userTickets.length.toString(),\r\n      tickets: userNodeRound.userTickets,\r\n    }\r\n  })\r\n\r\n  // Return the rounds with combined data, plus all remaining subgraph rounds.\r\n  const [lastCombinedDataRound] = nodeRoundsWithGraphData.slice(-1)\r\n  const lastCombinedDataRoundIndex = userGraphData\r\n    .map((graphRound) => graphRound?.lotteryId)\r\n    .indexOf(lastCombinedDataRound?.lotteryId)\r\n  const remainingSubgraphRounds = userGraphData ? userGraphData.splice(lastCombinedDataRoundIndex + 1) : []\r\n  const mergedResponse = [...nodeRoundsWithGraphData, ...remainingSubgraphRounds]\r\n  return mergedResponse\r\n}\r\n\r\nexport const getGraphLotteryUser = async (\r\n  account: string,\r\n  first = MAX_USER_LOTTERIES_REQUEST_SIZE,\r\n  skip = 0,\r\n  where: UserLotteriesWhere = {},\r\n): Promise<LotteryUserGraphEntity> => {\r\n  let user\r\n  const blankUser = {\r\n    account,\r\n    totalCake: '',\r\n    totalTickets: '',\r\n    rounds: [],\r\n  }\r\n\r\n  try {\r\n    const response = await request(\r\n      GRAPH_API_LOTTERY,\r\n      gql`\r\n        query getUserLotteries($account: ID!, $first: Int!, $skip: Int!, $where: Round_filter) {\r\n          user(id: $account) {\r\n            id\r\n            totalTickets\r\n            totalCake\r\n            rounds(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {\r\n              id\r\n              lottery {\r\n                id\r\n                endTime\r\n                status\r\n              }\r\n              claimed\r\n              totalTickets\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { account: account.toLowerCase(), first, skip, where },\r\n    )\r\n    const userRes = response.user\r\n\r\n    // If no user returned - return blank user\r\n    if (!userRes) {\r\n      user = blankUser\r\n    } else {\r\n      user = {\r\n        account: userRes.id,\r\n        totalCake: userRes.totalCake,\r\n        totalTickets: userRes.totalTickets,\r\n        rounds: userRes.rounds.map((round) => {\r\n          return {\r\n            lotteryId: round?.lottery?.id,\r\n            endTime: round?.lottery?.endTime,\r\n            claimed: round?.claimed,\r\n            totalTickets: round?.totalTickets,\r\n            status: round?.lottery?.status.toLowerCase(),\r\n          }\r\n        }),\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(error)\r\n    user = blankUser\r\n  }\r\n\r\n  return user\r\n}\r\n\r\nconst getUserLotteryData = async (account: string, currentLotteryId: string): Promise<LotteryUserGraphEntity> => {\r\n  const idsForTicketsNodeCall = getRoundIdsArray(currentLotteryId)\r\n  const roundDataAndUserTickets = await fetchUserTicketsForMultipleRounds(idsForTicketsNodeCall, account)\r\n  const userRoundsNodeData = roundDataAndUserTickets.filter((round) => round.userTickets.length > 0)\r\n  const idsForLotteriesNodeCall = userRoundsNodeData.map((round) => round.roundId)\r\n  const lotteriesNodeData = await fetchMultipleLotteries(idsForLotteriesNodeCall)\r\n  const graphResponse = await getGraphLotteryUser(account)\r\n  const mergedRoundData = applyNodeDataToUserGraphResponse(userRoundsNodeData, graphResponse.rounds, lotteriesNodeData)\r\n  const graphResponseWithNodeRounds = { ...graphResponse, rounds: mergedRoundData }\r\n  return graphResponseWithNodeRounds\r\n}\r\n\r\nexport default getUserLotteryData\r\n","import React, { useState, useEffect, useRef } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// Check if the tab is active in the user browser\r\nconst useIsBrowserTabActive = () => {\r\n  const isBrowserTabActiveRef = useRef(true)\r\n\r\n  useEffect(() => {\r\n    const onVisibilityChange = () => {\r\n      isBrowserTabActiveRef.current = !document.hidden\r\n    }\r\n\r\n    window.addEventListener('visibilitychange', onVisibilityChange)\r\n\r\n    return () => {\r\n      window.removeEventListener('visibilitychange', onVisibilityChange)\r\n    }\r\n  }, [])\r\n\r\n  return isBrowserTabActiveRef\r\n}\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n  const isBrowserTabActiveRef = useIsBrowserTabActive()\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      if (isBrowserTabActiveRef.current) {\r\n        setFast((prev) => prev + 1)\r\n      }\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [isBrowserTabActiveRef])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      if (isBrowserTabActiveRef.current) {\r\n        setSlow((prev) => prev + 1)\r\n      }\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [isBrowserTabActiveRef])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","import { Campaign } from './types'\r\n\r\n/**\r\n * id: The campaign id (required)\r\n * type: The type of the achievement\r\n * title: A string or an object to be translated.\r\n * Note: If the value is a string it is likely used as data in a translation object\r\n *\r\n * badge: Achievement avatar\r\n */\r\n\r\nconst campaigns: Campaign[] = [\r\n  {\r\n    id: '511110000',\r\n    type: 'ifo',\r\n    title: 'Kalmar',\r\n    badge: 'ifo-kalm.svg',\r\n  },\r\n  {\r\n    id: '511100000',\r\n    type: 'ifo',\r\n    title: 'Hotcross',\r\n    badge: 'ifo-hotcross.svg',\r\n  },\r\n  {\r\n    id: '511090000',\r\n    type: 'ifo',\r\n    title: 'Horizon Protocol',\r\n    badge: 'ifo-hzn.svg',\r\n  },\r\n  {\r\n    id: '511080000',\r\n    type: 'ifo',\r\n    title: 'Belt',\r\n    badge: 'ifo-belt.svg',\r\n  },\r\n  {\r\n    id: '511070000',\r\n    type: 'ifo',\r\n    title: 'Yieldwatch',\r\n    badge: 'ifo-watch.svg',\r\n  },\r\n  {\r\n    id: '511060000',\r\n    type: 'ifo',\r\n    title: 'Berry',\r\n    badge: 'ifo-bry.svg',\r\n  },\r\n  {\r\n    id: '511050000',\r\n    type: 'ifo',\r\n    title: 'Soteria',\r\n    badge: 'ifo-wsote.svg',\r\n  },\r\n  {\r\n    id: '511040000',\r\n    type: 'ifo',\r\n    title: 'Helmet',\r\n    badge: 'ifo-helmet.svg',\r\n  },\r\n  {\r\n    id: '511030000',\r\n    type: 'ifo',\r\n    title: 'Tenet',\r\n    badge: 'ifo-ten.svg',\r\n  },\r\n  {\r\n    id: '511020000',\r\n    type: 'ifo',\r\n    title: 'Ditto',\r\n    badge: 'ifo-ditto.svg',\r\n  },\r\n  {\r\n    id: '511010000',\r\n    type: 'ifo',\r\n    title: 'Blink',\r\n    badge: 'ifo-blk.svg',\r\n  },\r\n  {\r\n    id: '512010001',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Gold',\r\n    badge: 'easter-champion-gold.svg',\r\n  },\r\n  {\r\n    id: '512010002',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010003',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010004',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010005',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Gold',\r\n    badge: 'easter-participant-gold.svg',\r\n  },\r\n  {\r\n    id: '512010006',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Silver',\r\n    badge: 'easter-champion-silver.svg',\r\n  },\r\n  {\r\n    id: '512010007',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010008',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010009',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010010',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Silver',\r\n    badge: 'easter-participant-silver.svg',\r\n  },\r\n  {\r\n    id: '512010011',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Bronze',\r\n    badge: 'easter-champion-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010012',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010013',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010014',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010015',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Bronze',\r\n    badge: 'easter-participant-bronze.svg',\r\n  },\r\n  {\r\n    id: '513010001',\r\n    type: 'participation',\r\n    title: 'Syrup Soaker',\r\n    description: 'Took a dip in the early days of the Auto CAKE Pool',\r\n    badge: 'syrup-soaker.svg',\r\n  },\r\n  {\r\n    id: '514010001',\r\n    type: 'participation',\r\n    title: 'Clairvoyant',\r\n    description: 'Played a round of Prediction before round 12,120',\r\n    badge: 'clairvoyant.svg',\r\n  },\r\n  {\r\n    id: '515010001',\r\n    type: 'participation',\r\n    title: 'Lottie',\r\n    description: 'Joined a round in the early days of Lottery V2',\r\n    badge: 'lottie.svg',\r\n  },\r\n  {\r\n    id: '515020001',\r\n    type: 'participation',\r\n    title: 'Lucky',\r\n    description: 'Won a round in the early days of Lottery V2',\r\n    badge: 'lucky.svg',\r\n  },\r\n  {\r\n    id: '515030001',\r\n    type: 'participation',\r\n    title: 'Baller',\r\n    description: 'Top 100 ticket buyer in the early days of Lottery V2',\r\n    badge: 'baller.svg',\r\n  },\r\n  {\r\n    id: '516010001',\r\n    type: 'participation',\r\n    title: '1 Year',\r\n    description: 'Joined PancakeSwap during the first year of our journey!',\r\n    badge: '1-year.svg',\r\n  },\r\n  {\r\n    id: '511120000',\r\n    type: 'ifo',\r\n    title: 'Duelist King',\r\n    badge: 'ifo-dkt.svg',\r\n  },\r\n  {\r\n    id: '511130000',\r\n    type: 'ifo',\r\n    title: 'Mines of Dalarnia',\r\n    badge: 'ifo-dar.svg',\r\n  },\r\n  {\r\n    id: '511140000',\r\n    type: 'ifo',\r\n    title: 'FC Porto Fan Token',\r\n    badge: 'ifo-porto.svg',\r\n  },\r\n]\r\n\r\n/**\r\n * Transform the campaign config into a map. Keeps the config the same\r\n * as the others and allows easy access to a campaign by id\r\n */\r\nexport const campaignMap = new Map<string, Campaign>()\r\n\r\ncampaigns.forEach((campaign) => {\r\n  campaignMap.set(campaign.id, campaign)\r\n})\r\n\r\nexport default campaigns\r\n","import { ethers } from 'ethers'\r\nimport { Campaign, TranslatableText } from 'config/constants/types'\r\nimport ifosList from 'config/constants/ifo'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { Achievement } from 'state/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\r\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json'\r\n\r\ninterface IfoMapResponse {\r\n  thresholdToClaim: string\r\n  campaignId: string\r\n  numberPoints: ethers.BigNumber\r\n}\r\n\r\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        key: 'IFO Shopper: %title%',\r\n        data: {\r\n          title: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.title\r\n  }\r\n}\r\n\r\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        key: 'Committed more than $5 worth of LP in the %title% IFO',\r\n        data: {\r\n          title: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.description\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if a wallet is eligible to claim points from valid IFO's\r\n */\r\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\r\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\r\n\r\n  // Returns the claim status of every IFO with a campaign ID\r\n  const claimStatusCalls = ifoCampaigns.map(({ address }) => {\r\n    return {\r\n      address: getPointCenterIfoAddress(),\r\n      name: 'checkClaimStatus',\r\n      params: [account, address],\r\n    }\r\n  })\r\n\r\n  const claimStatuses = (await multicallv2(pointCenterIfoABI, claimStatusCalls, { requireSuccess: false })) as\r\n    | [boolean][]\r\n    | null\r\n\r\n  // Get IFO data for all IFO's that are eligible to claim\r\n  const claimableIfoData = (await multicallv2(\r\n    pointCenterIfoABI,\r\n    claimStatuses.reduce((accum, claimStatusArr, index) => {\r\n      if (claimStatusArr === null) {\r\n        return accum\r\n      }\r\n\r\n      const [claimStatus] = claimStatusArr\r\n\r\n      if (claimStatus === true) {\r\n        return [...accum, { address: getPointCenterIfoAddress(), name: 'ifos', params: [ifoCampaigns[index].address] }]\r\n      }\r\n\r\n      return accum\r\n    }, []),\r\n  )) as IfoMapResponse[]\r\n\r\n  // Transform response to an Achievement\r\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\r\n    const claimableCampaignId = claimableIfoDataItem.campaignId.toString()\r\n    if (!campaignMap.has(claimableCampaignId)) {\r\n      return accum\r\n    }\r\n\r\n    const campaignMeta = campaignMap.get(claimableCampaignId)\r\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableCampaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        address,\r\n        id: claimableCampaignId,\r\n        type: 'ifo',\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: claimableIfoDataItem.numberPoints.toNumber(),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n","import { request, gql } from 'graphql-request'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\r\nimport { Achievement } from 'state/types'\r\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\r\n\r\ninterface UserPointIncreaseEvent {\r\n  campaignId: string\r\n  id: string // wallet address\r\n  points: string\r\n}\r\n\r\n/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */\r\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\r\n  try {\r\n    const { user } = await request(\r\n      GRAPH_API_PROFILE,\r\n      gql`\r\n        query getUserPointIncreaseEvents($account: ID!) {\r\n          user(id: $account) {\r\n            points {\r\n              id\r\n              campaignId\r\n              points\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      {\r\n        account: account.toLowerCase(),\r\n      },\r\n    )\r\n\r\n    return user.points\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets all user point increase events and adds achievement meta\r\n */\r\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\r\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\r\n\r\n  if (!pointIncreaseEvents) {\r\n    return []\r\n  }\r\n\r\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\r\n    if (!campaignMap.has(userPoint.campaignId)) {\r\n      return accum\r\n    }\r\n\r\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        id: userPoint.campaignId,\r\n        type: campaignMeta.type,\r\n        address: userPoint.id,\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: Number(userPoint.points),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n","import { ThunkAction } from 'redux-thunk'\r\nimport { AnyAction } from '@reduxjs/toolkit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport {\r\n  CampaignType,\r\n  SerializedFarmConfig,\r\n  LotteryStatus,\r\n  LotteryTicket,\r\n  DeserializedPoolConfig,\r\n  SerializedPoolConfig,\r\n  Team,\r\n  TranslatableText,\r\n  DeserializedFarmConfig,\r\n} from 'config/constants/types'\r\nimport { NftToken, State as NftMarketState } from './nftMarket/types'\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, State, unknown, AnyAction>\r\n\r\nexport interface BigNumberToJson {\r\n  type: 'BigNumber'\r\n  hex: string\r\n}\r\n\r\nexport type SerializedBigNumber = string\r\n\r\ninterface SerializedFarmUserData {\r\n  allowance: string\r\n  tokenBalance: string\r\n  stakedBalance: string\r\n  earnings: string\r\n}\r\n\r\nexport interface DeserializedFarmUserData {\r\n  allowance: BigNumber\r\n  tokenBalance: BigNumber\r\n  stakedBalance: BigNumber\r\n  earnings: BigNumber\r\n}\r\n\r\nexport interface SerializedFarm extends SerializedFarmConfig {\r\n  tokenPriceBusd?: string\r\n  quoteTokenPriceBusd?: string\r\n  tokenAmountTotal?: SerializedBigNumber\r\n  lpTotalInQuoteToken?: SerializedBigNumber\r\n  lpTotalSupply?: SerializedBigNumber\r\n  tokenPriceVsQuote?: SerializedBigNumber\r\n  poolWeight?: SerializedBigNumber\r\n  userData?: SerializedFarmUserData\r\n}\r\n\r\nexport interface DeserializedFarm extends DeserializedFarmConfig {\r\n  tokenPriceBusd?: string\r\n  quoteTokenPriceBusd?: string\r\n  tokenAmountTotal?: BigNumber\r\n  lpTotalInQuoteToken?: BigNumber\r\n  lpTotalSupply?: BigNumber\r\n  tokenPriceVsQuote?: BigNumber\r\n  poolWeight?: BigNumber\r\n  userData?: DeserializedFarmUserData\r\n}\r\n\r\ninterface CorePoolProps {\r\n  startBlock?: number\r\n  endBlock?: number\r\n  apr?: number\r\n  stakingTokenPrice?: number\r\n  earningTokenPrice?: number\r\n  isAutoVault?: boolean\r\n}\r\n\r\nexport interface DeserializedPool extends DeserializedPoolConfig, CorePoolProps {\r\n  totalStaked?: BigNumber\r\n  stakingLimit?: BigNumber\r\n  userData?: {\r\n    allowance: BigNumber\r\n    stakingTokenBalance: BigNumber\r\n    stakedBalance: BigNumber\r\n    pendingReward: BigNumber\r\n  }\r\n}\r\n\r\nexport interface SerializedPool extends SerializedPoolConfig, CorePoolProps {\r\n  totalStaked?: SerializedBigNumber\r\n  stakingLimit?: SerializedBigNumber\r\n  userData?: {\r\n    allowance: SerializedBigNumber\r\n    stakingTokenBalance: SerializedBigNumber\r\n    stakedBalance: SerializedBigNumber\r\n    pendingReward: SerializedBigNumber\r\n  }\r\n}\r\n\r\nexport interface Profile {\r\n  userId: number\r\n  points: number\r\n  teamId: number\r\n  collectionAddress: string\r\n  tokenId: number\r\n  isActive: boolean\r\n  username: string\r\n  nft?: NftToken\r\n  team: Team\r\n  hasRegistered: boolean\r\n}\r\n\r\n// Slices states\r\n\r\nexport interface SerializedFarmsState {\r\n  data: SerializedFarm[]\r\n  loadArchivedFarmsData: boolean\r\n  userDataLoaded: boolean\r\n}\r\n\r\nexport interface DeserializedFarmsState {\r\n  data: DeserializedFarm[]\r\n  loadArchivedFarmsData: boolean\r\n  userDataLoaded: boolean\r\n}\r\n\r\nexport interface VaultFees {\r\n  performanceFee: number\r\n  callFee: number\r\n  withdrawalFee: number\r\n  withdrawalFeePeriod: number\r\n}\r\n\r\nexport interface VaultUser {\r\n  isLoading: boolean\r\n  userShares: string\r\n  cakeAtLastUserAction: string\r\n  lastDepositedTime: string\r\n  lastUserActionTime: string\r\n}\r\nexport interface CakeVault {\r\n  totalShares?: string\r\n  pricePerFullShare?: string\r\n  totalCakeInVault?: string\r\n  estimatedCakeBountyReward?: string\r\n  totalPendingCakeHarvest?: string\r\n  fees?: VaultFees\r\n  userData?: VaultUser\r\n}\r\n\r\nexport interface PoolsState {\r\n  data: SerializedPool[]\r\n  cakeVault: CakeVault\r\n  userDataLoaded: boolean\r\n}\r\n\r\nexport enum ProfileAvatarFetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  FETCHING = 'fetching',\r\n  FETCHED = 'fetched',\r\n}\r\n\r\nexport interface ProfileState {\r\n  isInitialized: boolean\r\n  isLoading: boolean\r\n  hasRegistered: boolean\r\n  data: Profile\r\n  profileAvatars: {\r\n    [key: string]: {\r\n      username: string\r\n      nft: NftToken\r\n      hasRegistered: boolean\r\n      usernameFetchStatus: ProfileAvatarFetchStatus\r\n      avatarFetchStatus: ProfileAvatarFetchStatus\r\n    }\r\n  }\r\n}\r\n\r\nexport type TeamResponse = {\r\n  0: string\r\n  1: string\r\n  2: string\r\n  3: string\r\n  4: boolean\r\n}\r\n\r\nexport type TeamsById = {\r\n  [key: string]: Team\r\n}\r\n\r\nexport interface TeamsState {\r\n  isInitialized: boolean\r\n  isLoading: boolean\r\n  data: TeamsById\r\n}\r\n\r\nexport interface Achievement {\r\n  id: string\r\n  type: CampaignType\r\n  address: string\r\n  title: TranslatableText\r\n  description?: TranslatableText\r\n  badge: string\r\n  points: number\r\n}\r\n\r\nexport enum AchievementFetchStatus {\r\n  ERROR = 'error',\r\n  NOT_FETCHED = 'not-fetched',\r\n  FETCHING = 'fetching',\r\n  FETCHED = 'fetched',\r\n}\r\n\r\nexport interface AchievementState {\r\n  achievements: Achievement[]\r\n  achievementFetchStatus: AchievementFetchStatus\r\n}\r\n\r\n// Block\r\n\r\nexport interface BlockState {\r\n  currentBlock: number\r\n  initialBlock: number\r\n}\r\n\r\n// Predictions\r\n\r\nexport enum BetPosition {\r\n  BULL = 'Bull',\r\n  BEAR = 'Bear',\r\n  HOUSE = 'House',\r\n}\r\n\r\nexport enum PredictionStatus {\r\n  INITIAL = 'initial',\r\n  LIVE = 'live',\r\n  PAUSED = 'paused',\r\n  ERROR = 'error',\r\n}\r\n\r\nexport interface Round {\r\n  id: string\r\n  epoch: number\r\n  position: BetPosition\r\n  failed: boolean\r\n  startAt: number\r\n  startBlock: number\r\n  startHash: string\r\n  lockAt: number\r\n  lockBlock: number\r\n  lockHash: string\r\n  lockPrice: number\r\n  lockRoundId: string\r\n  closeAt: number\r\n  closeBlock: number\r\n  closeHash: string\r\n  closePrice: number\r\n  closeRoundId: string\r\n  totalBets: number\r\n  totalAmount: number\r\n  bullBets: number\r\n  bullAmount: number\r\n  bearBets: number\r\n  bearAmount: number\r\n  bets?: Bet[]\r\n}\r\n\r\nexport interface Market {\r\n  paused: boolean\r\n  epoch: number\r\n}\r\n\r\nexport interface Bet {\r\n  id?: string\r\n  hash?: string\r\n  amount: number\r\n  position: BetPosition\r\n  claimed: boolean\r\n  claimedAt: number\r\n  claimedBlock: number\r\n  claimedHash: string\r\n  claimedBNB: number\r\n  claimedNetBNB: number\r\n  createdAt: number\r\n  updatedAt: number\r\n  user?: PredictionUser\r\n  round?: Round\r\n}\r\n\r\nexport interface PredictionUser {\r\n  id: string\r\n  createdAt: number\r\n  updatedAt: number\r\n  block: number\r\n  totalBets: number\r\n  totalBetsBull: number\r\n  totalBetsBear: number\r\n  totalBNB: number\r\n  totalBNBBull: number\r\n  totalBNBBear: number\r\n  totalBetsClaimed: number\r\n  totalBNBClaimed: number\r\n  winRate: number\r\n  averageBNB: number\r\n  netBNB: number\r\n  bets?: Bet[]\r\n}\r\n\r\nexport enum HistoryFilter {\r\n  ALL = 'all',\r\n  COLLECTED = 'collected',\r\n  UNCOLLECTED = 'uncollected',\r\n}\r\n\r\nexport interface LedgerData {\r\n  [key: string]: {\r\n    [key: string]: ReduxNodeLedger\r\n  }\r\n}\r\n\r\nexport interface RoundData {\r\n  [key: string]: ReduxNodeRound\r\n}\r\n\r\nexport interface ReduxNodeLedger {\r\n  position: BetPosition\r\n  amount: BigNumberToJson\r\n  claimed: boolean\r\n}\r\n\r\nexport interface NodeLedger {\r\n  position: BetPosition\r\n  amount: ethers.BigNumber\r\n  claimed: boolean\r\n}\r\n\r\nexport interface ReduxNodeRound {\r\n  epoch: number\r\n  startTimestamp: number | null\r\n  lockTimestamp: number | null\r\n  closeTimestamp: number | null\r\n  lockPrice: BigNumberToJson | null\r\n  closePrice: BigNumberToJson | null\r\n  totalAmount: BigNumberToJson\r\n  bullAmount: BigNumberToJson\r\n  bearAmount: BigNumberToJson\r\n  rewardBaseCalAmount: BigNumberToJson\r\n  rewardAmount: BigNumberToJson\r\n  oracleCalled: boolean\r\n  lockOracleId: string\r\n  closeOracleId: string\r\n}\r\n\r\nexport interface NodeRound {\r\n  epoch: number\r\n  startTimestamp: number | null\r\n  lockTimestamp: number | null\r\n  closeTimestamp: number | null\r\n  lockPrice: ethers.BigNumber | null\r\n  closePrice: ethers.BigNumber | null\r\n  totalAmount: ethers.BigNumber\r\n  bullAmount: ethers.BigNumber\r\n  bearAmount: ethers.BigNumber\r\n  rewardBaseCalAmount: ethers.BigNumber\r\n  rewardAmount: ethers.BigNumber\r\n  oracleCalled: boolean\r\n  closeOracleId: string\r\n  lockOracleId: string\r\n}\r\n\r\nexport enum LeaderboardLoadingState {\r\n  INITIAL,\r\n  LOADING,\r\n  IDLE,\r\n}\r\n\r\nexport type LeaderboardFilterTimePeriod = '1d' | '7d' | '1m' | 'all'\r\n\r\nexport interface LeaderboardFilter {\r\n  address?: string\r\n  orderBy?: string\r\n  timePeriod?: LeaderboardFilterTimePeriod\r\n}\r\n\r\nexport interface PredictionsState {\r\n  status: PredictionStatus\r\n  isLoading: boolean\r\n  isHistoryPaneOpen: boolean\r\n  isChartPaneOpen: boolean\r\n  isFetchingHistory: boolean\r\n  historyFilter: HistoryFilter\r\n  currentEpoch: number\r\n  intervalSeconds: number\r\n  minBetAmount: string\r\n  bufferSeconds: number\r\n  lastOraclePrice: string\r\n  history: Bet[]\r\n  totalHistory: number\r\n  currentHistoryPage: number\r\n  hasHistoryLoaded: boolean\r\n  rounds?: RoundData\r\n  ledgers?: LedgerData\r\n  claimableStatuses: {\r\n    [key: string]: boolean\r\n  }\r\n  leaderboard: {\r\n    selectedAddress: string\r\n    loadingState: LeaderboardLoadingState\r\n    filters: LeaderboardFilter\r\n    skip: number\r\n    hasMoreResults: boolean\r\n    addressResults: {\r\n      [key: string]: PredictionUser\r\n    }\r\n    results: PredictionUser[]\r\n  }\r\n}\r\n\r\n// Voting\r\n\r\n/* eslint-disable camelcase */\r\n/**\r\n * @see https://hub.snapshot.page/graphql\r\n */\r\nexport interface VoteWhere {\r\n  id?: string\r\n  id_in?: string[]\r\n  voter?: string\r\n  voter_in?: string[]\r\n  proposal?: string\r\n  proposal_in?: string[]\r\n}\r\n\r\nexport enum SnapshotCommand {\r\n  PROPOSAL = 'proposal',\r\n  VOTE = 'vote',\r\n}\r\n\r\nexport enum ProposalType {\r\n  ALL = 'all',\r\n  CORE = 'core',\r\n  COMMUNITY = 'community',\r\n}\r\n\r\nexport enum ProposalState {\r\n  ACTIVE = 'active',\r\n  PENDING = 'pending',\r\n  CLOSED = 'closed',\r\n}\r\n\r\nexport interface Space {\r\n  id: string\r\n  name: string\r\n}\r\n\r\nexport interface Proposal {\r\n  author: string\r\n  body: string\r\n  choices: string[]\r\n  end: number\r\n  id: string\r\n  snapshot: string\r\n  space: Space\r\n  start: number\r\n  state: ProposalState\r\n  title: string\r\n}\r\n\r\nexport interface Vote {\r\n  id: string\r\n  voter: string\r\n  created: number\r\n  space: Space\r\n  proposal: {\r\n    choices: Proposal['choices']\r\n  }\r\n  choice: number\r\n  metadata?: {\r\n    votingPower: string\r\n    verificationHash: string\r\n  }\r\n  _inValid?: boolean\r\n}\r\n\r\nexport enum VotingStateLoadingStatus {\r\n  INITIAL = 'initial',\r\n  IDLE = 'idle',\r\n  LOADING = 'loading',\r\n  ERROR = 'error',\r\n}\r\n\r\nexport interface VotingState {\r\n  proposalLoadingStatus: VotingStateLoadingStatus\r\n  proposals: {\r\n    [key: string]: Proposal\r\n  }\r\n  voteLoadingStatus: VotingStateLoadingStatus\r\n  votes: {\r\n    [key: string]: Vote[]\r\n  }\r\n}\r\n\r\nexport interface LotteryRoundUserTickets {\r\n  isLoading?: boolean\r\n  tickets?: LotteryTicket[]\r\n}\r\n\r\ninterface LotteryRoundGenerics {\r\n  isLoading?: boolean\r\n  lotteryId: string\r\n  status: LotteryStatus\r\n  startTime: string\r\n  endTime: string\r\n  treasuryFee: string\r\n  firstTicketId: string\r\n  lastTicketId: string\r\n  finalNumber: number\r\n}\r\n\r\nexport interface LotteryRound extends LotteryRoundGenerics {\r\n  userTickets?: LotteryRoundUserTickets\r\n  priceTicketInCake: BigNumber\r\n  discountDivisor: BigNumber\r\n  amountCollectedInCake: BigNumber\r\n  cakePerBracket: string[]\r\n  countWinnersPerBracket: string[]\r\n  rewardsBreakdown: string[]\r\n}\r\n\r\nexport interface LotteryResponse extends LotteryRoundGenerics {\r\n  priceTicketInCake: SerializedBigNumber\r\n  discountDivisor: SerializedBigNumber\r\n  amountCollectedInCake: SerializedBigNumber\r\n  cakePerBracket: SerializedBigNumber[]\r\n  countWinnersPerBracket: SerializedBigNumber[]\r\n  rewardsBreakdown: SerializedBigNumber[]\r\n}\r\n\r\nexport interface LotteryState {\r\n  currentLotteryId: string\r\n  maxNumberTicketsPerBuyOrClaim: string\r\n  isTransitioning: boolean\r\n  currentRound: LotteryResponse & { userTickets?: LotteryRoundUserTickets }\r\n  lotteriesData?: LotteryRoundGraphEntity[]\r\n  userLotteryData?: LotteryUserGraphEntity\r\n}\r\n\r\nexport interface LotteryRoundGraphEntity {\r\n  id: string\r\n  totalUsers: string\r\n  totalTickets: string\r\n  winningTickets: string\r\n  status: LotteryStatus\r\n  finalNumber: string\r\n  startTime: string\r\n  endTime: string\r\n  ticketPrice: SerializedBigNumber\r\n}\r\n\r\nexport interface LotteryUserGraphEntity {\r\n  account: string\r\n  totalCake: string\r\n  totalTickets: string\r\n  rounds: UserRound[]\r\n}\r\n\r\nexport interface UserRound {\r\n  claimed: boolean\r\n  lotteryId: string\r\n  status: LotteryStatus\r\n  endTime: string\r\n  totalTickets: string\r\n  tickets?: LotteryTicket[]\r\n}\r\n\r\nexport type UserTicketsResponse = [ethers.BigNumber[], number[], boolean[]]\r\n\r\n// Global state\r\n\r\nexport interface State {\r\n  achievements: AchievementState\r\n  block: BlockState\r\n  farms: SerializedFarmsState\r\n  pools: PoolsState\r\n  predictions: PredictionsState\r\n  profile: ProfileState\r\n  teams: TeamsState\r\n  voting: VotingState\r\n  lottery: LotteryState\r\n  nftMarket: NftMarketState\r\n}\r\n","import { useEffect, useRef } from 'react'\r\n\r\n/**\r\n * Returns the previous value of the given value\r\n *\r\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\r\n */\r\nconst usePreviousValue = (value: any) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  }, [value])\r\n\r\n  return ref.current\r\n}\r\n\r\nexport default usePreviousValue\r\n","import { ChainId, Token } from '@pancakeswap/sdk'\r\nimport { serializeToken } from 'state/user/hooks/helpers'\r\nimport { SerializedToken } from './types'\r\n\r\nconst { MAINNET, TESTNET } = ChainId\r\n\r\ninterface TokenList {\r\n  [symbol: string]: Token\r\n}\r\n\r\ninterface SerializedTokenList {\r\n  [symbol: string]: SerializedToken\r\n}\r\n\r\nexport const mainnetTokens = {\r\n  wbnb: new Token(\r\n    MAINNET,\r\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB',\r\n    'https://www.binance.com/',\r\n  ),\r\n  // bnb here points to the wbnb contract. Wherever the currency BNB is required, conditional checks for the symbol 'BNB' can be used\r\n  bnb: new Token(MAINNET, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'BNB', 'BNB', 'https://www.binance.com/'),\r\n  cake: new Token(\r\n    MAINNET,\r\n    '0x703f112bda4cc6cb9c5fb4b2e6140f6d8374f10b',\r\n    18,\r\n    'CAKE',\r\n    'PancakeSwap Token',\r\n    'https://pancakeswap.finance/',\r\n  ),\r\n  tlos: new Token(MAINNET, '0xb6C53431608E626AC81a9776ac3e999c5556717c', 18, 'TLOS', 'Telos', 'https://www.telos.net/'),\r\n  beta: new Token(\r\n    MAINNET,\r\n    '0xBe1a001FE942f96Eea22bA08783140B9Dcc09D28',\r\n    18,\r\n    'BETA',\r\n    'Beta Finance',\r\n    'https://betafinance.org',\r\n  ),\r\n  nft: new Token(MAINNET, '0x1fC9004eC7E5722891f5f38baE7678efCB11d34D', 6, 'NFT', 'APENFT', 'https://apenft.org'),\r\n  stephero: new Token(\r\n    MAINNET,\r\n    '0xE8176d414560cFE1Bf82Fd73B986823B89E4F545',\r\n    18,\r\n    'HERO',\r\n    'StepHero',\r\n    'https://stephero.io/',\r\n  ),\r\n  pros: new Token(MAINNET, '0xEd8c8Aa8299C10f067496BB66f8cC7Fb338A3405', 18, 'PROS', 'Prosper', 'https://prosper.so/'),\r\n  qbt: new Token(MAINNET, '0x17B7163cf1Dbd286E262ddc68b553D899B93f526', 18, 'QBT', 'Qubit Token', 'https://qbt.fi/'),\r\n  cvp: new Token(\r\n    MAINNET,\r\n    '0x5Ec3AdBDae549Dce842e24480Eb2434769e22B2E',\r\n    18,\r\n    'CVP',\r\n    'Concentrated Voting Power Token',\r\n    'https://powerpool.finance/',\r\n  ),\r\n  bscdefi: new Token(\r\n    MAINNET,\r\n    '0x40E46dE174dfB776BB89E04dF1C47d8a66855EB3',\r\n    18,\r\n    'BSCDEFI',\r\n    'BSC Defi blue chips token',\r\n    'https://powerpool.finance/',\r\n  ),\r\n  busd: new Token(\r\n    MAINNET,\r\n    '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n    18,\r\n    'BUSD',\r\n    'Binance USD',\r\n    'https://www.paxos.com/busd/',\r\n  ),\r\n  dai: new Token(\r\n    MAINNET,\r\n    '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\r\n    18,\r\n    'DAI',\r\n    'Dai Stablecoin',\r\n    'https://www.makerdao.com/',\r\n  ),\r\n  usdt: new Token(\r\n    MAINNET,\r\n    '0x55d398326f99059fF775485246999027B3197955',\r\n    18,\r\n    'USDT',\r\n    'Tether USD',\r\n    'https://tether.to/',\r\n  ),\r\n  btcb: new Token(\r\n    MAINNET,\r\n    '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',\r\n    18,\r\n    'BTCB',\r\n    'Binance BTC',\r\n    'https://bitcoin.org/',\r\n  ),\r\n  ust: new Token(\r\n    MAINNET,\r\n    '0x23396cF899Ca06c4472205fC903bDB4de249D6fC',\r\n    18,\r\n    'UST',\r\n    'Wrapped UST Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  eth: new Token(\r\n    MAINNET,\r\n    '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n    18,\r\n    'ETH',\r\n    'Binance-Peg Ethereum Token',\r\n    'https://ethereum.org/en/',\r\n  ),\r\n  usdc: new Token(\r\n    MAINNET,\r\n    '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\r\n    18,\r\n    'USDC',\r\n    'Binance-Peg USD Coin',\r\n    'https://www.centre.io/usdc',\r\n  ),\r\n  kalm: new Token(\r\n    MAINNET,\r\n    '0x4BA0057f784858a48fe351445C672FF2a3d43515',\r\n    18,\r\n    'KALM',\r\n    'Kalmar Token',\r\n    'https://kalmar.io/',\r\n  ),\r\n  dkt: new Token(\r\n    MAINNET,\r\n    '0x7Ceb519718A80Dd78a8545AD8e7f401dE4f2faA7',\r\n    18,\r\n    'DKT',\r\n    'Duelist King',\r\n    'https://duelistking.com/',\r\n  ),\r\n  hotcross: new Token(\r\n    MAINNET,\r\n    '0x4FA7163E153419E0E1064e418dd7A99314Ed27b6',\r\n    18,\r\n    'HOTCROSS',\r\n    'Hotcross Token',\r\n    'https://www.hotcross.com/',\r\n  ),\r\n  belt: new Token(\r\n    MAINNET,\r\n    '0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f',\r\n    18,\r\n    'BELT',\r\n    'Belt Token',\r\n    'https://beta.belt.fi/',\r\n  ),\r\n  watch: new Token(\r\n    MAINNET,\r\n    '0x7A9f28EB62C791422Aa23CeAE1dA9C847cBeC9b0',\r\n    18,\r\n    'WATCH',\r\n    'Yieldwatch Token',\r\n    'https://yieldwatch.net/',\r\n  ),\r\n  bry: new Token(\r\n    MAINNET,\r\n    '0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830',\r\n    18,\r\n    'BRY',\r\n    'Berry Token',\r\n    'https://berrydata.co/',\r\n  ),\r\n  wsote: new Token(\r\n    MAINNET,\r\n    '0x541E619858737031A1244A5d0Cd47E5ef480342c',\r\n    18,\r\n    'wSOTE',\r\n    'Soteria Token',\r\n    'https://soteria.finance/',\r\n  ),\r\n  helmet: new Token(\r\n    MAINNET,\r\n    '0x948d2a81086A075b3130BAc19e4c6DEe1D2E3fE8',\r\n    18,\r\n    'Helmet',\r\n    'Helmet Token',\r\n    'https://www.helmet.insure/',\r\n  ),\r\n  ten: new Token(\r\n    MAINNET,\r\n    '0xdFF8cb622790b7F92686c722b02CaB55592f152C',\r\n    18,\r\n    'TEN',\r\n    'Tenet Token',\r\n    'https://www.tenet.farm/',\r\n  ),\r\n  ditto: new Token(\r\n    MAINNET,\r\n    '0x233d91A0713155003fc4DcE0AFa871b508B3B715',\r\n    9,\r\n    'DITTO',\r\n    'Ditto Token',\r\n    'https://ditto.money/',\r\n  ),\r\n  blink: new Token(\r\n    MAINNET,\r\n    '0x63870A18B6e42b01Ef1Ad8A2302ef50B7132054F',\r\n    6,\r\n    'BLINK',\r\n    'Blink Token',\r\n    'https://blink.wink.org',\r\n  ),\r\n  syrup: new Token(\r\n    MAINNET,\r\n    '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n    18,\r\n    'SYRUP',\r\n    'SyrupBar Token',\r\n    'https://pancakeswap.finance/',\r\n  ),\r\n  pha: new Token(\r\n    MAINNET,\r\n    '0x0112e557d400474717056C4e6D40eDD846F38351',\r\n    18,\r\n    'PHA',\r\n    'Phala Token',\r\n    'https://phala.network',\r\n  ),\r\n  babycake: new Token(\r\n    MAINNET,\r\n    '0xdB8D30b74bf098aF214e862C90E647bbB1fcC58c',\r\n    18,\r\n    'BABYCAKE',\r\n    'Baby Cake Token',\r\n    'https://babycake.app/',\r\n  ),\r\n  bmon: new Token(\r\n    MAINNET,\r\n    '0x08ba0619b1e7A582E0BCe5BBE9843322C954C340',\r\n    18,\r\n    'BMON',\r\n    'Binamon Token',\r\n    'https://binamon.org/',\r\n  ),\r\n  hero: new Token(\r\n    MAINNET,\r\n    '0xD40bEDb44C081D2935eebA6eF5a3c8A31A1bBE13',\r\n    18,\r\n    'HERO',\r\n    'Metahero Token',\r\n    'https://metahero.io/',\r\n  ),\r\n  wsg: new Token(\r\n    MAINNET,\r\n    '0xA58950F05FeA2277d2608748412bf9F802eA4901',\r\n    18,\r\n    'WSG',\r\n    'Wall Street Games Token',\r\n    'https://wsg.gg/',\r\n  ),\r\n  mcrn: new Token(\r\n    MAINNET,\r\n    '0xacb2d47827C9813AE26De80965845D80935afd0B',\r\n    18,\r\n    'MCRN',\r\n    'Macaronswap Token',\r\n    'https://www.macaronswap.finance/',\r\n  ),\r\n  revv: new Token(\r\n    MAINNET,\r\n    '0x833F307aC507D47309fD8CDD1F835BeF8D702a93',\r\n    18,\r\n    'REVV',\r\n    'REVV Token',\r\n    'https://revvmotorsport.com/',\r\n  ),\r\n  skill: new Token(\r\n    MAINNET,\r\n    '0x154A9F9cbd3449AD22FDaE23044319D6eF2a1Fab',\r\n    18,\r\n    'SKILL',\r\n    'Cryptoblades Token',\r\n    'https://www.cryptoblades.io/',\r\n  ),\r\n  if: new Token(\r\n    MAINNET,\r\n    '0xB0e1fc65C1a741b4662B813eB787d369b8614Af1',\r\n    18,\r\n    'IF',\r\n    'Impossible Finance Token',\r\n    'https://impossible.finance/',\r\n  ),\r\n  sps: new Token(\r\n    MAINNET,\r\n    '0x1633b7157e7638C4d6593436111Bf125Ee74703F',\r\n    18,\r\n    'SPS',\r\n    'Splinterlands Token',\r\n    'https://splinterlands.com',\r\n  ),\r\n  chess: new Token(\r\n    MAINNET,\r\n    '0x20de22029ab63cf9A7Cf5fEB2b737Ca1eE4c82A6',\r\n    18,\r\n    'CHESS',\r\n    'Chess Token',\r\n    'https://tranchess.com/',\r\n  ),\r\n  titan: new Token(\r\n    MAINNET,\r\n    '0xe898EDc43920F357A93083F1d4460437dE6dAeC2',\r\n    18,\r\n    'TITAN',\r\n    'Titanswap Token',\r\n    'https://titanswap.org',\r\n  ),\r\n  harmony: new Token(\r\n    MAINNET,\r\n    '0x03fF0ff224f904be3118461335064bB48Df47938',\r\n    18,\r\n    'ONE',\r\n    'Harmony ONE Token',\r\n    'https://www.harmony.one/',\r\n  ),\r\n  mask: new Token(MAINNET, '0x2eD9a5C8C13b93955103B9a7C167B67Ef4d568a3', 18, 'MASK', 'Mask Token', 'https://mask.io/'),\r\n  dvi: new Token(\r\n    MAINNET,\r\n    '0x758FB037A375F17c7e195CC634D77dA4F554255B',\r\n    18,\r\n    'DVI',\r\n    'Dvision Network Token',\r\n    'https://dvision.network/',\r\n  ),\r\n  adx: new Token(\r\n    MAINNET,\r\n    '0x6bfF4Fb161347ad7de4A625AE5aa3A1CA7077819',\r\n    18,\r\n    'ADX',\r\n    'Adex Network Token',\r\n    'https://www.adex.network',\r\n  ),\r\n  bscpad: new Token(\r\n    MAINNET,\r\n    '0x5A3010d4d8D3B5fB49f8B6E57FB9E48063f16700',\r\n    18,\r\n    'BSCPAD',\r\n    'Bscpad Token',\r\n    'https://bscpad.com/',\r\n  ),\r\n  rabbit: new Token(\r\n    MAINNET,\r\n    '0x95a1199EBA84ac5f19546519e287d43D2F0E1b41',\r\n    18,\r\n    'RABBIT',\r\n    'Rabbit Finance Token',\r\n    'https://rabbitfinance.io/earn',\r\n  ),\r\n  form: new Token(\r\n    MAINNET,\r\n    '0x25A528af62e56512A19ce8c3cAB427807c28CC19',\r\n    18,\r\n    'FORM',\r\n    'Formation Token',\r\n    'https://formation.fi/',\r\n  ),\r\n  txl: new Token(MAINNET, '0x1FFD0b47127fdd4097E54521C9E2c7f0D66AafC5', 18, 'TXL', 'Tixl Token', 'https://tixl.org/'),\r\n  orbs: new Token(\r\n    MAINNET,\r\n    '0xeBd49b26169e1b52c04cFd19FCf289405dF55F80',\r\n    18,\r\n    'ORBS',\r\n    'Orbs Token',\r\n    'https://www.orbs.com/',\r\n  ),\r\n  cos: new Token(\r\n    MAINNET,\r\n    '0x96Dd399F9c3AFda1F194182F71600F1B65946501',\r\n    18,\r\n    'COS',\r\n    'Contentos Token',\r\n    'https://www.contentos.io/',\r\n  ),\r\n  bunny: new Token(\r\n    MAINNET,\r\n    '0xC9849E6fdB743d08fAeE3E34dd2D1bc69EA11a51',\r\n    18,\r\n    'BUNNY',\r\n    'Pancakebunny Token',\r\n    'https://pancakebunny.finance/',\r\n  ),\r\n  alice: new Token(\r\n    MAINNET,\r\n    '0xAC51066d7bEC65Dc4589368da368b212745d63E8',\r\n    6,\r\n    'ALICE',\r\n    'My Neighbor Alice Token',\r\n    'https://www.myneighboralice.com/',\r\n  ),\r\n  for: new Token(\r\n    MAINNET,\r\n    '0x658A109C5900BC6d2357c87549B651670E5b0539',\r\n    18,\r\n    'FOR',\r\n    'Fortube Token',\r\n    'https://www.for.tube/home',\r\n  ),\r\n  bux: new Token(\r\n    MAINNET,\r\n    '0x211FfbE424b90e25a15531ca322adF1559779E45',\r\n    18,\r\n    'BUX',\r\n    'Bux Crypto Token',\r\n    'https://getbux.com/bux-crypto/',\r\n  ),\r\n  nuls: new Token(\r\n    MAINNET,\r\n    '0x8CD6e29d3686d24d3C2018CEe54621eA0f89313B',\r\n    8,\r\n    'NULS',\r\n    'Nuls Token',\r\n    'https://www.nuls.io/',\r\n  ),\r\n  ramp: new Token(\r\n    MAINNET,\r\n    '0x8519EA49c997f50cefFa444d240fB655e89248Aa',\r\n    18,\r\n    'RAMP',\r\n    'RAMP DEFI Token',\r\n    'https://rampdefi.com/',\r\n  ),\r\n  bfi: new Token(\r\n    MAINNET,\r\n    '0x81859801b01764D4f0Fa5E64729f5a6C3b91435b',\r\n    18,\r\n    'BFI',\r\n    'bearn.fi Token',\r\n    'https://bearn.fi/',\r\n  ),\r\n  dexe: new Token(\r\n    MAINNET,\r\n    '0x039cB485212f996A9DBb85A9a75d898F94d38dA6',\r\n    18,\r\n    'DEXE',\r\n    'DeXe Token',\r\n    'https://dexe.network/',\r\n  ),\r\n  bel: new Token(\r\n    MAINNET,\r\n    '0x8443f091997f06a61670B735ED92734F5628692F',\r\n    18,\r\n    'BEL',\r\n    'Bella Protocol Token',\r\n    'https://bella.fi/',\r\n  ),\r\n  tpt: new Token(\r\n    MAINNET,\r\n    '0xECa41281c24451168a37211F0bc2b8645AF45092',\r\n    4,\r\n    'TPT',\r\n    'Tokenpocket Token',\r\n    'https://www.tokenpocket.pro/',\r\n  ),\r\n  xmark: new Token(\r\n    MAINNET,\r\n    '0x26A5dFab467d4f58fB266648CAe769503CEC9580',\r\n    9,\r\n    'xMARK',\r\n    'Benchmark Protocol Token',\r\n    'https://benchmarkprotocol.finance/',\r\n  ),\r\n  bmxx: new Token(\r\n    MAINNET,\r\n    '0x4131b87F74415190425ccD873048C708F8005823',\r\n    18,\r\n    'bMXX',\r\n    'Multiplier Token',\r\n    'https://multiplier.finance/',\r\n  ),\r\n  iotx: new Token(\r\n    MAINNET,\r\n    '0x9678E42ceBEb63F23197D726B29b1CB20d0064E5',\r\n    18,\r\n    'IOTX',\r\n    'Binance-Peg IoTeX Network Token',\r\n    'https://iotex.io/',\r\n  ),\r\n  bor: new Token(\r\n    MAINNET,\r\n    '0x92D7756c60dcfD4c689290E8A9F4d263b3b32241',\r\n    18,\r\n    'BOR',\r\n    'BoringDAO Token',\r\n    'https://www.boringdao.com/',\r\n  ),\r\n  bopen: new Token(\r\n    MAINNET,\r\n    '0xF35262a9d427F96d2437379eF090db986eaE5d42',\r\n    18,\r\n    'bOPEN',\r\n    'OPEN Governance Token',\r\n    'https://opendao.io/',\r\n  ),\r\n  dodo: new Token(\r\n    MAINNET,\r\n    '0x67ee3Cb086F8a16f34beE3ca72FAD36F7Db929e2',\r\n    18,\r\n    'DODO',\r\n    'Dodo Token',\r\n    'https://dodoex.io/',\r\n  ),\r\n  swingby: new Token(\r\n    MAINNET,\r\n    '0x71DE20e0C4616E7fcBfDD3f875d568492cBE4739',\r\n    18,\r\n    'SWINGBY',\r\n    'Swingby Network Token',\r\n    'https://swingby.network/',\r\n  ),\r\n  zee: new Token(\r\n    MAINNET,\r\n    '0x44754455564474A89358B2C2265883DF993b12F0',\r\n    18,\r\n    'ZEE',\r\n    'Zeroswap Token',\r\n    'https://zeroswap.io/',\r\n  ),\r\n  swgb: new Token(\r\n    MAINNET,\r\n    '0xE40255C5d7fa7ceEc5120408C78C787CECB4cfdb',\r\n    18,\r\n    'SWGb',\r\n    'SWGb Token',\r\n    'https://swirgepay.com/',\r\n  ),\r\n  swg: new Token(\r\n    MAINNET,\r\n    '0xe792f64C582698b8572AAF765bDC426AC3aEfb6B',\r\n    18,\r\n    'SWG',\r\n    'SWG Token',\r\n    'https://swirgepay.com/',\r\n  ),\r\n  sfp: new Token(\r\n    MAINNET,\r\n    '0xD41FDb03Ba84762dD66a0af1a6C8540FF1ba5dfb',\r\n    18,\r\n    'SFP',\r\n    'Safepal Token',\r\n    'https://www.safepal.io/',\r\n  ),\r\n  lina: new Token(\r\n    MAINNET,\r\n    '0x762539b45A1dCcE3D36d080F74d1AED37844b878',\r\n    18,\r\n    'LINA',\r\n    'Linear Finance Token',\r\n    'https://linear.finance/',\r\n  ),\r\n  lit: new Token(\r\n    MAINNET,\r\n    '0xb59490aB09A0f526Cc7305822aC65f2Ab12f9723',\r\n    18,\r\n    'LIT',\r\n    'Litentry Token',\r\n    'https://www.litentry.com/',\r\n  ),\r\n  hget: new Token(\r\n    MAINNET,\r\n    '0xC7d8D35EBA58a0935ff2D5a33Df105DD9f071731',\r\n    6,\r\n    'HGET',\r\n    'Hedget Token',\r\n    'https://www.hedget.com/',\r\n  ),\r\n  bdo: new Token(\r\n    MAINNET,\r\n    '0x190b589cf9Fb8DDEabBFeae36a813FFb2A702454',\r\n    18,\r\n    'BDO',\r\n    'Bdollar Token',\r\n    'https://bdollar.fi/',\r\n  ),\r\n  egld: new Token(\r\n    MAINNET,\r\n    '0xbF7c81FFF98BbE61B40Ed186e4AfD6DDd01337fe',\r\n    18,\r\n    'EGLD',\r\n    'Elrond Token',\r\n    'https://elrond.com/',\r\n  ),\r\n  front: new Token(\r\n    MAINNET,\r\n    '0x928e55daB735aa8260AF3cEDadA18B5f70C72f1b',\r\n    18,\r\n    'FRONT',\r\n    'Frontier Token',\r\n    'https://frontier.xyz/',\r\n  ),\r\n  btcst: new Token(\r\n    MAINNET,\r\n    '0x78650B139471520656b9E7aA7A5e9276814a38e9',\r\n    17,\r\n    'BTCST',\r\n    'StandardBTCHashrate Token',\r\n    'https://www.1-b.tc/',\r\n  ),\r\n  bscx: new Token(\r\n    MAINNET,\r\n    '0x5Ac52EE5b2a633895292Ff6d8A89bB9190451587',\r\n    18,\r\n    'BSCX',\r\n    'BSCX Token',\r\n    'https://bscex.org/',\r\n  ),\r\n  balbt: new Token(\r\n    MAINNET,\r\n    '0x72fAa679E1008Ad8382959FF48E392042A8b06f7',\r\n    18,\r\n    'bALBT',\r\n    'AllianceBlock Token',\r\n    'https://allianceblock.io/',\r\n  ),\r\n  asr: new Token(\r\n    MAINNET,\r\n    '0x80D5f92C2c8C682070C95495313dDB680B267320',\r\n    2,\r\n    'ASR',\r\n    'AS Roma Token',\r\n    'https://www.chiliz.com',\r\n  ),\r\n  atm: new Token(\r\n    MAINNET,\r\n    '0x25E9d05365c867E59C1904E7463Af9F312296f9E',\r\n    2,\r\n    'ATM',\r\n    'Athletico Madrid Token',\r\n    'https://www.chiliz.com',\r\n  ),\r\n  og: new Token(\r\n    MAINNET,\r\n    '0xf05E45aD22150677a017Fbd94b84fBB63dc9b44c',\r\n    2,\r\n    'OG',\r\n    'OG Nice Token',\r\n    'https://www.chiliz.com',\r\n  ),\r\n  reef: new Token(\r\n    MAINNET,\r\n    '0xF21768cCBC73Ea5B6fd3C687208a7c2def2d966e',\r\n    18,\r\n    'REEF',\r\n    'Reef.finance Token',\r\n    'https://reef.finance/',\r\n  ),\r\n  juv: new Token(\r\n    MAINNET,\r\n    '0xC40C9A843E1c6D01b7578284a9028854f6683b1B',\r\n    2,\r\n    'JUV',\r\n    'Juventus Token',\r\n    'https://www.chiliz.com',\r\n  ),\r\n  psg: new Token(\r\n    MAINNET,\r\n    '0xBc5609612b7C44BEf426De600B5fd1379DB2EcF1',\r\n    2,\r\n    'PSG',\r\n    'Paris Saint-Germain Token',\r\n    'https://www.chiliz.com',\r\n  ),\r\n  vai: new Token(\r\n    MAINNET,\r\n    '0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7',\r\n    18,\r\n    'VAI',\r\n    'VAI Stablecoin',\r\n    '0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7',\r\n  ),\r\n  unfi: new Token(\r\n    MAINNET,\r\n    '0x728C5baC3C3e370E372Fc4671f9ef6916b814d8B',\r\n    18,\r\n    'UNFI',\r\n    'UNFI Token',\r\n    'https://unifiprotocol.com',\r\n  ),\r\n  twt: new Token(\r\n    MAINNET,\r\n    '0x4B0F1812e5Df2A09796481Ff14017e6005508003',\r\n    18,\r\n    'TWT',\r\n    'Trust Wallet Token',\r\n    'https://trustwallet.com/',\r\n  ),\r\n  hard: new Token(\r\n    MAINNET,\r\n    '0xf79037F6f6bE66832DE4E7516be52826BC3cBcc4',\r\n    6,\r\n    'HARD',\r\n    'HARD Token',\r\n    'https://hard.kava.io',\r\n  ),\r\n  broobee: new Token(\r\n    MAINNET,\r\n    '0xE64F5Cb844946C1F102Bd25bBD87a5aB4aE89Fbe',\r\n    18,\r\n    'bROOBEE',\r\n    'ROOBEE Token',\r\n    'https://roobee.io/',\r\n  ),\r\n  stax: new Token(\r\n    MAINNET,\r\n    '0x0Da6Ed8B13214Ff28e9Ca979Dd37439e8a88F6c4',\r\n    18,\r\n    'STAX',\r\n    'StableX Token',\r\n    'https://stablexswap.com/',\r\n  ),\r\n  nar: new Token(\r\n    MAINNET,\r\n    '0xA1303E6199b319a891b79685F0537D289af1FC83',\r\n    18,\r\n    'NAR',\r\n    'Narwhalswap Token',\r\n    'https://narwhalswap.org/',\r\n  ),\r\n  nya: new Token(\r\n    MAINNET,\r\n    '0xbFa0841F7a90c4CE6643f651756EE340991F99D5',\r\n    18,\r\n    'NYA',\r\n    'Nyanswop Token',\r\n    'https://nyanswop.org/',\r\n  ),\r\n  ctk: new Token(\r\n    MAINNET,\r\n    '0xA8c2B8eec3d368C0253ad3dae65a5F2BBB89c929',\r\n    6,\r\n    'CTK',\r\n    'Certik Token',\r\n    'https://www.certik.foundation/',\r\n  ),\r\n  inj: new Token(\r\n    MAINNET,\r\n    '0xa2B726B1145A4773F68593CF171187d8EBe4d495',\r\n    18,\r\n    'INJ',\r\n    'Injective Protocol Token',\r\n    'https://injectiveprotocol.com/',\r\n  ),\r\n  sxp: new Token(MAINNET, '0x47BEAd2563dCBf3bF2c9407fEa4dC236fAbA485A', 18, 'SXP', 'Swipe Token', 'https://swipe.io/'),\r\n  alpha: new Token(\r\n    MAINNET,\r\n    '0xa1faa113cbE53436Df28FF0aEe54275c13B40975',\r\n    18,\r\n    'ALPHA',\r\n    'Alpha Finance Token',\r\n    'https://alphafinance.io/',\r\n  ),\r\n  xvs: new Token(MAINNET, '0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63', 18, 'XVS', 'Venus Token', 'https://venus.io/'),\r\n  sushi: new Token(\r\n    MAINNET,\r\n    '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n    18,\r\n    'SUSHI',\r\n    'Binance-Peg SushiToken',\r\n    'https://sushi.com/',\r\n  ),\r\n  comp: new Token(\r\n    MAINNET,\r\n    '0x52CE071Bd9b1C4B00A0b92D298c512478CaD67e8',\r\n    18,\r\n    'COMP',\r\n    'Compound Finance Token',\r\n    'https://compound.finance/',\r\n  ),\r\n  bifi: new Token(\r\n    MAINNET,\r\n    '0xCa3F508B8e4Dd382eE878A314789373D80A5190A',\r\n    18,\r\n    'BIFI',\r\n    'Beefy Finance Token',\r\n    'https://beefy.finance/',\r\n  ),\r\n  dusk: new Token(\r\n    MAINNET,\r\n    '0xB2BD0749DBE21f623d9BABa856D3B0f0e1BFEc9C',\r\n    18,\r\n    'DUSK',\r\n    'Dusk Network Token',\r\n    'https://dusk.network/',\r\n  ),\r\n  beth: new Token(\r\n    MAINNET,\r\n    '0x250632378E573c6Be1AC2f97Fcdf00515d0Aa91B',\r\n    18,\r\n    'BETH',\r\n    'Binance Beacon ETH',\r\n    'https://ethereum.org/en/eth2/beacon-chain/',\r\n  ),\r\n  mamzn: new Token(\r\n    MAINNET,\r\n    '0x3947B992DC0147D2D89dF0392213781b04B25075',\r\n    18,\r\n    'mAMZN',\r\n    'Wrapped Mirror AMZN Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  mgoogl: new Token(\r\n    MAINNET,\r\n    '0x62D71B23bF15218C7d2D7E48DBbD9e9c650B173f',\r\n    18,\r\n    'mGOOGL',\r\n    'Wrapped Mirror GOOGL Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  mnflx: new Token(\r\n    MAINNET,\r\n    '0xa04F060077D90Fe2647B61e4dA4aD1F97d6649dc',\r\n    18,\r\n    'mNFLX',\r\n    'Wrapped Mirror NFLX Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  mtsla: new Token(\r\n    MAINNET,\r\n    '0xF215A127A196e3988C09d052e16BcFD365Cd7AA3',\r\n    18,\r\n    'mTSLA',\r\n    'Wrapped Mirror TSLA Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  ltc: new Token(\r\n    MAINNET,\r\n    '0x4338665CBB7B2485A8855A139b75D5e34AB0DB94',\r\n    18,\r\n    'LTC',\r\n    'Binance-Peg Litecoin Token',\r\n    'https://litecoin.org/',\r\n  ),\r\n  ada: new Token(\r\n    MAINNET,\r\n    '0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47',\r\n    18,\r\n    'ADA',\r\n    ' Binance-Peg Cardano Token',\r\n    'https://www.cardano.org/',\r\n  ),\r\n  band: new Token(\r\n    MAINNET,\r\n    '0xAD6cAEb32CD2c308980a548bD0Bc5AA4306c6c18',\r\n    18,\r\n    'BAND',\r\n    'Binance-Peg Band Protocol Token',\r\n    'https://bandprotocol.com/',\r\n  ),\r\n  dot: new Token(\r\n    MAINNET,\r\n    '0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402',\r\n    18,\r\n    'DOT',\r\n    'Binance-Peg Polkadot Token',\r\n    'https://polkadot.network/',\r\n  ),\r\n  eos: new Token(\r\n    MAINNET,\r\n    '0x56b6fB708fC5732DEC1Afc8D8556423A2EDcCbD6',\r\n    18,\r\n    'EOS',\r\n    'Binance-Peg EOS Token',\r\n    'https://eos.io/',\r\n  ),\r\n  link: new Token(\r\n    MAINNET,\r\n    '0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD',\r\n    18,\r\n    'LINK',\r\n    'Binance-Peg Chainlink Token',\r\n    'https://chain.link/',\r\n  ),\r\n  xrp: new Token(\r\n    MAINNET,\r\n    '0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE',\r\n    18,\r\n    'XRP',\r\n    'Binance-Peg XRP Token',\r\n    'https://ripple.com/xrp/',\r\n  ),\r\n  atom: new Token(\r\n    MAINNET,\r\n    '0x0Eb3a705fc54725037CC9e008bDede697f62F335',\r\n    18,\r\n    'ATOM',\r\n    'Binance-Peg Cosmos Token',\r\n    'https://cosmos.network/',\r\n  ),\r\n  yfii: new Token(\r\n    MAINNET,\r\n    '0x7F70642d88cf1C4a3a7abb072B53B929b653edA5',\r\n    18,\r\n    'YFII',\r\n    'Binance-Peg YFII.finance Token',\r\n    'https://dfi.money/#/',\r\n  ),\r\n  xtz: new Token(\r\n    MAINNET,\r\n    '0x16939ef78684453bfDFb47825F8a5F714f12623a',\r\n    18,\r\n    'XTZ',\r\n    'Binance-Peg Tezos Token',\r\n    'https://www.tezos.com/',\r\n  ),\r\n  bch: new Token(\r\n    MAINNET,\r\n    '0x8fF795a6F4D97E7887C79beA79aba5cc76444aDf',\r\n    18,\r\n    'BCH',\r\n    'Binance-Peg Bitcoin Cash Token',\r\n    'https://bch.info/',\r\n  ),\r\n  yfi: new Token(\r\n    MAINNET,\r\n    '0x88f1A5ae2A3BF98AEAF342D26B30a79438c9142e',\r\n    18,\r\n    'YFI',\r\n    'Binance-Peg yearn.finance Token',\r\n    'https://yearn.finance/',\r\n  ),\r\n  uni: new Token(\r\n    MAINNET,\r\n    '0xBf5140A22578168FD562DCcF235E5D43A02ce9B1',\r\n    18,\r\n    'UNI',\r\n    'Binance-Peg Uniswap Token',\r\n    'https://uniswap.org/',\r\n  ),\r\n  fil: new Token(\r\n    MAINNET,\r\n    '0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153',\r\n    18,\r\n    'FIL',\r\n    'Binance-Peg Filecoin Token',\r\n    'https://filecoin.io/',\r\n  ),\r\n  bake: new Token(\r\n    MAINNET,\r\n    '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    18,\r\n    'BAKE',\r\n    'Bakeryswap Token',\r\n    'https://www.bakeryswap.org/',\r\n  ),\r\n  burger: new Token(\r\n    MAINNET,\r\n    '0xAe9269f27437f0fcBC232d39Ec814844a51d6b8f',\r\n    18,\r\n    'BURGER',\r\n    'Burgerswap Token',\r\n    'https://burgerswap.org/',\r\n  ),\r\n  bdigg: new Token(\r\n    MAINNET,\r\n    '0x5986D5c77c65e5801a5cAa4fAE80089f870A71dA',\r\n    18,\r\n    'bDIGG',\r\n    'Badger Sett Digg Token',\r\n    'https://badger.finance/',\r\n  ),\r\n  bbadger: new Token(\r\n    MAINNET,\r\n    '0x1F7216fdB338247512Ec99715587bb97BBf96eae',\r\n    18,\r\n    'bBadger',\r\n    'Badger Sett Badger Token',\r\n    'https://badger.finance/',\r\n  ),\r\n  trade: new Token(\r\n    MAINNET,\r\n    '0x7af173F350D916358AF3e218Bdf2178494Beb748',\r\n    18,\r\n    'TRADE',\r\n    'Unitrade Token',\r\n    'https://unitrade.app/',\r\n  ),\r\n  pnt: new Token(\r\n    MAINNET,\r\n    '0xdaacB0Ab6Fb34d24E8a67BfA14BF4D95D4C7aF92',\r\n    18,\r\n    'PNT',\r\n    'pNetwork Token',\r\n    'https://ptokens.io/',\r\n  ),\r\n  mir: new Token(\r\n    MAINNET,\r\n    '0x5B6DcF557E2aBE2323c48445E8CC948910d8c2c9',\r\n    18,\r\n    'MIR',\r\n    'Mirror Protocol Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  pbtc: new Token(\r\n    MAINNET,\r\n    '0xeD28A457A5A76596ac48d87C0f577020F6Ea1c4C',\r\n    18,\r\n    'pBTC',\r\n    'pTokens BTC Token',\r\n    'https://ptokens.io/',\r\n  ),\r\n  lto: new Token(\r\n    MAINNET,\r\n    '0x857B222Fc79e1cBBf8Ca5f78CB133d1b7CF34BBd',\r\n    18,\r\n    'LTO',\r\n    'LTO Network Token',\r\n    'https://ltonetwork.com/',\r\n  ),\r\n  pcws: new Token(\r\n    MAINNET,\r\n    '0xbcf39F0EDDa668C58371E519AF37CA705f2bFcbd',\r\n    18,\r\n    'pCWS',\r\n    'PolyCrowns Token',\r\n    'https://game.seascape.network/',\r\n  ),\r\n  zil: new Token(\r\n    MAINNET,\r\n    '0xb86AbCb37C3A4B64f74f59301AFF131a1BEcC787',\r\n    12,\r\n    'ZIL',\r\n    'Zilliqa Token',\r\n    'https://www.zilliqa.com/',\r\n  ),\r\n  lien: new Token(\r\n    MAINNET,\r\n    '0x5d684ADaf3FcFe9CFb5ceDe3abf02F0Cdd1012E3',\r\n    8,\r\n    'LIEN',\r\n    'Lien Finance Token',\r\n    'https://lien.finance/',\r\n  ),\r\n  swth: new Token(\r\n    MAINNET,\r\n    '0x250b211EE44459dAd5Cd3bCa803dD6a7EcB5d46C',\r\n    8,\r\n    'SWTH',\r\n    'Switcheo Network Token',\r\n    'https://switcheo.network/',\r\n  ),\r\n  dft: new Token(\r\n    MAINNET,\r\n    '0x42712dF5009c20fee340B245b510c0395896cF6e',\r\n    18,\r\n    'DFT',\r\n    'Dfuture Token',\r\n    'https://www.dfuture.com/home',\r\n  ),\r\n  gum: new Token(\r\n    MAINNET,\r\n    '0xc53708664b99DF348dd27C3Ac0759d2DA9c40462',\r\n    18,\r\n    'GUM',\r\n    'GourmetGalaxy Token',\r\n    'https://gourmetgalaxy.io/',\r\n  ),\r\n  dego: new Token(\r\n    MAINNET,\r\n    '0x3FdA9383A84C05eC8f7630Fe10AdF1fAC13241CC',\r\n    18,\r\n    'DEGO',\r\n    'Dego Finance Token',\r\n    'https://bsc.dego.finance/home',\r\n  ),\r\n  nrv: new Token(\r\n    MAINNET,\r\n    '0x42F6f551ae042cBe50C739158b4f0CAC0Edb9096',\r\n    18,\r\n    'NRV',\r\n    'Nerve Finance Token',\r\n    'https://nerve.fi/',\r\n  ),\r\n  easy: new Token(\r\n    MAINNET,\r\n    '0x7C17c8bED8d14bAccE824D020f994F4880D6Ab3B',\r\n    18,\r\n    'EASY',\r\n    'EASY Token',\r\n    'https://easyfi.network/',\r\n  ),\r\n  oddz: new Token(MAINNET, '0xCD40F2670CF58720b694968698A5514e924F742d', 18, 'ODDZ', 'Oddz Token', 'https://oddz.fi/'),\r\n  hoo: new Token(MAINNET, '0xE1d1F66215998786110Ba0102ef558b22224C016', 8, 'HOO', 'Hoo Token', 'https://hoo.com/'),\r\n  apys: new Token(\r\n    MAINNET,\r\n    '0x37dfACfaeDA801437Ff648A1559d73f4C40aAcb7',\r\n    18,\r\n    'APYS',\r\n    'APY Swap Token',\r\n    'https://apyswap.com/',\r\n  ),\r\n  bondly: new Token(\r\n    MAINNET,\r\n    '0x96058f8C3e16576D9BD68766f3836d9A33158f89',\r\n    18,\r\n    'BONDLY',\r\n    'Bondly Token',\r\n    'https://www.bondly.finance/',\r\n  ),\r\n  tko: new Token(\r\n    MAINNET,\r\n    '0x9f589e3eabe42ebC94A44727b3f3531C0c877809',\r\n    18,\r\n    'TKO',\r\n    'Tokocrypto Token',\r\n    'https://www.tokocrypto.com/',\r\n  ),\r\n  itam: new Token(\r\n    MAINNET,\r\n    '0x04C747b40Be4D535fC83D09939fb0f626F32800B',\r\n    18,\r\n    'ITAM',\r\n    'Itam Network Token',\r\n    'https://itam.network/',\r\n  ),\r\n  arpa: new Token(\r\n    MAINNET,\r\n    '0x6F769E65c14Ebd1f68817F5f1DcDb61Cfa2D6f7e',\r\n    18,\r\n    'ARPA',\r\n    'Arpachain Token',\r\n    'https://arpachain.io/',\r\n  ),\r\n  eps: new Token(\r\n    MAINNET,\r\n    '0xA7f552078dcC247C2684336020c03648500C6d9F',\r\n    18,\r\n    'EPS',\r\n    'Ellipsis Finance Token',\r\n    'https://ellipsis.finance/',\r\n  ),\r\n  jgn: new Token(\r\n    MAINNET,\r\n    '0xC13B7a43223BB9Bf4B69BD68Ab20ca1B79d81C75',\r\n    18,\r\n    'JGN',\r\n    'Juggernaut DeFi Token',\r\n    'https://jgndefi.com/',\r\n  ),\r\n  tlm: new Token(\r\n    MAINNET,\r\n    '0x2222227E22102Fe3322098e4CBfE18cFebD57c95',\r\n    4,\r\n    'TLM',\r\n    'Alien Worlds Trilium Token',\r\n    'https://alienworlds.io/',\r\n  ),\r\n  perl: new Token(\r\n    MAINNET,\r\n    '0x0F9E4D49f25de22c2202aF916B681FBB3790497B',\r\n    18,\r\n    'PERL',\r\n    'Perlin',\r\n    'https://perlinx.finance/',\r\n  ),\r\n  alpa: new Token(\r\n    MAINNET,\r\n    '0xc5E6689C9c8B02be7C49912Ef19e79cF24977f03',\r\n    18,\r\n    'ALPA',\r\n    'AlpaToken',\r\n    'https://bsc.alpaca.city/',\r\n  ),\r\n  hzn: new Token(\r\n    MAINNET,\r\n    '0xC0eFf7749b125444953ef89682201Fb8c6A917CD',\r\n    18,\r\n    'HZN',\r\n    'Horizon Protocol Token',\r\n    'https://horizonprotocol.com/',\r\n  ),\r\n  suter: new Token(\r\n    MAINNET,\r\n    '0x4CfbBdfBd5BF0814472fF35C72717Bd095ADa055',\r\n    18,\r\n    'SUTER',\r\n    'Suterusu Token',\r\n    'https://shield.suterusu.io/',\r\n  ),\r\n  cgg: new Token(\r\n    MAINNET,\r\n    '0x1613957159E9B0ac6c80e824F7Eea748a32a0AE2',\r\n    18,\r\n    'CGG',\r\n    'pTokens CGG Token',\r\n    'https://chainguardians.io/',\r\n  ),\r\n  mix: new Token(\r\n    MAINNET,\r\n    '0xB67754f5b4C704A24d2db68e661b2875a4dDD197',\r\n    18,\r\n    'MIX',\r\n    'Mix Token',\r\n    'https://mixie.chainguardians.io/',\r\n  ),\r\n  hakka: new Token(\r\n    MAINNET,\r\n    '0x1D1eb8E8293222e1a29d2C0E4cE6C0Acfd89AaaC',\r\n    18,\r\n    'HAKKA',\r\n    'Hakka Token',\r\n    'https://hakka.finance/',\r\n  ),\r\n  xed: new Token(\r\n    MAINNET,\r\n    '0x5621b5A3f4a8008c4CCDd1b942B121c8B1944F1f',\r\n    18,\r\n    'XED',\r\n    'Exeedme Token',\r\n    'https://www.exeedme.com/',\r\n  ),\r\n  τbtc: new Token(\r\n    MAINNET,\r\n    '0x2cD1075682b0FCCaADd0Ca629e138E64015Ba11c',\r\n    9,\r\n    'τBTC',\r\n    'τBitcoin Token',\r\n    'https://www.btcst.finance/',\r\n  ),\r\n  alpaca: new Token(\r\n    MAINNET,\r\n    '0x8F0528cE5eF7B51152A59745bEfDD91D97091d2F',\r\n    18,\r\n    'ALPACA',\r\n    'AlpacaToken',\r\n    'https://www.alpacafinance.org/',\r\n  ),\r\n  dfd: new Token(\r\n    MAINNET,\r\n    '0x9899a98b222fCb2f3dbee7dF45d943093a4ff9ff',\r\n    18,\r\n    'DFD',\r\n    'DefiDollar DAO',\r\n    'https://dusd.finance/',\r\n  ),\r\n  lmt: new Token(\r\n    MAINNET,\r\n    '0x9617857E191354dbEA0b714d78Bc59e57C411087',\r\n    18,\r\n    'LMT',\r\n    'Lympo Market Token',\r\n    'https://lympo.io/lmt/',\r\n  ),\r\n  btt: new Token(\r\n    MAINNET,\r\n    '0x8595F9dA7b868b1822194fAEd312235E43007b49',\r\n    18,\r\n    'BTT',\r\n    'Binance-Peg BitTorrent Token',\r\n    'https://www.bittorrent.com/',\r\n  ),\r\n  trx: new Token(\r\n    MAINNET,\r\n    '0x85EAC5Ac2F758618dFa09bDbe0cf174e7d574D5B',\r\n    18,\r\n    'TRX',\r\n    'TRON Token',\r\n    'https://tron.network/',\r\n  ),\r\n  win: new Token(\r\n    MAINNET,\r\n    '0xaeF0d72a118ce24feE3cD1d43d383897D05B4e99',\r\n    18,\r\n    'WIN',\r\n    'WIN Token',\r\n    'https://winklink.org/',\r\n  ),\r\n  mcoin: new Token(\r\n    MAINNET,\r\n    '0x49022089e78a8D46Ec87A3AF86a1Db6c189aFA6f',\r\n    18,\r\n    'MCOIN',\r\n    'Wrapped Mirror COIN Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  math: new Token(\r\n    MAINNET,\r\n    '0xF218184Af829Cf2b0019F8E6F0b2423498a36983',\r\n    18,\r\n    'MATH',\r\n    'MATH Token',\r\n    'https://mathwallet.org/',\r\n  ),\r\n  kun: new Token(\r\n    MAINNET,\r\n    '0x1A2fb0Af670D0234c2857FaD35b789F8Cb725584',\r\n    18,\r\n    'KUN',\r\n    'QIAN governance token',\r\n    'https://chemix.io/home',\r\n  ),\r\n  qsd: new Token(\r\n    MAINNET,\r\n    '0x07AaA29E63FFEB2EBf59B33eE61437E1a91A3bb2',\r\n    18,\r\n    'QSD',\r\n    'QIAN second generation dollar',\r\n    'https://chemix.io/home',\r\n  ),\r\n  hyfi: new Token(\r\n    MAINNET,\r\n    '0x9a319b959e33369C5eaA494a770117eE3e585318',\r\n    18,\r\n    'HYFI',\r\n    'HYFI Token',\r\n    'https://hyfi.pro/#/',\r\n  ),\r\n  oin: new Token(\r\n    MAINNET,\r\n    '0x658E64FFcF40D240A43D52CA9342140316Ae44fA',\r\n    8,\r\n    'OIN',\r\n    'oinfinance Token',\r\n    'https://oin.finance/',\r\n  ),\r\n  doge: new Token(\r\n    MAINNET,\r\n    '0xbA2aE424d960c26247Dd6c32edC70B295c744C43',\r\n    8,\r\n    'DOGE',\r\n    'Binance-Peg Dogecoin',\r\n    'https://dogecoin.com/',\r\n  ),\r\n  fine: new Token(\r\n    MAINNET,\r\n    '0x4e6415a5727ea08aAE4580057187923aeC331227',\r\n    18,\r\n    'FINE',\r\n    'Refinable Token',\r\n    'https://refinable.com/',\r\n  ),\r\n  one: new Token(\r\n    MAINNET,\r\n    '0x04BAf95Fd4C52fd09a56D840bAEe0AB8D7357bf0',\r\n    18,\r\n    'ONE',\r\n    'BigONE Token',\r\n    'https://www.bigone.com/',\r\n  ),\r\n  pmon: new Token(\r\n    MAINNET,\r\n    '0x1796ae0b0fa4862485106a0de9b654eFE301D0b2',\r\n    18,\r\n    'PMON',\r\n    'Polkamon Token',\r\n    'https://polkamon.com/',\r\n  ),\r\n  τdoge: new Token(\r\n    MAINNET,\r\n    '0xe550a593d09FBC8DCD557b5C88Cea6946A8b404A',\r\n    8,\r\n    'τDOGE',\r\n    'τDogecoin',\r\n    'https://www.btcst.finance/',\r\n  ),\r\n  btr: new Token(\r\n    MAINNET,\r\n    '0x5a16E8cE8cA316407c6E6307095dc9540a8D62B3',\r\n    18,\r\n    'BTR',\r\n    'Bitrue Token',\r\n    'https://www.bitrue.com/',\r\n  ),\r\n  ubxt: new Token(\r\n    MAINNET,\r\n    '0xBbEB90cFb6FAFa1F69AA130B7341089AbeEF5811',\r\n    18,\r\n    'UBXT',\r\n    'UpBots Token',\r\n    'https://upbots.com/',\r\n  ),\r\n  wmass: new Token(\r\n    MAINNET,\r\n    '0x7e396BfC8a2f84748701167c2d622F041A1D7a17',\r\n    8,\r\n    'WMASS',\r\n    'Wrapped MASS Token',\r\n    'https://massnet.org/en/',\r\n  ),\r\n  rfox: new Token(\r\n    MAINNET,\r\n    '0x0a3A21356793B49154Fd3BbE91CBc2A16c0457f5',\r\n    18,\r\n    'RFOX',\r\n    'RFOX Token',\r\n    'https://www.redfoxlabs.io/',\r\n  ),\r\n  xend: new Token(\r\n    MAINNET,\r\n    '0x4a080377f83D669D7bB83B3184a8A5E61B500608',\r\n    18,\r\n    'XEND',\r\n    'XEND Token',\r\n    'https://xend.finance/',\r\n  ),\r\n  cyc: new Token(MAINNET, '0x810EE35443639348aDbbC467b33310d2AB43c168', 18, 'CYC', 'CYC Token', 'https://cyclone.xyz/'),\r\n  chr: new Token(\r\n    MAINNET,\r\n    '0xf9CeC8d50f6c8ad3Fb6dcCEC577e05aA32B224FE',\r\n    6,\r\n    'CHR',\r\n    'Chroma Token',\r\n    'https://chromia.com/',\r\n  ),\r\n  deri: new Token(\r\n    MAINNET,\r\n    '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\r\n    18,\r\n    'DERI',\r\n    'Deri Token',\r\n    'https://deri.finance/#/index',\r\n  ),\r\n  well: new Token(\r\n    MAINNET,\r\n    '0xf07a32Eb035b786898c00bB1C64d8c6F8E7a46D5',\r\n    18,\r\n    'WELL',\r\n    'BitWell Token',\r\n    'https://www.bitwellex.com/',\r\n  ),\r\n  wex: new Token(\r\n    MAINNET,\r\n    '0xa9c41A46a6B3531d28d5c32F6633dd2fF05dFB90',\r\n    18,\r\n    'WEX',\r\n    'WaultSwap Token',\r\n    'https://wault.finance/',\r\n  ),\r\n  waultx: new Token(\r\n    MAINNET,\r\n    '0xB64E638E60D154B43f660a6BF8fD8a3b249a6a21',\r\n    18,\r\n    'WAULTx',\r\n    'Wault Token',\r\n    'https://wault.finance/',\r\n  ),\r\n  popen: new Token(\r\n    MAINNET,\r\n    '0xaBaE871B7E3b67aEeC6B46AE9FE1A91660AadAC5',\r\n    18,\r\n    'pOPEN',\r\n    'OPEN Governance Token',\r\n    'https://opendao.io/',\r\n  ),\r\n  ez: new Token(\r\n    MAINNET,\r\n    '0x5512014efa6Cd57764Fa743756F7a6Ce3358cC83',\r\n    18,\r\n    'EZ',\r\n    'Easy V2 Token',\r\n    'https://easyfi.network/',\r\n  ),\r\n  vrt: new Token(\r\n    MAINNET,\r\n    '0x5F84ce30DC3cF7909101C69086c50De191895883',\r\n    18,\r\n    'VRT',\r\n    'Venus Reward Token',\r\n    'https://venus.io/',\r\n  ),\r\n  tusd: new Token(\r\n    MAINNET,\r\n    '0x14016E85a25aeb13065688cAFB43044C2ef86784',\r\n    18,\r\n    'TUSD',\r\n    'Binance-Peg TrueUSD Token',\r\n    'https://www.trueusd.com/',\r\n  ),\r\n  mtrg: new Token(\r\n    MAINNET,\r\n    '0xBd2949F67DcdC549c6Ebe98696449Fa79D988A9F',\r\n    18,\r\n    'MTRG',\r\n    'Wrapped MTRG Token',\r\n    'https://www.meter.io/',\r\n  ),\r\n  ktn: new Token(\r\n    MAINNET,\r\n    '0xDAe6c2A48BFAA66b43815c5548b10800919c993E',\r\n    18,\r\n    'KTN',\r\n    'Kattana Token',\r\n    'https://kattana.io/',\r\n  ),\r\n  qkc: new Token(\r\n    MAINNET,\r\n    '0xA1434F1FC3F437fa33F7a781E041961C0205B5Da',\r\n    18,\r\n    'QKC',\r\n    'QuarkChain Token',\r\n    'https://quarkchain.io/',\r\n  ),\r\n  bcfx: new Token(\r\n    MAINNET,\r\n    '0x045c4324039dA91c52C55DF5D785385Aab073DcF',\r\n    18,\r\n    'bCFX',\r\n    'BSC Conflux Token',\r\n    'https://www.confluxnetwork.org/',\r\n  ),\r\n  mx: new Token(MAINNET, '0x9F882567A62a5560d147d64871776EeA72Df41D3', 18, 'MX', 'MX Token', 'https://www.mxc.com/'),\r\n  ata: new Token(\r\n    MAINNET,\r\n    '0xA2120b9e674d3fC3875f415A7DF52e382F141225',\r\n    18,\r\n    'ATA',\r\n    'Automata Token',\r\n    'https://www.ata.network/',\r\n  ),\r\n  mbox: new Token(\r\n    MAINNET,\r\n    '0x3203c9E46cA618C8C1cE5dC67e7e9D75f5da2377',\r\n    18,\r\n    'MBOX',\r\n    'Mobox Token',\r\n    'https://www.mobox.io/#/',\r\n  ),\r\n  boring: new Token(\r\n    MAINNET,\r\n    '0xffEecbf8D7267757c2dc3d13D730E97E15BfdF7F',\r\n    18,\r\n    'BORING',\r\n    'BoringDAO Token',\r\n    'https://www.boringdao.com/',\r\n  ),\r\n  marsh: new Token(\r\n    MAINNET,\r\n    '0x2FA5dAF6Fe0708fBD63b1A7D1592577284f52256',\r\n    18,\r\n    'MARSH',\r\n    'Unmarshal Token',\r\n    'https://unmarshal.io/',\r\n  ),\r\n  ampl: new Token(\r\n    MAINNET,\r\n    '0xDB021b1B247fe2F1fa57e0A87C748Cc1E321F07F',\r\n    9,\r\n    'AMPL',\r\n    'AMPL Token',\r\n    'https://www.ampleforth.org/',\r\n  ),\r\n  o3: new Token(\r\n    MAINNET,\r\n    '0xEe9801669C6138E84bD50dEB500827b776777d28',\r\n    18,\r\n    'O3',\r\n    'O3 Swap Token',\r\n    'https://o3swap.com/',\r\n  ),\r\n  hai: new Token(MAINNET, '0xaA9E582e5751d703F85912903bacADdFed26484C', 8, 'HAI', 'Hacken Token', 'https://hacken.io/'),\r\n  htb: new Token(\r\n    MAINNET,\r\n    '0x4e840AADD28DA189B9906674B4Afcb77C128d9ea',\r\n    18,\r\n    'HTB',\r\n    'Hotbit Token',\r\n    'https://www.hotbit.io/',\r\n  ),\r\n  woo: new Token(\r\n    MAINNET,\r\n    '0x4691937a7508860F876c9c0a2a617E7d9E945D4B',\r\n    18,\r\n    'WOO',\r\n    'Wootrade Network Token',\r\n    'https://woo.network/',\r\n  ),\r\n  $dg: new Token(\r\n    MAINNET,\r\n    '0x9Fdc3ae5c814b79dcA2556564047C5e7e5449C19',\r\n    18,\r\n    '$DG',\r\n    'Decentral Games Token',\r\n    'https://decentral.games/',\r\n  ),\r\n  safemoon: new Token(\r\n    MAINNET,\r\n    '0x8076C74C5e3F5852037F31Ff0093Eeb8c8ADd8D3',\r\n    9,\r\n    'SAFEMOON',\r\n    'Safemoon Token',\r\n    'https://safemoon.net/',\r\n  ),\r\n  axs: new Token(\r\n    MAINNET,\r\n    '0x715D400F88C167884bbCc41C5FeA407ed4D2f8A0',\r\n    18,\r\n    'AXS',\r\n    'Binance-Pegged Axie Infinity Shard',\r\n    'https://axieinfinity.com/',\r\n  ),\r\n  c98: new Token(\r\n    MAINNET,\r\n    '0xaEC945e04baF28b135Fa7c640f624f8D90F1C3a6',\r\n    18,\r\n    'c98',\r\n    'Coin98 Token',\r\n    'https://coin98.com/',\r\n  ),\r\n  pots: new Token(\r\n    MAINNET,\r\n    '0x3Fcca8648651E5b974DD6d3e50F61567779772A8',\r\n    18,\r\n    'POTS',\r\n    'Moonpot Token',\r\n    'https://moonpot.com/',\r\n  ),\r\n  gnt: new Token(\r\n    MAINNET,\r\n    '0xF750A26EB0aCf95556e8529E72eD530f3b60f348',\r\n    18,\r\n    'GNT',\r\n    'GreenTrust Token',\r\n    'https://www.greentrusttoken.com/',\r\n  ),\r\n  rusd: new Token(\r\n    MAINNET,\r\n    '0x07663837218A003e66310a01596af4bf4e44623D',\r\n    18,\r\n    'rUSD',\r\n    'rUSD Token',\r\n    'https://appv2.rampdefi.com/#/',\r\n  ),\r\n  bp: new Token(\r\n    MAINNET,\r\n    '0xACB8f52DC63BB752a51186D1c55868ADbFfEe9C1',\r\n    18,\r\n    'BP',\r\n    'BunnyPark Token',\r\n    'https://www.bunnypark.com/',\r\n  ),\r\n  sfund: new Token(\r\n    MAINNET,\r\n    '0x477bC8d23c634C154061869478bce96BE6045D12',\r\n    18,\r\n    'SFUND',\r\n    'Seedify Fund Token',\r\n    'https://seedify.fund/',\r\n  ),\r\n  naos: new Token(\r\n    MAINNET,\r\n    '0x758d08864fB6cCE3062667225ca10b8F00496cc2',\r\n    18,\r\n    'NAOS',\r\n    'NAOSToken',\r\n    'https://naos.finance/',\r\n  ),\r\n  cart: new Token(\r\n    MAINNET,\r\n    '0x5C8C8D560048F34E5f7f8ad71f2f81a89DBd273e',\r\n    18,\r\n    'CART',\r\n    'CryptoArt.ai',\r\n    'https://cryptoart.ai/',\r\n  ),\r\n  light: new Token(\r\n    MAINNET,\r\n    '0x037838b556d9c9d654148a284682C55bB5f56eF4',\r\n    18,\r\n    'LIGHT',\r\n    'Lightning',\r\n    'https://lightningprotocol.finance/',\r\n  ),\r\n  rpg: new Token(\r\n    MAINNET,\r\n    '0xc2098a8938119A52B1F7661893c0153A6CB116d5',\r\n    18,\r\n    'RPG',\r\n    'Rangers Protocol',\r\n    'https://www.rangersprotocol.com/',\r\n  ),\r\n  mcb: new Token(\r\n    MAINNET,\r\n    '0x5fE80d2CD054645b9419657d3d10d26391780A7B',\r\n    18,\r\n    'MCB',\r\n    'MCDEX',\r\n    'https://mcdex.io/homepage/',\r\n  ),\r\n  lazio: new Token(\r\n    MAINNET,\r\n    '0x77d547256A2cD95F32F67aE0313E450Ac200648d',\r\n    8,\r\n    'LAZIO',\r\n    'FC Lazio Fan Token',\r\n    'https://launchpad.binance.com/en/subscription/LAZIO_BNB',\r\n  ),\r\n  arv: new Token(MAINNET, '0x6679eB24F59dFe111864AEc72B443d1Da666B360', 8, 'ARV', 'ARIVA', 'https://ariva.digital'),\r\n  moni: new Token(\r\n    MAINNET,\r\n    '0x9573c88aE3e37508f87649f87c4dd5373C9F31e0',\r\n    18,\r\n    'MONI',\r\n    'Monsta Infinite',\r\n    'https://monstainfinite.com/',\r\n  ),\r\n  xms: new Token(\r\n    MAINNET,\r\n    '0x7859B01BbF675d67Da8cD128a50D155cd881B576',\r\n    18,\r\n    'XMS',\r\n    'Mars Ecosystem',\r\n    'https://marsecosystem.com/',\r\n  ),\r\n  zoo: new Token(\r\n    MAINNET,\r\n    '0x1D229B958D5DDFca92146585a8711aECbE56F095',\r\n    18,\r\n    'ZOO',\r\n    'ZOO Crypto World',\r\n    'https://zoogame.finance/',\r\n  ),\r\n  fina: new Token(\r\n    MAINNET,\r\n    '0x426c72701833fdDBdFc06c944737C6031645c708',\r\n    18,\r\n    'FINA',\r\n    'Defina Finance',\r\n    'https://defina.finance/',\r\n  ),\r\n  dar: new Token(\r\n    MAINNET,\r\n    '0x23CE9e926048273eF83be0A3A8Ba9Cb6D45cd978',\r\n    6,\r\n    'DAR',\r\n    'Mines of Dalarnia',\r\n    'https://www.minesofdalarnia.com/',\r\n  ),\r\n  xwg: new Token(\r\n    MAINNET,\r\n    '0x6b23C89196DeB721e6Fd9726E6C76E4810a464bc',\r\n    18,\r\n    'XWG',\r\n    'X World Games',\r\n    'https://xwg.games/',\r\n  ),\r\n  eternal: new Token(\r\n    MAINNET,\r\n    '0xD44FD09d74cd13838F137B590497595d6b3FEeA4',\r\n    18,\r\n    'ETERNAL',\r\n    'CryptoMines Eternal',\r\n    'https://cryptomines.app/',\r\n  ),\r\n  porto: new Token(\r\n    MAINNET,\r\n    '0x49f2145d6366099e13B10FbF80646C0F377eE7f6',\r\n    8,\r\n    'PORTO',\r\n    'FC Porto Fan Token',\r\n    'https://launchpad.binance.com/en/subscription/PORTO_BNB',\r\n  ),\r\n  kart: new Token(\r\n    MAINNET,\r\n    '0x8BDd8DBcBDf0C066cA5f3286d33673aA7A553C10',\r\n    18,\r\n    'KART',\r\n    'Dragon Kart',\r\n    'https://dragonkart.com/',\r\n  ),\r\n  qi: new Token(MAINNET, '0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5', 18, 'QI', 'BENQI', 'https://benqi.fi/'),\r\n  sheesha: new Token(\r\n    MAINNET,\r\n    '0x232FB065D9d24c34708eeDbF03724f2e95ABE768',\r\n    18,\r\n    'SHEESHA',\r\n    'Sheesha Finance',\r\n    'https://www.sheeshafinance.io/',\r\n  ),\r\n  bcoin: new Token(\r\n    MAINNET,\r\n    '0x00e1656e45f18ec6747F5a8496Fd39B50b38396D',\r\n    18,\r\n    'BCOIN',\r\n    'Bomb Crypto',\r\n    'https://bombcrypto.io/',\r\n  ),\r\n}\r\n\r\nexport const testnetTokens = {\r\n  wbnb: new Token(\r\n    TESTNET,\r\n    '0x094616F0BdFB0b526bD735Bf66Eca0Ad254ca81F',\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB',\r\n    'https://www.binance.com/',\r\n  ),\r\n  cake: new Token(\r\n    TESTNET,\r\n    '0x703f112bda4cc6cb9c5fb4b2e6140f6d8374f10b',\r\n    18,\r\n    'CAKE',\r\n    'PancakeSwap Token',\r\n    'https://pancakeswap.finance/',\r\n  ),\r\n  busd: new Token(\r\n    TESTNET,\r\n    '0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee',\r\n    18,\r\n    'BUSD',\r\n    'Binance USD',\r\n    'https://www.paxos.com/busd/',\r\n  ),\r\n  syrup: new Token(\r\n    TESTNET,\r\n    '0xfE1e507CeB712BDe086f3579d2c03248b2dB77f9',\r\n    18,\r\n    'SYRUP',\r\n    'SyrupBar Token',\r\n    'https://pancakeswap.finance/',\r\n  ),\r\n  bake: new Token(\r\n    TESTNET,\r\n    '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    18,\r\n    'BAKE',\r\n    'Bakeryswap Token',\r\n    'https://www.bakeryswap.org/',\r\n  ),\r\n}\r\n\r\nconst tokens = (): TokenList => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\n  // If testnet - return list comprised of testnetTokens wherever they exist, and mainnetTokens where they don't\r\n  if (parseInt(chainId, 10) === ChainId.TESTNET) {\r\n    return Object.keys(mainnetTokens).reduce((accum, key) => {\r\n      return { ...accum, [key]: testnetTokens[key] || mainnetTokens[key] }\r\n    }, {})\r\n  }\r\n\r\n  return mainnetTokens\r\n}\r\n\r\nexport const serializeTokens = (): SerializedTokenList => {\r\n  const unserializedTokens = tokens()\r\n  const serializedTokens = Object.keys(unserializedTokens).reduce((accum, key) => {\r\n    return { ...accum, [key]: serializeToken(unserializedTokens[key]) }\r\n  }, {})\r\n\r\n  return serializedTokens\r\n}\r\n\r\nexport default tokens()\r\n","export default {\r\n  masterChef: {\r\n    97: '0x1d32c2945C8FDCBc7156c553B7cEa4325a17f4f9',\r\n    56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  },\r\n  sousChef: {\r\n    97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n    56: '0x6ab8463a4185b80905e05a9ff80a2d6b714b9e95',\r\n  },\r\n  lotteryV2: {\r\n    // @ts-ignore\r\n    97: window.SO_LotteryConfig.contract,\r\n    // @ts-ignore\r\n    56: window.SO_LotteryConfig.contract,\r\n  },\r\n  multiCall: {\r\n    1: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n    4: '0x42Ad527de7d4e9d9d011aC45B31D8551f8Fe9821',\r\n    5: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n    100: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n    77: '0x2D0Cf59485baa2A105541b9bf850E06C071AFab8',\r\n    137: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\r\n    80001: '0x6aa1bdc159e28beca44cc7f1a260a25e7b63f53d',\r\n    56: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9', //'0xfF6FD90A470Aaa0c1B8A54681746b07AcdFedc9B',\r\n    97: '0xe348b292e8eA5FAB54340656f3D374b259D658b8', //'0x8F3273Fb89B075b1645095ABaC6ed17B2d4Bc576',\r\n    42161: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n    421611: '0xf27ee99622c3c9b264583dacb2cce056e194494f',\r\n    250: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\r\n    25: '0x88f9B139B70a9083C27430EBb64099fdf9e29e78',\r\n    336: '0x1763d5e86452Ed9C13b874fDe60A0669D11C5d40',\r\n    10001: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n    420420: '0xaE6d9d48954491B8bfd8ec367Dc5E05065689281',\r\n    103090: '0xaE6d9d48954491B8bfd8ec367Dc5E05065689281', // also for keckchain\r\n    1442: '0x48d7ac38530697aDB91061B6D141C8c763edE565', // Polygon zkEVM (testnet)\r\n    1101: '0x10DcBEe8afA39a847707e16Aea5eb34c6b01aBA9', // Polygon zkEVM (mainnet)\r\n  },\r\n  pancakeProfile: {\r\n    56: '0xDf4dBf6536201370F95e06A0F8a7a70fE40E388a',\r\n    97: '0x4B683C7E13B6d5D7fd1FeA9530F451954c1A7c8A',\r\n  },\r\n  pancakeRabbits: {\r\n    56: '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07',\r\n    97: '0x60935F36e4631F73f0f407e68642144e07aC7f5E',\r\n  },\r\n  bunnyFactory: {\r\n    56: '0xfa249Caa1D16f75fa159F7DFBAc0cC5EaB48CeFf',\r\n    97: '0x707CBF373175fdB601D34eeBF2Cf665d08f01148',\r\n  },\r\n  claimRefund: {\r\n    56: '0xE7e53A7e9E3Cf6b840f167eF69519175c497e149',\r\n    97: '',\r\n  },\r\n  pointCenterIfo: {\r\n    56: '0x3C6919b132462C1FEc572c6300E83191f4F0012a',\r\n    97: '0xd2Ac1B1728Bb1C11ae02AB6e75B76Ae41A2997e3',\r\n  },\r\n  bunnySpecial: {\r\n    56: '0xFee8A195570a18461146F401d6033f5ab3380849',\r\n    97: '0x7b7b1583De1DeB32Ce6605F6deEbF24A0671c17C',\r\n  },\r\n  tradingCompetition: {\r\n    56: '0xd718baa0B1F4f70dcC8458154042120FFE0DEFFA',\r\n    97: '0xC787F45B833721ED3aC46E99b703B3E1E01abb97',\r\n  },\r\n  easterNft: {\r\n    56: '0x23c41D28A239dDCAABd1bb1deF8d057189510066',\r\n    97: '0x24ec6962dbe874F6B67B5C50857565667fA0854F',\r\n  },\r\n  cakeVault: {\r\n    56: '0xa80240Eb5d7E05d3F250cF000eEc0891d00b51CC',\r\n    97: '',\r\n  },\r\n  predictions: {\r\n    56: '0x18B2A687610328590Bc8F2e5fEdDe3b582A49cdA',\r\n    97: '',\r\n  },\r\n  chainlinkOracle: {\r\n    56: '0xD276fCF34D54A926773c399eBAa772C12ec394aC',\r\n    97: '',\r\n  },\r\n  bunnySpecialCakeVault: {\r\n    56: '0x5B4a770Abe7Eafb2601CA4dF9d73EA99363E60a4',\r\n    97: '',\r\n  },\r\n  bunnySpecialPrediction: {\r\n    56: '0x342c99e9aC24157657095eC69CB04b73257e7A9C',\r\n    97: '',\r\n  },\r\n  bunnySpecialLottery: {\r\n    56: '0x24ED31d31C5868e5a96aA77fdcB890f3511fa0b2',\r\n    97: '0x382cB497110F398F0f152cae82821476AE51c9cF',\r\n  },\r\n  farmAuction: {\r\n    56: '0xb92Ab7c1edcb273AbA24b0656cEb3681654805D2',\r\n    97: '0x3F9602593b4f7C67ab045DB51BbDEa94E40fA9Fe',\r\n  },\r\n  AnniversaryAchievement: {\r\n    56: '0x787980da5491118C3cB33B21aB50c8c379D2C552',\r\n    97: '0x981aE96378e770DE44F89cD9175E708f9EDB70a9',\r\n  },\r\n  nftMarket: {\r\n    56: '0x17539cCa21C7933Df5c980172d22659B8C345C5A',\r\n    97: '0x7f9f37ddcaa33893f9beb3d8748c8d6bfbde6ab2',\r\n  },\r\n  nftSale: {\r\n    56: '0x29fE7148636b7Ae0b1E53777b28dfbaA9327af8E',\r\n    97: '0xe486De509c5381cbdBF3e71F57D7F1f7570f5c46',\r\n  },\r\n  pancakeSquad: {\r\n    56: '0x0a8901b0E25DEb55A87524f0cC164E9644020EBA',\r\n    97: '0xfC0c3F11fDA72Cb9A56F28Ec8D44C0ae4B3ABF86',\r\n  },\r\n}\r\n","import { ChainId } from '@pancakeswap/sdk'\r\nimport addresses from 'config/constants/contracts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport const getAddress = (address: Address): string => {\r\n  // @ts-ignore\r\n  const chainId = parseInt(window.SO_LotteryConfig.chainId, 10)\r\n  return address[chainId] ? address[chainId] : address[ChainId.MAINNET]\r\n}\r\n\r\nexport const getMasterChefAddress = () => {\r\n  return getAddress(addresses.masterChef)\r\n}\r\nexport const getMulticallAddress = () => {\r\n  // @ts-ignore\r\n  //return window.SO_LotteryConfig.contract\r\n  return getAddress(addresses.multiCall)\r\n}\r\nexport const getLotteryV2Address = () => {\r\n  // @ts-ignore\r\n  return window.SO_LotteryConfig.contract\r\n  return getAddress(addresses.lotteryV2)\r\n}\r\nexport const getPancakeProfileAddress = () => {\r\n  return getAddress(addresses.pancakeProfile)\r\n}\r\nexport const getPancakeRabbitsAddress = () => {\r\n  return getAddress(addresses.pancakeRabbits)\r\n}\r\nexport const getBunnyFactoryAddress = () => {\r\n  return getAddress(addresses.bunnyFactory)\r\n}\r\nexport const getClaimRefundAddress = () => {\r\n  return getAddress(addresses.claimRefund)\r\n}\r\nexport const getPointCenterIfoAddress = () => {\r\n  return getAddress(addresses.pointCenterIfo)\r\n}\r\nexport const getBunnySpecialAddress = () => {\r\n  return getAddress(addresses.bunnySpecial)\r\n}\r\nexport const getTradingCompetitionAddress = () => {\r\n  return getAddress(addresses.tradingCompetition)\r\n}\r\nexport const getEasterNftAddress = () => {\r\n  return getAddress(addresses.easterNft)\r\n}\r\nexport const getCakeVaultAddress = () => {\r\n  return getAddress(addresses.cakeVault)\r\n}\r\nexport const getPredictionsAddress = () => {\r\n  return getAddress(addresses.predictions)\r\n}\r\nexport const getChainlinkOracleAddress = () => {\r\n  return getAddress(addresses.chainlinkOracle)\r\n}\r\nexport const getBunnySpecialCakeVaultAddress = () => {\r\n  return getAddress(addresses.bunnySpecialCakeVault)\r\n}\r\nexport const getBunnySpecialPredictionAddress = () => {\r\n  return getAddress(addresses.bunnySpecialPrediction)\r\n}\r\nexport const getBunnySpecialLotteryAddress = () => {\r\n  return getAddress(addresses.bunnySpecialLottery)\r\n}\r\nexport const getFarmAuctionAddress = () => {\r\n  return getAddress(addresses.farmAuction)\r\n}\r\nexport const getAnniversaryAchievement = () => {\r\n  return getAddress(addresses.AnniversaryAchievement)\r\n}\r\nexport const getNftMarketAddress = () => {\r\n  return getAddress(addresses.nftMarket)\r\n}\r\nexport const getNftSaleAddress = () => {\r\n  return getAddress(addresses.nftSale)\r\n}\r\nexport const getPancakeSquadAddress = () => {\r\n  return getAddress(addresses.pancakeSquad)\r\n}\r\n","import { ChainId, Pair, Token } from '@pancakeswap/sdk'\r\nimport flatMap from 'lodash/flatMap'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from 'config/constants'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useAllTokens } from 'hooks/Tokens'\r\nimport { AppDispatch, AppState } from '../../index'\r\nimport {\r\n  addSerializedPair,\r\n  addSerializedToken,\r\n  FarmStakedOnly,\r\n  muteAudio,\r\n  removeSerializedToken,\r\n  SerializedPair,\r\n  toggleTheme as toggleThemeAction,\r\n  unmuteAudio,\r\n  updateUserDeadline,\r\n  updateUserExpertMode,\r\n  updateUserFarmStakedOnly,\r\n  updateUserSingleHopOnly,\r\n  updateUserSlippageTolerance,\r\n  updateGasPrice,\r\n  addWatchlistToken,\r\n  addWatchlistPool,\r\n  updateUserPoolStakedOnly,\r\n  updateUserPoolsViewMode,\r\n  ViewMode,\r\n  updateUserFarmsViewMode,\r\n  updateUserPredictionChartDisclaimerShow,\r\n  updateUserPredictionAcceptedRisk,\r\n  updateUserUsernameVisibility,\r\n  updateUserExpertModeAcknowledgementShow,\r\n  hidePhishingWarningBanner,\r\n  setIsExchangeChartDisplayed,\r\n} from '../actions'\r\nimport { deserializeToken, GAS_PRICE_GWEI, serializeToken } from './helpers'\r\n\r\nexport function useAudioModeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const audioPlay = useSelector<AppState, AppState['user']['audioPlay']>((state) => state.user.audioPlay)\r\n\r\n  const toggleSetAudioMode = useCallback(() => {\r\n    if (audioPlay) {\r\n      dispatch(muteAudio())\r\n    } else {\r\n      dispatch(unmuteAudio())\r\n    }\r\n  }, [audioPlay, dispatch])\r\n\r\n  return [audioPlay, toggleSetAudioMode]\r\n}\r\n\r\nexport function usePhishingBannerManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const showPhishingWarningBanner = useSelector<AppState, AppState['user']['showPhishingWarningBanner']>(\r\n    (state) => state.user.showPhishingWarningBanner,\r\n  )\r\n\r\n  const hideBanner = useCallback(() => {\r\n    dispatch(hidePhishingWarningBanner())\r\n  }, [dispatch])\r\n\r\n  return [showPhishingWarningBanner, hideBanner]\r\n}\r\n\r\n// Get user preference for exchange price chart\r\n// For mobile layout chart is hidden by default\r\nexport function useExchangeChartManager(isMobile: boolean): [boolean, (isDisplayed: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const isChartDisplayed = useSelector<AppState, AppState['user']['isExchangeChartDisplayed']>(\r\n    (state) => state.user.isExchangeChartDisplayed,\r\n  )\r\n\r\n  const setUserChartPreference = useCallback(\r\n    (isDisplayed: boolean) => {\r\n      dispatch(setIsExchangeChartDisplayed(isDisplayed))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [isMobile ? false : isChartDisplayed, setUserChartPreference]\r\n}\r\n\r\nexport function useIsExpertMode(): boolean {\r\n  return useSelector<AppState, AppState['user']['userExpertMode']>((state) => state.user.userExpertMode)\r\n}\r\n\r\nexport function useExpertModeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const expertMode = useIsExpertMode()\r\n\r\n  const toggleSetExpertMode = useCallback(() => {\r\n    dispatch(updateUserExpertMode({ userExpertMode: !expertMode }))\r\n  }, [expertMode, dispatch])\r\n\r\n  return [expertMode, toggleSetExpertMode]\r\n}\r\n\r\nexport function useThemeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const isDark = useSelector<AppState, AppState['user']['isDark']>((state) => state.user.isDark)\r\n\r\n  const toggleTheme = useCallback(() => {\r\n    dispatch(toggleThemeAction())\r\n  }, [dispatch])\r\n\r\n  return [isDark, toggleTheme]\r\n}\r\n\r\nexport function useUserSingleHopOnly(): [boolean, (newSingleHopOnly: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const singleHopOnly = useSelector<AppState, AppState['user']['userSingleHopOnly']>(\r\n    (state) => state.user.userSingleHopOnly,\r\n  )\r\n\r\n  const setSingleHopOnly = useCallback(\r\n    (newSingleHopOnly: boolean) => {\r\n      dispatch(updateUserSingleHopOnly({ userSingleHopOnly: newSingleHopOnly }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [singleHopOnly, setSingleHopOnly]\r\n}\r\n\r\nexport function useUserSlippageTolerance(): [number, (slippage: number) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userSlippageTolerance = useSelector<AppState, AppState['user']['userSlippageTolerance']>((state) => {\r\n    return state.user.userSlippageTolerance\r\n  })\r\n\r\n  const setUserSlippageTolerance = useCallback(\r\n    (slippage: number) => {\r\n      dispatch(updateUserSlippageTolerance({ userSlippageTolerance: slippage }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userSlippageTolerance, setUserSlippageTolerance]\r\n}\r\n\r\nexport function useUserFarmStakedOnly(isActive: boolean): [boolean, (stakedOnly: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userFarmStakedOnly = useSelector<AppState, AppState['user']['userFarmStakedOnly']>((state) => {\r\n    return state.user.userFarmStakedOnly\r\n  })\r\n\r\n  const setUserFarmStakedOnly = useCallback(\r\n    (stakedOnly: boolean) => {\r\n      const farmStakedOnly = stakedOnly ? FarmStakedOnly.TRUE : FarmStakedOnly.FALSE\r\n      dispatch(updateUserFarmStakedOnly({ userFarmStakedOnly: farmStakedOnly }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [\r\n    userFarmStakedOnly === FarmStakedOnly.ON_FINISHED ? !isActive : userFarmStakedOnly === FarmStakedOnly.TRUE,\r\n    setUserFarmStakedOnly,\r\n  ]\r\n}\r\n\r\nexport function useUserPoolStakedOnly(): [boolean, (stakedOnly: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userPoolStakedOnly = useSelector<AppState, AppState['user']['userPoolStakedOnly']>((state) => {\r\n    return state.user.userPoolStakedOnly\r\n  })\r\n\r\n  const setUserPoolStakedOnly = useCallback(\r\n    (stakedOnly: boolean) => {\r\n      dispatch(updateUserPoolStakedOnly({ userPoolStakedOnly: stakedOnly }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userPoolStakedOnly, setUserPoolStakedOnly]\r\n}\r\n\r\nexport function useUserPoolsViewMode(): [ViewMode, (viewMode: ViewMode) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userPoolsViewMode = useSelector<AppState, AppState['user']['userPoolsViewMode']>((state) => {\r\n    return state.user.userPoolsViewMode\r\n  })\r\n\r\n  const setUserPoolsViewMode = useCallback(\r\n    (viewMode: ViewMode) => {\r\n      dispatch(updateUserPoolsViewMode({ userPoolsViewMode: viewMode }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userPoolsViewMode, setUserPoolsViewMode]\r\n}\r\n\r\nexport function useUserFarmsViewMode(): [ViewMode, (viewMode: ViewMode) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userFarmsViewMode = useSelector<AppState, AppState['user']['userFarmsViewMode']>((state) => {\r\n    return state.user.userFarmsViewMode\r\n  })\r\n\r\n  const setUserFarmsViewMode = useCallback(\r\n    (viewMode: ViewMode) => {\r\n      dispatch(updateUserFarmsViewMode({ userFarmsViewMode: viewMode }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userFarmsViewMode, setUserFarmsViewMode]\r\n}\r\n\r\nexport function useUserPredictionAcceptedRisk(): [boolean, (acceptedRisk: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userPredictionAcceptedRisk = useSelector<AppState, AppState['user']['userPredictionAcceptedRisk']>((state) => {\r\n    return state.user.userPredictionAcceptedRisk\r\n  })\r\n\r\n  const setUserPredictionAcceptedRisk = useCallback(\r\n    (acceptedRisk: boolean) => {\r\n      dispatch(updateUserPredictionAcceptedRisk({ userAcceptedRisk: acceptedRisk }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userPredictionAcceptedRisk, setUserPredictionAcceptedRisk]\r\n}\r\n\r\nexport function useUserPredictionChartDisclaimerShow(): [boolean, (showDisclaimer: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userPredictionChartDisclaimerShow = useSelector<\r\n    AppState,\r\n    AppState['user']['userPredictionChartDisclaimerShow']\r\n  >((state) => {\r\n    return state.user.userPredictionChartDisclaimerShow\r\n  })\r\n\r\n  const setPredictionUserChartDisclaimerShow = useCallback(\r\n    (showDisclaimer: boolean) => {\r\n      dispatch(updateUserPredictionChartDisclaimerShow({ userShowDisclaimer: showDisclaimer }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userPredictionChartDisclaimerShow, setPredictionUserChartDisclaimerShow]\r\n}\r\n\r\nexport function useUserExpertModeAcknowledgementShow(): [boolean, (showAcknowledgement: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userExpertModeAcknowledgementShow = useSelector<\r\n    AppState,\r\n    AppState['user']['userExpertModeAcknowledgementShow']\r\n  >((state) => {\r\n    return state.user.userExpertModeAcknowledgementShow\r\n  })\r\n\r\n  const setUserExpertModeAcknowledgementShow = useCallback(\r\n    (showAcknowledgement: boolean) => {\r\n      dispatch(updateUserExpertModeAcknowledgementShow({ userExpertModeAcknowledgementShow: showAcknowledgement }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userExpertModeAcknowledgementShow, setUserExpertModeAcknowledgementShow]\r\n}\r\n\r\nexport function useUserUsernameVisibility(): [boolean, (usernameVisibility: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userUsernameVisibility = useSelector<AppState, AppState['user']['userUsernameVisibility']>((state) => {\r\n    return state.user.userUsernameVisibility\r\n  })\r\n\r\n  const setUserUsernameVisibility = useCallback(\r\n    (usernameVisibility: boolean) => {\r\n      dispatch(updateUserUsernameVisibility({ userUsernameVisibility: usernameVisibility }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userUsernameVisibility, setUserUsernameVisibility]\r\n}\r\n\r\nexport function useUserTransactionTTL(): [number, (slippage: number) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userDeadline = useSelector<AppState, AppState['user']['userDeadline']>((state) => {\r\n    return state.user.userDeadline\r\n  })\r\n\r\n  const setUserDeadline = useCallback(\r\n    (deadline: number) => {\r\n      dispatch(updateUserDeadline({ userDeadline: deadline }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userDeadline, setUserDeadline]\r\n}\r\n\r\nexport function useAddUserToken(): (token: Token) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback(\r\n    (token: Token) => {\r\n      dispatch(addSerializedToken({ serializedToken: serializeToken(token) }))\r\n    },\r\n    [dispatch],\r\n  )\r\n}\r\n\r\nexport function useRemoveUserAddedToken(): (chainId: number, address: string) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback(\r\n    (chainId: number, address: string) => {\r\n      dispatch(removeSerializedToken({ chainId, address }))\r\n    },\r\n    [dispatch],\r\n  )\r\n}\r\n\r\nexport function useGasPrice(): string {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const userGas = useSelector<AppState, AppState['user']['gasPrice']>((state) => state.user.gasPrice)\r\n  return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet\r\n}\r\n\r\nexport function useGasPriceManager(): [string, (userGasPrice: string) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userGasPrice = useGasPrice()\r\n\r\n  const setGasPrice = useCallback(\r\n    (gasPrice: string) => {\r\n      dispatch(updateGasPrice({ gasPrice }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userGasPrice, setGasPrice]\r\n}\r\n\r\nfunction serializePair(pair: Pair): SerializedPair {\r\n  return {\r\n    token0: serializeToken(pair.token0),\r\n    token1: serializeToken(pair.token1),\r\n  }\r\n}\r\n\r\nexport function usePairAdder(): (pair: Pair) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  return useCallback(\r\n    (pair: Pair) => {\r\n      dispatch(addSerializedPair({ serializedPair: serializePair(pair) }))\r\n    },\r\n    [dispatch],\r\n  )\r\n}\r\n\r\n/**\r\n * Given two tokens return the liquidity token that represents its liquidity shares\r\n * @param tokenA one of the two tokens\r\n * @param tokenB the other token\r\n */\r\nexport function toV2LiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\r\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'Cake-LP', 'Pancake LPs')\r\n}\r\n\r\n/**\r\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\r\n */\r\nexport function useTrackedTokenPairs(): [Token, Token][] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const tokens = useAllTokens()\r\n\r\n  // pinned pairs\r\n  const pinnedPairs = useMemo(() => (chainId ? PINNED_PAIRS[chainId] ?? [] : []), [chainId])\r\n\r\n  // pairs for every token against every base\r\n  const generatedPairs: [Token, Token][] = useMemo(\r\n    () =>\r\n      chainId\r\n        ? flatMap(Object.keys(tokens), (tokenAddress) => {\r\n            const token = tokens[tokenAddress]\r\n            // for each token on the current chain,\r\n            return (\r\n              // loop though all bases on the current chain\r\n              (BASES_TO_TRACK_LIQUIDITY_FOR[chainId] ?? [])\r\n                // to construct pairs of the given token with each base\r\n                .map((base) => {\r\n                  if (base.address === token.address) {\r\n                    return null\r\n                  }\r\n                  return [base, token]\r\n                })\r\n                .filter((p): p is [Token, Token] => p !== null)\r\n            )\r\n          })\r\n        : [],\r\n    [tokens, chainId],\r\n  )\r\n\r\n  // pairs saved by users\r\n  const savedSerializedPairs = useSelector<AppState, AppState['user']['pairs']>(({ user: { pairs } }) => pairs)\r\n\r\n  const userPairs: [Token, Token][] = useMemo(() => {\r\n    if (!chainId || !savedSerializedPairs) return []\r\n    const forChain = savedSerializedPairs[chainId]\r\n    if (!forChain) return []\r\n\r\n    return Object.keys(forChain).map((pairId) => {\r\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)]\r\n    })\r\n  }, [savedSerializedPairs, chainId])\r\n\r\n  const combinedList = useMemo(\r\n    () => userPairs.concat(generatedPairs).concat(pinnedPairs),\r\n    [generatedPairs, pinnedPairs, userPairs],\r\n  )\r\n\r\n  return useMemo(() => {\r\n    // dedupes pairs of tokens in the combined list\r\n    const keyed = combinedList.reduce<{ [key: string]: [Token, Token] }>((memo, [tokenA, tokenB]) => {\r\n      const sorted = tokenA.sortsBefore(tokenB)\r\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`\r\n      if (memo[key]) return memo\r\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA]\r\n      return memo\r\n    }, {})\r\n\r\n    return Object.keys(keyed).map((key) => keyed[key])\r\n  }, [combinedList])\r\n}\r\n\r\nexport const useWatchlistTokens = (): [string[], (address: string) => void] => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const savedTokens = useSelector((state: AppState) => state.user.watchlistTokens) ?? []\r\n  const updatedSavedTokens = useCallback(\r\n    (address: string) => {\r\n      dispatch(addWatchlistToken({ address }))\r\n    },\r\n    [dispatch],\r\n  )\r\n  return [savedTokens, updatedSavedTokens]\r\n}\r\n\r\nexport const useWatchlistPools = (): [string[], (address: string) => void] => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const savedPools = useSelector((state: AppState) => state.user.watchlistPools) ?? []\r\n  const updateSavedPools = useCallback(\r\n    (address: string) => {\r\n      dispatch(addWatchlistPool({ address }))\r\n    },\r\n    [dispatch],\r\n  )\r\n  return [savedPools, updateSavedPools]\r\n}\r\n","/* tslint:disable */\r\nimport { ChainId, Token } from '@pancakeswap/sdk'\r\nimport { serializeToken } from 'state/user/hooks/helpers'\r\nimport { SerializedToken } from './types'\r\n\r\nconst { MAINNET, TESTNET } = ChainId\r\n\r\ninterface TokenList {\r\n  [symbol: string]: Token\r\n}\r\n\r\ninterface SerializedTokenList {\r\n  [symbol: string]: SerializedToken\r\n}\r\n\r\ninterface TokenInfo {\r\n  address: string\r\n  symbol: string\r\n  title: string\r\n  decimals: number\r\n  viewDecimals: number\r\n  price: number | false\r\n}\r\n\r\nexport const mainnetTokens = {\r\n  cake: new Token(\r\n    MAINNET,\r\n    '0x703f112bda4cc6cb9c5fb4b2e6140f6d8374f10b',\r\n    18,\r\n    'CAKE',\r\n    'PancakeSwap Token',\r\n    'https://pancakeswap.finance/',\r\n  ),\r\n}\r\n\r\nexport const testnetTokens = {\r\n  cake: new Token(\r\n    TESTNET,\r\n    '0x703f112bda4cc6cb9c5fb4b2e6140f6d8374f10b',\r\n    18,\r\n    'CAKE',\r\n    'PancakeSwap Token',\r\n    'https://pancakeswap.finance/',\r\n  ),\r\n}\r\n\r\nexport const info = (): TokenInfo => {\r\n  const {\r\n    chainId,\r\n    token: {\r\n      symbol,\r\n      address,\r\n      decimals,\r\n      viewDecimals,\r\n      title,\r\n      price,\r\n    },\r\n  } = window.SO_LotteryConfig\r\n  return {\r\n    address,\r\n    symbol,\r\n    title,\r\n    decimals,\r\n    viewDecimals: (viewDecimals !== undefined) ? viewDecimals : 2,\r\n    price: price || false\r\n  }\r\n}\r\n\r\nconst tokens = (): TokenList => {\r\n  const tokensList: TokenList = {}\r\n  const {\r\n    chainId,\r\n    token: {\r\n      symbol,\r\n      address,\r\n      decimals,\r\n      title\r\n    },\r\n  } = window.SO_LotteryConfig\r\n\r\n  tokensList.cake = new Token(\r\n    chainId,\r\n    address,\r\n    decimals,\r\n    symbol,\r\n    title,\r\n    ''\r\n  )\r\n\r\n  return tokensList\r\n}\r\n\r\n\r\nexport const serializeTokens = (): SerializedTokenList => {\r\n  const unserializedTokens = tokens()\r\n  const serializedTokens = Object.keys(unserializedTokens).reduce((accum, key) => {\r\n    return { ...accum, [key]: serializeToken(unserializedTokens[key]) }\r\n  }, {})\r\n\r\n  return serializedTokens\r\n}\r\n\r\nexport default tokens()\r\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { LotteryTicket, LotteryStatus } from 'config/constants/types'\r\nimport { LotteryState, LotteryRoundGraphEntity, LotteryUserGraphEntity, LotteryResponse } from 'state/types'\r\nimport { fetchLottery, fetchCurrentLotteryIdAndMaxBuy } from './helpers'\r\nimport getLotteriesData from './getLotteriesData'\r\nimport getUserLotteryData, { getGraphLotteryUser } from './getUserLotteryData'\r\n\r\ninterface PublicLotteryData {\r\n  currentLotteryId: string\r\n  maxNumberTicketsPerBuyOrClaim: string\r\n}\r\n\r\nconst initialState: LotteryState = {\r\n  currentLotteryId: null,\r\n  isTransitioning: false,\r\n  maxNumberTicketsPerBuyOrClaim: null,\r\n  currentRound: {\r\n    isLoading: true,\r\n    lotteryId: null,\r\n    status: LotteryStatus.PENDING,\r\n    startTime: '',\r\n    endTime: '',\r\n    priceTicketInCake: '',\r\n    discountDivisor: '',\r\n    treasuryFee: '',\r\n    firstTicketId: '',\r\n    lastTicketId: '',\r\n    amountCollectedInCake: '',\r\n    finalNumber: null,\r\n    cakePerBracket: [],\r\n    countWinnersPerBracket: [],\r\n    rewardsBreakdown: [],\r\n    userTickets: {\r\n      isLoading: true,\r\n      tickets: [],\r\n    },\r\n  },\r\n  lotteriesData: null,\r\n  userLotteryData: { account: '', totalCake: '', totalTickets: '', rounds: [] },\r\n}\r\n\r\nexport const fetchCurrentLottery = createAsyncThunk<LotteryResponse, { currentLotteryId: string }>(\r\n  'lottery/fetchCurrentLottery',\r\n  async ({ currentLotteryId }) => {\r\n    const lotteryInfo = await fetchLottery(currentLotteryId)\r\n    return lotteryInfo\r\n  },\r\n)\r\n\r\nexport const fetchCurrentLotteryId = createAsyncThunk<PublicLotteryData>('lottery/fetchCurrentLotteryId', async () => {\r\n  const currentIdAndMaxBuy = await fetchCurrentLotteryIdAndMaxBuy()\r\n  return currentIdAndMaxBuy\r\n})\r\n\r\nexport const fetchUserTicketsAndLotteries = createAsyncThunk<\r\n  { userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity },\r\n  { account: string; currentLotteryId: string }\r\n>('lottery/fetchUserTicketsAndLotteries', async ({ account, currentLotteryId }) => {\r\n  const userLotteriesRes = await getUserLotteryData(account, currentLotteryId)\r\n  const userParticipationInCurrentRound = userLotteriesRes.rounds?.find((round) => round.lotteryId === currentLotteryId)\r\n  const userTickets = userParticipationInCurrentRound?.tickets\r\n\r\n  // User has not bought tickets for the current lottery, or there has been an error\r\n  if (!userTickets || userTickets.length === 0) {\r\n    return { userTickets: null, userLotteries: userLotteriesRes }\r\n  }\r\n\r\n  return { userTickets, userLotteries: userLotteriesRes }\r\n})\r\n\r\nexport const fetchPublicLotteries = createAsyncThunk<LotteryRoundGraphEntity[], { currentLotteryId: string }>(\r\n  'lottery/fetchPublicLotteries',\r\n  async ({ currentLotteryId }) => {\r\n    const lotteries = await getLotteriesData(currentLotteryId)\r\n    return lotteries\r\n  },\r\n)\r\n\r\nexport const fetchUserLotteries = createAsyncThunk<\r\n  LotteryUserGraphEntity,\r\n  { account: string; currentLotteryId: string }\r\n>('lottery/fetchUserLotteries', async ({ account, currentLotteryId }) => {\r\n  const userLotteries = await getUserLotteryData(account, currentLotteryId)\r\n  return userLotteries\r\n})\r\n\r\nexport const fetchAdditionalUserLotteries = createAsyncThunk<\r\n  LotteryUserGraphEntity,\r\n  { account: string; skip?: number }\r\n>('lottery/fetchAdditionalUserLotteries', async ({ account, skip }) => {\r\n  const additionalUserLotteries = await getGraphLotteryUser(account, undefined, skip)\r\n  return additionalUserLotteries\r\n})\r\n\r\nexport const setLotteryIsTransitioning = createAsyncThunk<{ isTransitioning: boolean }, { isTransitioning: boolean }>(\r\n  `lottery/setIsTransitioning`,\r\n  async ({ isTransitioning }) => {\r\n    return { isTransitioning }\r\n  },\r\n)\r\n\r\nexport const LotterySlice = createSlice({\r\n  name: 'Lottery',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchCurrentLottery.fulfilled, (state, action: PayloadAction<LotteryResponse>) => {\r\n      state.currentRound = { ...state.currentRound, ...action.payload }\r\n    })\r\n    builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action: PayloadAction<PublicLotteryData>) => {\r\n      state.currentLotteryId = action.payload.currentLotteryId\r\n      state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim\r\n    })\r\n    builder.addCase(\r\n      fetchUserTicketsAndLotteries.fulfilled,\r\n      (state, action: PayloadAction<{ userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity }>) => {\r\n        state.currentRound.userTickets.isLoading = false\r\n        state.currentRound.userTickets.tickets = action.payload.userTickets\r\n        state.userLotteryData = action.payload.userLotteries\r\n      },\r\n    )\r\n    builder.addCase(fetchPublicLotteries.fulfilled, (state, action: PayloadAction<LotteryRoundGraphEntity[]>) => {\r\n      state.lotteriesData = action.payload\r\n    })\r\n    builder.addCase(fetchUserLotteries.fulfilled, (state, action: PayloadAction<LotteryUserGraphEntity>) => {\r\n      state.userLotteryData = action.payload\r\n    })\r\n    builder.addCase(fetchAdditionalUserLotteries.fulfilled, (state, action: PayloadAction<LotteryUserGraphEntity>) => {\r\n      const mergedRounds = [...state.userLotteryData.rounds, ...action.payload.rounds]\r\n      state.userLotteryData.rounds = mergedRounds\r\n    })\r\n    builder.addCase(\r\n      setLotteryIsTransitioning.fulfilled,\r\n      (state, action: PayloadAction<{ isTransitioning: boolean }>) => {\r\n        state.isTransitioning = action.payload.isTransitioning\r\n      },\r\n    )\r\n  },\r\n})\r\n\r\nexport default LotterySlice.reducer\r\n","import { useEffect, useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { deserializeToken } from 'state/user/hooks/helpers'\r\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.'\r\nimport { State, SerializedFarm, DeserializedFarmUserData, DeserializedFarm, DeserializedFarmsState } from '../types'\r\n\r\nconst deserializeFarmUserData = (farm: SerializedFarm): DeserializedFarmUserData => {\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\r\n  }\r\n}\r\n\r\nconst deserializeFarm = (farm: SerializedFarm): DeserializedFarm => {\r\n  const { lpAddresses, lpSymbol, pid, dual, multiplier, isCommunity, quoteTokenPriceBusd, tokenPriceBusd } = farm\r\n\r\n  return {\r\n    lpAddresses,\r\n    lpSymbol,\r\n    pid,\r\n    dual,\r\n    multiplier,\r\n    isCommunity,\r\n    quoteTokenPriceBusd,\r\n    tokenPriceBusd,\r\n    token: deserializeToken(farm.token),\r\n    quoteToken: deserializeToken(farm.quoteToken),\r\n    userData: deserializeFarmUserData(farm),\r\n    tokenAmountTotal: farm.tokenAmountTotal ? new BigNumber(farm.tokenAmountTotal) : BIG_ZERO,\r\n    lpTotalInQuoteToken: farm.lpTotalInQuoteToken ? new BigNumber(farm.lpTotalInQuoteToken) : BIG_ZERO,\r\n    lpTotalSupply: farm.lpTotalSupply ? new BigNumber(farm.lpTotalSupply) : BIG_ZERO,\r\n    tokenPriceVsQuote: farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO,\r\n    poolWeight: farm.poolWeight ? new BigNumber(farm.poolWeight) : BIG_ZERO,\r\n  }\r\n}\r\n\r\nexport const usePollFarmsPublicData = (includeArchive = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\r\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\r\n\r\n    dispatch(fetchFarmsPublicDataAsync(pids))\r\n  }, [includeArchive, dispatch, slowRefresh])\r\n}\r\n\r\nexport const usePollFarmsWithUserData = (includeArchive = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\r\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\r\n\r\n    dispatch(fetchFarmsPublicDataAsync(pids))\r\n\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\r\n    }\r\n  }, [includeArchive, dispatch, slowRefresh, account])\r\n}\r\n\r\n/**\r\n * Fetches the \"core\" farm data used globally\r\n * 251 = CAKE-BNB LP\r\n * 252 = BUSD-BNB LP\r\n */\r\nexport const usePollCoreFarmData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync([251, 252]))\r\n  }, [dispatch, fastRefresh])\r\n}\r\n\r\nexport const useFarms = (): DeserializedFarmsState => {\r\n  const farms = useSelector((state: State) => state.farms)\r\n  const deserializedFarmsData = farms.data.map(deserializeFarm)\r\n  const { loadArchivedFarmsData, userDataLoaded } = farms\r\n  return {\r\n    loadArchivedFarmsData,\r\n    userDataLoaded,\r\n    data: deserializedFarmsData,\r\n  }\r\n}\r\n\r\nexport const useFarmFromPid = (pid: number): DeserializedFarm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return deserializeFarm(farm)\r\n}\r\n\r\nexport const useFarmFromLpSymbol = (lpSymbol: string): DeserializedFarm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return deserializeFarm(farm)\r\n}\r\n\r\nexport const useFarmUser = (pid): DeserializedFarmUserData => {\r\n  const { userData } = useFarmFromPid(pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = userData\r\n  return {\r\n    allowance,\r\n    tokenBalance,\r\n    stakedBalance,\r\n    earnings,\r\n  }\r\n}\r\n\r\n// Return the base token price for a farm, from a given pid\r\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\r\n  const farm = useFarmFromPid(pid)\r\n  return farm && new BigNumber(farm.tokenPriceBusd)\r\n}\r\n\r\nexport const useLpTokenPrice = (symbol: string) => {\r\n  const farm = useFarmFromLpSymbol(symbol)\r\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\r\n  let lpTokenPrice = BIG_ZERO\r\n\r\n  if (farm.lpTotalSupply.gt(0) && farm.lpTotalInQuoteToken.gt(0)) {\r\n    // Total value of base token in LP\r\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\r\n    // Double it to get overall value in LP\r\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\r\n    // Divide total value of all tokens, by the number of LP tokens\r\n    const totalLpTokens = getBalanceAmount(farm.lpTotalSupply)\r\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\r\n  }\r\n\r\n  return lpTokenPrice\r\n}\r\n\r\n// /!\\ Deprecated , use the BUSD hook in /hooks\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  const cakeBnbFarm = useFarmFromPid(251)\r\n\r\n  const cakePriceBusdAsString = cakeBnbFarm.tokenPriceBusd\r\n\r\n  const cakePriceBusd = useMemo(() => {\r\n    return new BigNumber(cakePriceBusdAsString)\r\n  }, [cakePriceBusdAsString])\r\n\r\n  return cakePriceBusd\r\n}\r\n","import { ChainId, Token } from '@pancakeswap/sdk'\r\nimport { Tags, TokenInfo, TokenList } from '@uniswap/token-lists'\r\nimport { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { DEFAULT_LIST_OF_LISTS } from 'config/constants/lists'\r\nimport { AppState } from '../index'\r\nimport DEFAULT_TOKEN_LIST from '../../config/constants/tokenLists/pancake-default.tokenlist.json'\r\nimport { UNSUPPORTED_LIST_URLS } from '../../config/constants/lists'\r\nimport UNSUPPORTED_TOKEN_LIST from '../../config/constants/tokenLists/pancake-unsupported.tokenlist.json'\r\n\r\ntype TagDetails = Tags[keyof Tags]\r\nexport interface TagInfo extends TagDetails {\r\n  id: string\r\n}\r\n\r\n// use ordering of default list of lists to assign priority\r\nfunction sortByListPriority(urlA: string, urlB: string) {\r\n  const first = DEFAULT_LIST_OF_LISTS.includes(urlA) ? DEFAULT_LIST_OF_LISTS.indexOf(urlA) : Number.MAX_SAFE_INTEGER\r\n  const second = DEFAULT_LIST_OF_LISTS.includes(urlB) ? DEFAULT_LIST_OF_LISTS.indexOf(urlB) : Number.MAX_SAFE_INTEGER\r\n\r\n  // need reverse order to make sure mapping includes top priority last\r\n  if (first < second) return 1\r\n  if (first > second) return -1\r\n  return 0\r\n}\r\n\r\n/**\r\n * Token instances created from token info.\r\n */\r\nexport class WrappedTokenInfo extends Token {\r\n  public readonly tokenInfo: TokenInfo\r\n\r\n  public readonly tags: TagInfo[]\r\n\r\n  constructor(tokenInfo: TokenInfo, tags: TagInfo[]) {\r\n    super(tokenInfo.chainId, tokenInfo.address, tokenInfo.decimals, tokenInfo.symbol, tokenInfo.name)\r\n    this.tokenInfo = tokenInfo\r\n    this.tags = tags\r\n  }\r\n\r\n  public get logoURI(): string | undefined {\r\n    return this.tokenInfo.logoURI\r\n  }\r\n}\r\n\r\nexport type TokenAddressMap = Readonly<\r\n  { [chainId in ChainId]: Readonly<{ [tokenAddress: string]: { token: WrappedTokenInfo; list: TokenList } }> }\r\n>\r\n\r\n/**\r\n * An empty result, useful as a default.\r\n */\r\nconst EMPTY_LIST: TokenAddressMap = {\r\n  [ChainId.MAINNET]: {},\r\n  [ChainId.TESTNET]: {},\r\n}\r\n\r\nconst listCache: WeakMap<TokenList, TokenAddressMap> | null =\r\n  typeof WeakMap !== 'undefined' ? new WeakMap<TokenList, TokenAddressMap>() : null\r\n\r\nexport function listToTokenMap(list: TokenList): TokenAddressMap {\r\n  const result = listCache?.get(list)\r\n  if (result) return result\r\n\r\n  const map = list.tokens.reduce<TokenAddressMap>(\r\n    (tokenMap, tokenInfo) => {\r\n      const tags: TagInfo[] =\r\n        tokenInfo.tags\r\n          ?.map((tagId) => {\r\n            if (!list.tags?.[tagId]) return undefined\r\n            return { ...list.tags[tagId], id: tagId }\r\n          })\r\n          ?.filter((x): x is TagInfo => Boolean(x)) ?? []\r\n      const token = new WrappedTokenInfo(tokenInfo, tags)\r\n      if (tokenMap[token.chainId][token.address] !== undefined) throw Error('Duplicate tokens.')\r\n      return {\r\n        ...tokenMap,\r\n        [token.chainId]: {\r\n          ...tokenMap[token.chainId],\r\n          [token.address]: {\r\n            token,\r\n            list,\r\n          },\r\n        },\r\n      }\r\n    },\r\n    { ...EMPTY_LIST },\r\n  )\r\n  listCache?.set(list, map)\r\n  return map\r\n}\r\n\r\nexport function useAllLists(): {\r\n  readonly [url: string]: {\r\n    readonly current: TokenList | null\r\n    readonly pendingUpdate: TokenList | null\r\n    readonly loadingRequestId: string | null\r\n    readonly error: string | null\r\n  }\r\n} {\r\n  return useSelector<AppState, AppState['lists']['byUrl']>((state) => state.lists.byUrl)\r\n}\r\n\r\nfunction combineMaps(map1: TokenAddressMap, map2: TokenAddressMap): TokenAddressMap {\r\n  return {\r\n    [ChainId.MAINNET]: { ...map1[ChainId.MAINNET], ...map2[ChainId.MAINNET] },\r\n    [ChainId.TESTNET]: { ...map1[ChainId.TESTNET], ...map2[ChainId.TESTNET] },\r\n  }\r\n}\r\n\r\n// merge tokens contained within lists from urls\r\nfunction useCombinedTokenMapFromUrls(urls: string[] | undefined): TokenAddressMap {\r\n  const lists = useAllLists()\r\n\r\n  return useMemo(() => {\r\n    if (!urls) return EMPTY_LIST\r\n\r\n    return (\r\n      urls\r\n        .slice()\r\n        // sort by priority so top priority goes last\r\n        .sort(sortByListPriority)\r\n        .reduce((allTokens, currentUrl) => {\r\n          const current = lists[currentUrl]?.current\r\n          if (!current) return allTokens\r\n          try {\r\n            const newTokens = Object.assign(listToTokenMap(current))\r\n            return combineMaps(allTokens, newTokens)\r\n          } catch (error) {\r\n            console.error('Could not show token list due to error', error)\r\n            return allTokens\r\n          }\r\n        }, EMPTY_LIST)\r\n    )\r\n  }, [lists, urls])\r\n}\r\n\r\n// filter out unsupported lists\r\nexport function useActiveListUrls(): string[] | undefined {\r\n  return useSelector<AppState, AppState['lists']['activeListUrls']>((state) => state.lists.activeListUrls)?.filter(\r\n    (url) => !UNSUPPORTED_LIST_URLS.includes(url),\r\n  )\r\n}\r\n\r\nexport function useInactiveListUrls(): string[] {\r\n  const lists = useAllLists()\r\n  const allActiveListUrls = useActiveListUrls()\r\n  return Object.keys(lists).filter((url) => !allActiveListUrls?.includes(url) && !UNSUPPORTED_LIST_URLS.includes(url))\r\n}\r\n\r\n// get all the tokens from active lists, combine with local default tokens\r\nexport function useCombinedActiveList(): TokenAddressMap {\r\n  const activeListUrls = useActiveListUrls()\r\n  const activeTokens = useCombinedTokenMapFromUrls(activeListUrls)\r\n  const defaultTokenMap = listToTokenMap(DEFAULT_TOKEN_LIST)\r\n  return combineMaps(activeTokens, defaultTokenMap)\r\n}\r\n\r\n// all tokens from inactive lists\r\nexport function useCombinedInactiveList(): TokenAddressMap {\r\n  const allInactiveListUrls: string[] = useInactiveListUrls()\r\n  return useCombinedTokenMapFromUrls(allInactiveListUrls)\r\n}\r\n\r\n// used to hide warnings on import for default tokens\r\nexport function useDefaultTokenList(): TokenAddressMap {\r\n  return listToTokenMap(DEFAULT_TOKEN_LIST)\r\n}\r\n\r\n// list of tokens not supported on interface, used to show warnings and prevent swaps and adds\r\nexport function useUnsupportedTokenList(): TokenAddressMap {\r\n  // get hard coded unsupported tokens\r\n  const localUnsupportedListMap = listToTokenMap(UNSUPPORTED_TOKEN_LIST)\r\n\r\n  // get any loaded unsupported tokens\r\n  const loadedUnsupportedListMap = useCombinedTokenMapFromUrls(UNSUPPORTED_LIST_URLS)\r\n\r\n  // format into one token address map\r\n  return combineMaps(localUnsupportedListMap, loadedUnsupportedListMap)\r\n}\r\n\r\nexport function useIsListActive(url: string): boolean {\r\n  const activeListUrls = useActiveListUrls()\r\n  return Boolean(activeListUrls?.includes(url))\r\n}\r\n","import { useMemo } from 'react'\r\nimport { ChainId, Token } from '@pancakeswap/sdk'\r\nimport { useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { AppState } from '../../index'\r\nimport { deserializeToken } from './helpers'\r\n\r\nexport default function useUserAddedTokens(): Token[] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const serializedTokensMap = useSelector<AppState, AppState['user']['tokens']>(({ user: { tokens } }) => tokens)\r\n\r\n  return useMemo(() => {\r\n    if (!chainId) return []\r\n    return Object.values(serializedTokensMap?.[chainId as ChainId] ?? {}).map(deserializeToken)\r\n  }, [serializedTokensMap, chainId])\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { parseBytes32String } from '@ethersproject/strings'\r\nimport { Currency, ETHER, Token, currencyEquals } from '@pancakeswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { arrayify } from 'ethers/lib/utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport {\r\n  TokenAddressMap,\r\n  useDefaultTokenList,\r\n  useUnsupportedTokenList,\r\n  useCombinedActiveList,\r\n  useCombinedInactiveList,\r\n} from '../state/lists/hooks'\r\n\r\nimport { NEVER_RELOAD, useSingleCallResult } from '../state/multicall/hooks'\r\nimport useUserAddedTokens from '../state/user/hooks/useUserAddedTokens'\r\nimport { isAddress } from '../utils'\r\n\r\nimport { useBytes32TokenContract, useTokenContract } from './useContract'\r\nimport { filterTokens } from '../components/SearchModal/filtering'\r\n\r\n// reduce token map into standard address <-> Token mapping, optionally include user added tokens\r\nfunction useTokensFromMap(tokenMap: TokenAddressMap, includeUserAdded: boolean): { [address: string]: Token } {\r\n  const { chainId } = useActiveWeb3React()\r\n  const userAddedTokens = useUserAddedTokens()\r\n\r\n  return useMemo(() => {\r\n    if (!chainId) return {}\r\n\r\n    // reduce to just tokens\r\n    const mapWithoutUrls = Object.keys(tokenMap[chainId]).reduce<{ [address: string]: Token }>((newMap, address) => {\r\n      newMap[address] = tokenMap[chainId][address].token\r\n      return newMap\r\n    }, {})\r\n\r\n    if (includeUserAdded) {\r\n      return (\r\n        userAddedTokens\r\n          // reduce into all ALL_TOKENS filtered by the current chain\r\n          .reduce<{ [address: string]: Token }>(\r\n            (tokenMap_, token) => {\r\n              tokenMap_[token.address] = token\r\n              return tokenMap_\r\n            },\r\n            // must make a copy because reduce modifies the map, and we do not\r\n            // want to make a copy in every iteration\r\n            { ...mapWithoutUrls },\r\n          )\r\n      )\r\n    }\r\n\r\n    return mapWithoutUrls\r\n  }, [chainId, userAddedTokens, tokenMap, includeUserAdded])\r\n}\r\n\r\nexport function useDefaultTokens(): { [address: string]: Token } {\r\n  const defaultList = useDefaultTokenList()\r\n  return useTokensFromMap(defaultList, false)\r\n}\r\n\r\nexport function useAllTokens(): { [address: string]: Token } {\r\n  const allTokens = useCombinedActiveList()\r\n  return useTokensFromMap(allTokens, true)\r\n}\r\n\r\nexport function useAllInactiveTokens(): { [address: string]: Token } {\r\n  // get inactive tokens\r\n  const inactiveTokensMap = useCombinedInactiveList()\r\n  const inactiveTokens = useTokensFromMap(inactiveTokensMap, false)\r\n\r\n  // filter out any token that are on active list\r\n  const activeTokensAddresses = Object.keys(useAllTokens())\r\n  const filteredInactive = activeTokensAddresses\r\n    ? Object.keys(inactiveTokens).reduce<{ [address: string]: Token }>((newMap, address) => {\r\n        if (!activeTokensAddresses.includes(address)) {\r\n          newMap[address] = inactiveTokens[address]\r\n        }\r\n        return newMap\r\n      }, {})\r\n    : inactiveTokens\r\n\r\n  return filteredInactive\r\n}\r\n\r\nexport function useUnsupportedTokens(): { [address: string]: Token } {\r\n  const unsupportedTokensMap = useUnsupportedTokenList()\r\n  return useTokensFromMap(unsupportedTokensMap, false)\r\n}\r\n\r\nexport function useIsTokenActive(token: Token | undefined | null): boolean {\r\n  const activeTokens = useAllTokens()\r\n\r\n  if (!activeTokens || !token) {\r\n    return false\r\n  }\r\n\r\n  return !!activeTokens[token.address]\r\n}\r\n\r\n// used to detect extra search results\r\nexport function useFoundOnInactiveList(searchQuery: string): Token[] | undefined {\r\n  const { chainId } = useActiveWeb3React()\r\n  const inactiveTokens = useAllInactiveTokens()\r\n\r\n  return useMemo(() => {\r\n    if (!chainId || searchQuery === '') {\r\n      return undefined\r\n    }\r\n    const tokens = filterTokens(Object.values(inactiveTokens), searchQuery)\r\n    return tokens\r\n  }, [chainId, inactiveTokens, searchQuery])\r\n}\r\n\r\n// Check if currency is included in custom list from user storage\r\nexport function useIsUserAddedToken(currency: Currency | undefined | null): boolean {\r\n  const userAddedTokens = useUserAddedTokens()\r\n\r\n  if (!currency) {\r\n    return false\r\n  }\r\n\r\n  return !!userAddedTokens.find((token) => currencyEquals(currency, token))\r\n}\r\n\r\n// parse a name or symbol from a token response\r\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/\r\n\r\nfunction parseStringOrBytes32(str: string | undefined, bytes32: string | undefined, defaultValue: string): string {\r\n  return str && str.length > 0\r\n    ? str\r\n    : // need to check for proper bytes string and valid terminator\r\n    bytes32 && BYTES32_REGEX.test(bytes32) && arrayify(bytes32)[31] === 0\r\n    ? parseBytes32String(bytes32)\r\n    : defaultValue\r\n}\r\n\r\n// undefined if invalid or does not exist\r\n// null if loading\r\n// otherwise returns the token\r\nexport function useToken(tokenAddress?: string): Token | undefined | null {\r\n  const { chainId } = useActiveWeb3React()\r\n  const tokens = useAllTokens()\r\n\r\n  const address = isAddress(tokenAddress)\r\n\r\n  const tokenContract = useTokenContract(address || undefined, false)\r\n  const tokenContractBytes32 = useBytes32TokenContract(address || undefined, false)\r\n  const token: Token | undefined = address ? tokens[address] : undefined\r\n\r\n  const tokenName = useSingleCallResult(token ? undefined : tokenContract, 'name', undefined, NEVER_RELOAD)\r\n  const tokenNameBytes32 = useSingleCallResult(\r\n    token ? undefined : tokenContractBytes32,\r\n    'name',\r\n    undefined,\r\n    NEVER_RELOAD,\r\n  )\r\n  const symbol = useSingleCallResult(token ? undefined : tokenContract, 'symbol', undefined, NEVER_RELOAD)\r\n  const symbolBytes32 = useSingleCallResult(token ? undefined : tokenContractBytes32, 'symbol', undefined, NEVER_RELOAD)\r\n  const decimals = useSingleCallResult(token ? undefined : tokenContract, 'decimals', undefined, NEVER_RELOAD)\r\n\r\n  return useMemo(() => {\r\n    if (token) return token\r\n    if (!chainId || !address) return undefined\r\n    if (decimals.loading || symbol.loading || tokenName.loading) return null\r\n    if (decimals.result) {\r\n      return new Token(\r\n        chainId,\r\n        address,\r\n        decimals.result[0],\r\n        parseStringOrBytes32(symbol.result?.[0], symbolBytes32.result?.[0], 'UNKNOWN'),\r\n        parseStringOrBytes32(tokenName.result?.[0], tokenNameBytes32.result?.[0], 'Unknown Token'),\r\n      )\r\n    }\r\n    return undefined\r\n  }, [\r\n    address,\r\n    chainId,\r\n    decimals.loading,\r\n    decimals.result,\r\n    symbol.loading,\r\n    symbol.result,\r\n    symbolBytes32.result,\r\n    token,\r\n    tokenName.loading,\r\n    tokenName.result,\r\n    tokenNameBytes32.result,\r\n  ])\r\n}\r\n\r\nexport function useCurrency(currencyId: string | undefined): Currency | null | undefined {\r\n  const isBNB = currencyId?.toUpperCase() === 'BNB'\r\n  const token = useToken(isBNB ? undefined : currencyId)\r\n  return isBNB ? ETHER : token\r\n}\r\n","// Set of helper functions to facilitate wallet setup\r\n\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { nodes } from './getRpcUrl'\r\n\r\n/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */\r\nexport const setupNetwork = async () => {\r\n  const provider = window.ethereum\r\n  if (provider) {\r\n    // @ts-ignore\r\n    const chainId = parseInt(window.SO_LotteryConfig.chainId, 10)\r\n    try {\r\n      const addParams = [\r\n        {\r\n          chainId: `0x${chainId.toString(16)}`,\r\n          // @ts-ignore\r\n          chainName: window.SO_LotteryConfig.chainName,\r\n          // @ts-ignore\r\n          nativeCurrency: window.SO_LotteryConfig.native,\r\n          // @ts-ignore\r\n          rpcUrls: [window.SO_LotteryConfig.rpc],\r\n          // @ts-ignore\r\n          blockExplorerUrls: [window.SO_LotteryConfig.etherscan],\r\n        },\r\n      ]\r\n      await provider.request({\r\n        method: 'wallet_addEthereumChain',\r\n        params: addParams,\r\n      })\r\n      return true\r\n    } catch (error) {\r\n      console.error('Failed to setup the network in Metamask:', error)\r\n      return false\r\n    }\r\n  } else {\r\n    console.error(\"Can't setup the network on metamask because window.ethereum is undefined\")\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */\r\nexport const registerToken = async (tokenAddress: string, tokenSymbol: string, tokenDecimals: number) => {\r\n  const tokenAdded = await window.ethereum.request({\r\n    method: 'wallet_watchAsset',\r\n    params: {\r\n      type: 'ERC20',\r\n      options: {\r\n        address: tokenAddress,\r\n        symbol: tokenSymbol,\r\n        decimals: tokenDecimals,\r\n        image: `${BASE_URL}/images/tokens/${tokenAddress}.png`,\r\n      },\r\n    },\r\n  })\r\n\r\n  return tokenAdded\r\n}\r\n","import { useCallback } from 'react'\r\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core'\r\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\r\nimport {\r\n  NoEthereumProviderError,\r\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\r\n} from '@web3-react/injected-connector'\r\nimport {\r\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\r\n  WalletConnectConnector,\r\n} from '@web3-react/walletconnect-connector'\r\nimport { ConnectorNames, connectorLocalStorageKey } from '@pancakeswap/uikit'\r\nimport { connectorsByName } from 'utils/web3React'\r\nimport { setupNetwork } from 'utils/wallet'\r\nimport useToast from 'hooks/useToast'\r\nimport { profileClear } from 'state/profile'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { clearAllTransactions } from 'state/transactions/actions'\r\nimport { resetUserNftState } from '../state/nftMarket/reducer'\r\n\r\nconst useAuth = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { chainId, activate, deactivate } = useWeb3React()\r\n  const { toastError } = useToast()\r\n\r\n  const login = useCallback(\r\n    (connectorID: ConnectorNames) => {\r\n      const connector = connectorsByName[connectorID]\r\n      if (connector) {\r\n        activate(connector, async (error: Error) => {\r\n          if (error instanceof UnsupportedChainIdError) {\r\n            const hasSetup = await setupNetwork()\r\n            if (hasSetup) {\r\n              activate(connector)\r\n            }\r\n          } else {\r\n            window.localStorage.removeItem(connectorLocalStorageKey)\r\n            if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\r\n              toastError(t('Provider Error'), t('No provider was found'))\r\n            } else if (\r\n              error instanceof UserRejectedRequestErrorInjected ||\r\n              error instanceof UserRejectedRequestErrorWalletConnect\r\n            ) {\r\n              if (connector instanceof WalletConnectConnector) {\r\n                const walletConnector = connector as WalletConnectConnector\r\n                walletConnector.walletConnectProvider = null\r\n              }\r\n              toastError(t('Authorization Error'), t('Please authorize to access your account'))\r\n            } else {\r\n              toastError(error.name, error.message)\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        toastError(t('Unable to find connector'), t('The connector config is wrong'))\r\n      }\r\n    },\r\n    [t, activate, toastError],\r\n  )\r\n\r\n  const logout = useCallback(() => {\r\n    dispatch(profileClear())\r\n    dispatch(resetUserNftState())\r\n    deactivate()\r\n    // This localStorage key is set by @web3-react/walletconnect-connector\r\n    if (window.localStorage.getItem('walletconnect')) {\r\n      connectorsByName.walletconnect.close()\r\n      connectorsByName.walletconnect.walletConnectProvider = null\r\n    }\r\n    window.localStorage.removeItem(connectorLocalStorageKey)\r\n    if (chainId) {\r\n      dispatch(clearAllTransactions({ chainId }))\r\n    }\r\n  }, [deactivate, dispatch, chainId])\r\n\r\n  return { login, logout }\r\n}\r\n\r\nexport default useAuth\r\n","import { request, gql } from 'graphql-request'\r\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints'\r\nimport { LotteryRoundGraphEntity, LotteryResponse } from 'state/types'\r\nimport { getRoundIdsArray, fetchMultipleLotteries } from './helpers'\r\n\r\nexport const MAX_LOTTERIES_REQUEST_SIZE = 100\r\n\r\n/* eslint-disable camelcase */\r\ntype LotteriesWhere = { id_in?: string[] }\r\n\r\nconst applyNodeDataToLotteriesGraphResponse = (\r\n  nodeData: LotteryResponse[],\r\n  graphResponse: LotteryRoundGraphEntity[],\r\n): LotteryRoundGraphEntity[] => {\r\n  //   If no graph response - return node data\r\n  if (graphResponse.length === 0) {\r\n    return nodeData.map((nodeRound) => {\r\n      return {\r\n        endTime: nodeRound.endTime,\r\n        finalNumber: nodeRound.finalNumber.toString(),\r\n        startTime: nodeRound.startTime,\r\n        status: nodeRound.status,\r\n        id: nodeRound.lotteryId.toString(),\r\n        ticketPrice: nodeRound.priceTicketInCake,\r\n        totalTickets: '',\r\n        totalUsers: '',\r\n        winningTickets: '',\r\n      }\r\n    })\r\n  }\r\n\r\n  // Populate all nodeRound data with supplementary graphResponse round data when available\r\n  const nodeRoundsWithGraphData = nodeData.map((nodeRoundData) => {\r\n    const graphRoundData = graphResponse.find((graphResponseRound) => graphResponseRound.id === nodeRoundData.lotteryId)\r\n    return {\r\n      endTime: nodeRoundData.endTime,\r\n      finalNumber: nodeRoundData.finalNumber.toString(),\r\n      startTime: nodeRoundData.startTime,\r\n      status: nodeRoundData.status,\r\n      id: nodeRoundData.lotteryId,\r\n      ticketPrice: graphRoundData?.ticketPrice,\r\n      totalTickets: graphRoundData?.totalTickets,\r\n      totalUsers: graphRoundData?.totalUsers,\r\n      winningTickets: graphRoundData?.winningTickets,\r\n    }\r\n  })\r\n\r\n  // Return the rounds with combined node + subgraph data, plus all remaining subgraph rounds.\r\n  const [lastCombinedDataRound] = nodeRoundsWithGraphData.slice(-1)\r\n  const lastCombinedDataRoundIndex = graphResponse\r\n    .map((graphRound) => graphRound?.id)\r\n    .indexOf(lastCombinedDataRound?.id)\r\n\r\n  const remainingSubgraphRounds = graphResponse ? graphResponse.splice(lastCombinedDataRoundIndex + 1) : []\r\n  const mergedResponse = [...nodeRoundsWithGraphData, ...remainingSubgraphRounds]\r\n  return mergedResponse\r\n}\r\n\r\nexport const getGraphLotteries = async (\r\n  first = MAX_LOTTERIES_REQUEST_SIZE,\r\n  skip = 0,\r\n  where: LotteriesWhere = {},\r\n): Promise<LotteryRoundGraphEntity[]> => {\r\n  try {\r\n    const response = await request(\r\n      GRAPH_API_LOTTERY,\r\n      gql`\r\n        query getLotteries($first: Int!, $skip: Int!, $where: Lottery_filter) {\r\n          lotteries(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {\r\n            id\r\n            totalUsers\r\n            totalTickets\r\n            winningTickets\r\n            status\r\n            finalNumber\r\n            startTime\r\n            endTime\r\n            ticketPrice\r\n          }\r\n        }\r\n      `,\r\n      { skip, first, where },\r\n    )\r\n    return response.lotteries\r\n  } catch (error) {\r\n    console.error(error)\r\n    return []\r\n  }\r\n}\r\n\r\nconst getLotteriesData = async (currentLotteryId: string): Promise<LotteryRoundGraphEntity[]> => {\r\n  const idsForNodesCall = getRoundIdsArray(currentLotteryId)\r\n  const nodeData = await fetchMultipleLotteries(idsForNodesCall)\r\n  const graphResponse = await getGraphLotteries()\r\n  const mergedData = applyNodeDataToLotteriesGraphResponse(nodeData, graphResponse)\r\n  return mergedData\r\n}\r\n\r\nexport default getLotteriesData\r\n","import { TICKET_LIMIT_PER_REQUEST } from 'config/constants/lottery'\r\nimport { LotteryTicket } from 'config/constants/types'\r\nimport { UserTicketsResponse } from 'state/types'\r\nimport { getLotteryV2Contract } from 'utils/contractHelpers'\r\n\r\nconst lotteryContract = getLotteryV2Contract()\r\n\r\nexport const processRawTicketsResponse = (ticketsResponse: UserTicketsResponse): LotteryTicket[] => {\r\n  const [ticketIds, ticketNumbers, ticketStatuses] = ticketsResponse\r\n\r\n  if (ticketIds?.length > 0) {\r\n    return ticketIds.map((ticketId, index) => {\r\n      return {\r\n        id: ticketId.toString(),\r\n        number: ticketNumbers[index].toString(),\r\n        status: ticketStatuses[index],\r\n      }\r\n    })\r\n  }\r\n  return []\r\n}\r\n\r\nexport const viewUserInfoForLotteryId = async (\r\n  account: string,\r\n  lotteryId: string,\r\n  cursor: number,\r\n  perRequestLimit: number,\r\n): Promise<LotteryTicket[]> => {\r\n  try {\r\n    const data = await lotteryContract.viewUserInfoForLotteryId(account, lotteryId, cursor, perRequestLimit)\r\n    return processRawTicketsResponse(data)\r\n  } catch (error) {\r\n    console.error('viewUserInfoForLotteryId', error)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const fetchUserTicketsForOneRound = async (account: string, lotteryId: string): Promise<LotteryTicket[]> => {\r\n  let cursor = 0\r\n  let numReturned = TICKET_LIMIT_PER_REQUEST\r\n  const ticketData = []\r\n\r\n  while (numReturned === TICKET_LIMIT_PER_REQUEST) {\r\n    // eslint-disable-next-line no-await-in-loop\r\n    const response = await viewUserInfoForLotteryId(account, lotteryId, cursor, TICKET_LIMIT_PER_REQUEST)\r\n    cursor += TICKET_LIMIT_PER_REQUEST\r\n    numReturned = response.length\r\n    ticketData.push(...response)\r\n  }\r\n\r\n  return ticketData\r\n}\r\n\r\nexport const fetchUserTicketsForMultipleRounds = async (\r\n  idsToCheck: string[],\r\n  account: string,\r\n): Promise<{ roundId: string; userTickets: LotteryTicket[] }[]> => {\r\n  const ticketsForMultipleRounds = []\r\n  for (let i = 0; i < idsToCheck.length; i += 1) {\r\n    const roundId = idsToCheck[i]\r\n    // eslint-disable-next-line no-await-in-loop\r\n    const ticketsForRound = await fetchUserTicketsForOneRound(account, roundId)\r\n    ticketsForMultipleRounds.push({\r\n      roundId,\r\n      userTickets: ticketsForRound,\r\n    })\r\n  }\r\n  return ticketsForMultipleRounds\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value)\r\n    }, delay)\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler)\r\n    }\r\n  }, [value, delay])\r\n\r\n  return debouncedValue\r\n}\r\n","import { createAction } from '@reduxjs/toolkit'\r\nimport { SerializedToken } from 'config/constants/types'\r\n\r\nexport interface SerializedPair {\r\n  token0: SerializedToken\r\n  token1: SerializedToken\r\n}\r\n\r\nexport enum FarmStakedOnly {\r\n  ON_FINISHED = 'onFinished',\r\n  TRUE = 'true',\r\n  FALSE = 'false',\r\n}\r\n\r\nexport enum ViewMode {\r\n  TABLE = 'TABLE',\r\n  CARD = 'CARD',\r\n}\r\n\r\nexport const updateUserExpertMode = createAction<{ userExpertMode: boolean }>('user/updateUserExpertMode')\r\nexport const updateUserSingleHopOnly = createAction<{ userSingleHopOnly: boolean }>('user/updateUserSingleHopOnly')\r\nexport const updateUserSlippageTolerance = createAction<{ userSlippageTolerance: number }>(\r\n  'user/updateUserSlippageTolerance',\r\n)\r\nexport const updateUserDeadline = createAction<{ userDeadline: number }>('user/updateUserDeadline')\r\nexport const addSerializedToken = createAction<{ serializedToken: SerializedToken }>('user/addSerializedToken')\r\nexport const removeSerializedToken = createAction<{ chainId: number; address: string }>('user/removeSerializedToken')\r\nexport const addSerializedPair = createAction<{ serializedPair: SerializedPair }>('user/addSerializedPair')\r\nexport const removeSerializedPair =\r\n  createAction<{ chainId: number; tokenAAddress: string; tokenBAddress: string }>('user/removeSerializedPair')\r\n\r\nexport const muteAudio = createAction<void>('user/muteAudio')\r\nexport const unmuteAudio = createAction<void>('user/unmuteAudio')\r\nexport const toggleTheme = createAction<void>('user/toggleTheme')\r\nexport const updateUserFarmStakedOnly = createAction<{ userFarmStakedOnly: FarmStakedOnly }>(\r\n  'user/updateUserFarmStakedOnly',\r\n)\r\nexport const updateUserPoolStakedOnly = createAction<{ userPoolStakedOnly: boolean }>('user/updateUserPoolStakedOnly')\r\nexport const updateUserPoolsViewMode = createAction<{ userPoolsViewMode: ViewMode }>('user/updateUserPoolsViewMode')\r\nexport const updateUserFarmsViewMode = createAction<{ userFarmsViewMode: ViewMode }>('user/updateUserFarmsViewMode')\r\nexport const updateUserPredictionAcceptedRisk = createAction<{ userAcceptedRisk: boolean }>(\r\n  'user/updateUserPredictionAcceptedRisk',\r\n)\r\nexport const updateUserPredictionChartDisclaimerShow = createAction<{ userShowDisclaimer: boolean }>(\r\n  'user/updateUserPredictionChartDisclaimerShow',\r\n)\r\nexport const updateUserExpertModeAcknowledgementShow = createAction<{ userExpertModeAcknowledgementShow: boolean }>(\r\n  'user/updateUserExpertModeAcknowledgementShow',\r\n)\r\nexport const updateUserUsernameVisibility = createAction<{ userUsernameVisibility: boolean }>(\r\n  'user/updateUserUsernameVisibility',\r\n)\r\nexport const updateGasPrice = createAction<{ gasPrice: string }>('user/updateGasPrice')\r\n\r\nexport const addWatchlistToken = createAction<{ address: string }>('user/addWatchlistToken')\r\nexport const addWatchlistPool = createAction<{ address: string }>('user/addWatchlistPool')\r\n\r\nexport const hidePhishingWarningBanner = createAction<void>('user/hidePhishingWarningBanner')\r\n\r\nexport const setIsExchangeChartDisplayed = createAction<boolean>('user/toggleIsExchangeChartDisplayed')\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Web3Provider } from '@ethersproject/providers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\r\n\r\n/**\r\n * Provides a web3 provider with or without user's signer\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useActiveWeb3React = (): Web3ReactContextInterface<Web3Provider> => {\r\n  const { library, chainId, ...web3React } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [provider, setProvider] = useState(library || simpleRpcProvider)\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setProvider(library || simpleRpcProvider)\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n  // @ts-ignore\r\n  return { library: provider, chainId: chainId ?? parseInt(window.SO_LotteryConfig.chainId, 10), ...web3React }\r\n}\r\n\r\nexport default useActiveWeb3React\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const BIG_ZERO = new BigNumber(0)\r\nexport const BIG_ONE = new BigNumber(1)\r\nexport const BIG_NINE = new BigNumber(9)\r\nexport const BIG_TEN = new BigNumber(10)\r\n\r\nexport const ethersToSerializedBigNumber = (ethersBn: ethers.BigNumber): SerializedBigNumber =>\r\n  ethersToBigNumber(ethersBn).toJSON()\r\n\r\nexport const ethersToBigNumber = (ethersBn: ethers.BigNumber): BigNumber => new BigNumber(ethersBn.toString())\r\n","import { ethers } from 'ethers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport tokens from 'config/constants/tokens'\r\nimport * as token from 'config/constants/tokens.lottery'\r\n\r\n// Addresses\r\nimport {\r\n  getAddress,\r\n  getPancakeProfileAddress,\r\n  getPancakeRabbitsAddress,\r\n  getBunnyFactoryAddress,\r\n  getBunnySpecialAddress,\r\n  getLotteryV2Address,\r\n  getMasterChefAddress,\r\n  getPointCenterIfoAddress,\r\n  getClaimRefundAddress,\r\n  getTradingCompetitionAddress,\r\n  getEasterNftAddress,\r\n  getCakeVaultAddress,\r\n  getPredictionsAddress,\r\n  getChainlinkOracleAddress,\r\n  getMulticallAddress,\r\n  getBunnySpecialCakeVaultAddress,\r\n  getBunnySpecialPredictionAddress,\r\n  getBunnySpecialLotteryAddress,\r\n  getFarmAuctionAddress,\r\n  getAnniversaryAchievement,\r\n  getNftMarketAddress,\r\n  getNftSaleAddress,\r\n  getPancakeSquadAddress,\r\n} from 'utils/addressHelpers'\r\n\r\n// ABI\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport pancakeRabbitsAbi from 'config/abi/pancakeRabbits.json'\r\nimport bunnyFactoryAbi from 'config/abi/bunnyFactory.json'\r\nimport bunnySpecialAbi from 'config/abi/bunnySpecial.json'\r\nimport bep20Abi from 'config/abi/erc20.json'\r\nimport erc721Abi from 'config/abi/erc721.json'\r\nimport lpTokenAbi from 'config/abi/lpToken.json'\r\nimport cakeAbi from 'config/abi/cake.json'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport pointCenterIfo from 'config/abi/pointCenterIfo.json'\r\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\nimport sousChefV2 from 'config/abi/sousChefV2.json'\r\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\r\nimport claimRefundAbi from 'config/abi/claimRefund.json'\r\nimport tradingCompetitionAbi from 'config/abi/tradingCompetition.json'\r\nimport easterNftAbi from 'config/abi/easterNft.json'\r\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\r\nimport predictionsAbi from 'config/abi/predictions.json'\r\nimport chainlinkOracleAbi from 'config/abi/chainlinkOracle.json'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport bunnySpecialCakeVaultAbi from 'config/abi/bunnySpecialCakeVault.json'\r\nimport bunnySpecialPredictionAbi from 'config/abi/bunnySpecialPrediction.json'\r\nimport bunnySpecialLotteryAbi from 'config/abi/bunnySpecialLottery.json'\r\nimport farmAuctionAbi from 'config/abi/farmAuction.json'\r\nimport anniversaryAchievementAbi from 'config/abi/anniversaryAchievement.json'\r\nimport nftMarketAbi from 'config/abi/nftMarket.json'\r\nimport nftSaleAbi from 'config/abi/nftSale.json'\r\nimport pancakeSquadAbi from 'config/abi/pancakeSquad.json'\r\nimport erc721CollectionAbi from 'config/abi/erc721collection.json'\r\nimport { ChainLinkOracleContract, FarmAuctionContract, PancakeProfileContract, PredictionsContract } from './types'\r\n\r\nconst getContract = (abi: any, address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  const signerOrProvider = signer ?? simpleRpcProvider\r\n  return new ethers.Contract(address, abi, signerOrProvider)\r\n}\r\n\r\nexport const getBep20Contract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bep20Abi, address, signer)\r\n}\r\nexport const getErc721Contract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(erc721Abi, address, signer)\r\n}\r\nexport const getLpContract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(lpTokenAbi, address, signer)\r\n}\r\nexport const getIfoV1Contract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(ifoV1Abi, address, signer)\r\n}\r\nexport const getIfoV2Contract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(ifoV2Abi, address, signer)\r\n}\r\nexport const getSouschefContract = (id: number, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const abi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\r\n  return getContract(abi, getAddress(config.contractAddress), signer)\r\n}\r\nexport const getSouschefV2Contract = (id: number, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  return getContract(sousChefV2, getAddress(config.contractAddress), signer)\r\n}\r\nexport const getPointCenterIfoContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(pointCenterIfo, getPointCenterIfoAddress(), signer)\r\n}\r\nexport const getCakeContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(cakeAbi, token.info().address, signer)\r\n}\r\nexport const getProfileContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(profileABI, getPancakeProfileAddress(), signer) as PancakeProfileContract\r\n}\r\nexport const getPancakeRabbitContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(pancakeRabbitsAbi, getPancakeRabbitsAddress(), signer)\r\n}\r\nexport const getBunnyFactoryContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnyFactoryAbi, getBunnyFactoryAddress(), signer)\r\n}\r\nexport const getBunnySpecialContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnySpecialAbi, getBunnySpecialAddress(), signer)\r\n}\r\nexport const getLotteryV2Contract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(lotteryV2Abi, getLotteryV2Address(), signer)\r\n}\r\nexport const getMasterchefContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(masterChef, getMasterChefAddress(), signer)\r\n}\r\nexport const getClaimRefundContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(claimRefundAbi, getClaimRefundAddress(), signer)\r\n}\r\nexport const getTradingCompetitionContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(tradingCompetitionAbi, getTradingCompetitionAddress(), signer)\r\n}\r\nexport const getEasterNftContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(easterNftAbi, getEasterNftAddress(), signer)\r\n}\r\nexport const getCakeVaultContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(cakeVaultAbi, getCakeVaultAddress(), signer)\r\n}\r\n\r\nexport const getPredictionsContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(predictionsAbi, getPredictionsAddress(), signer) as PredictionsContract\r\n}\r\n\r\nexport const getChainlinkOracleContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(chainlinkOracleAbi, getChainlinkOracleAddress(), signer) as ChainLinkOracleContract\r\n}\r\nexport const getMulticallContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(MultiCallAbi, getMulticallAddress(), signer)\r\n}\r\nexport const getBunnySpecialCakeVaultContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnySpecialCakeVaultAbi, getBunnySpecialCakeVaultAddress(), signer)\r\n}\r\nexport const getBunnySpecialPredictionContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnySpecialPredictionAbi, getBunnySpecialPredictionAddress(), signer)\r\n}\r\nexport const getBunnySpecialLotteryContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnySpecialLotteryAbi, getBunnySpecialLotteryAddress(), signer)\r\n}\r\nexport const getFarmAuctionContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(farmAuctionAbi, getFarmAuctionAddress(), signer) as FarmAuctionContract\r\n}\r\nexport const getAnniversaryAchievementContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(anniversaryAchievementAbi, getAnniversaryAchievement(), signer)\r\n}\r\nexport const getNftMarketContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(nftMarketAbi, getNftMarketAddress(), signer)\r\n}\r\nexport const getNftSaleContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(nftSaleAbi, getNftSaleAddress(), signer)\r\n}\r\nexport const getPancakeSquadContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(pancakeSquadAbi, getPancakeSquadAddress(), signer)\r\n}\r\nexport const getErc721CollectionContract = (signer?: ethers.Signer | ethers.providers.Provider, address?: string) => {\r\n  return getContract(erc721CollectionAbi, address, signer)\r\n}\r\n","import { Interface } from '@ethersproject/abi'\r\nimport ERC20_ABI from './erc20.json'\r\nimport ERC20_BYTES32_ABI from './erc20_bytes32.json'\r\n\r\nconst ERC20_INTERFACE = new Interface(ERC20_ABI)\r\n\r\nconst ERC20_BYTES32_INTERFACE = new Interface(ERC20_BYTES32_ABI)\r\n\r\nexport default ERC20_INTERFACE\r\nexport { ERC20_ABI, ERC20_BYTES32_INTERFACE, ERC20_BYTES32_ABI }\r\n","import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { isAddress } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { getAchievements } from 'state/achievements/helpers'\r\nimport { State, ProfileState, Achievement, ProfileAvatarFetchStatus } from '../types'\r\nimport { fetchProfile, fetchProfileAvatar, fetchProfileUsername } from '.'\r\nimport { getProfile, GetProfileResponse } from './helpers'\r\n\r\nexport const useFetchProfile = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchProfile(account))\r\n    }\r\n  }, [account, dispatch])\r\n}\r\n\r\nexport const useProfileForAddress = (address: string) => {\r\n  const [profileState, setProfileState] = useState<{ profile: GetProfileResponse; isFetching: boolean }>({\r\n    profile: null,\r\n    isFetching: true,\r\n  })\r\n  const previousAddress = usePreviousValue(address)\r\n  const hasAddressChanged = previousAddress !== address\r\n\r\n  useEffect(() => {\r\n    const fetchProfileForAddress = async () => {\r\n      try {\r\n        const profile = await getProfile(address)\r\n        setProfileState({ profile, isFetching: false })\r\n      } catch (error) {\r\n        console.error(`Failed to fetch profile for address ${address}`, error)\r\n        setProfileState({ profile: null, isFetching: false })\r\n      }\r\n    }\r\n    if (hasAddressChanged || (!profileState.isFetching && !profileState.profile)) {\r\n      fetchProfileForAddress()\r\n    }\r\n  }, [profileState, address, hasAddressChanged])\r\n\r\n  // Clear state on account switch\r\n  useEffect(() => {\r\n    setProfileState({ profile: null, isFetching: true })\r\n  }, [address])\r\n\r\n  return profileState\r\n}\r\n\r\nexport const useAchievementsForAddress = (address: string) => {\r\n  const [state, setState] = useState<{ achievements: Achievement[]; isFetching: boolean }>({\r\n    achievements: [],\r\n    isFetching: false,\r\n  })\r\n  const previousAddress = usePreviousValue(address)\r\n  const hasAddressChanged = previousAddress !== address\r\n\r\n  useEffect(() => {\r\n    const fetchProfileForAddress = async () => {\r\n      setState({ achievements: [], isFetching: true })\r\n      try {\r\n        const achievements = await getAchievements(address)\r\n        setState({ achievements, isFetching: false })\r\n      } catch (error) {\r\n        console.error(`Failed to fetch achievements for address ${address}`, error)\r\n        setState({ achievements: [], isFetching: false })\r\n      }\r\n    }\r\n    if (hasAddressChanged || (!state.isFetching && !state.achievements)) {\r\n      fetchProfileForAddress()\r\n    }\r\n  }, [state, address, hasAddressChanged])\r\n\r\n  // Clear state on account switch\r\n  useEffect(() => {\r\n    setState({ achievements: [], isFetching: true })\r\n  }, [address])\r\n\r\n  return state\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const { isInitialized, isLoading, data, hasRegistered }: ProfileState = useSelector((state: State) => state.profile)\r\n  return { profile: data, hasProfile: isInitialized && hasRegistered, isInitialized, isLoading }\r\n}\r\n\r\nexport const useGetProfileAvatar = (account: string) => {\r\n  const profileAvatar = useSelector((state: State) => state.profile.profileAvatars[account])\r\n  const { username, nft, hasRegistered, usernameFetchStatus, avatarFetchStatus } = profileAvatar || {}\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    const address = isAddress(account)\r\n\r\n    if (!nft && avatarFetchStatus !== ProfileAvatarFetchStatus.FETCHED && address) {\r\n      dispatch(fetchProfileAvatar(account))\r\n    }\r\n\r\n    if (\r\n      !username &&\r\n      avatarFetchStatus === ProfileAvatarFetchStatus.FETCHED &&\r\n      usernameFetchStatus !== ProfileAvatarFetchStatus.FETCHED &&\r\n      address\r\n    ) {\r\n      dispatch(fetchProfileUsername({ account, hasRegistered }))\r\n    }\r\n  }, [account, nft, username, hasRegistered, avatarFetchStatus, usernameFetchStatus, dispatch])\r\n\r\n  return { username, nft, usernameFetchStatus, avatarFetchStatus }\r\n}\r\n","import React from 'react'\r\nimport { Box, BoxProps } from '@pancakeswap/uikit'\r\n\r\nconst Container: React.FC<BoxProps> = ({ children, ...props }) => (\r\n  <Box px={['16px', '24px']} mx=\"auto\" maxWidth=\"1200px\" {...props}>\r\n    {children}\r\n  </Box>\r\n)\r\n\r\nexport default Container\r\n","import { ChainId, Currency, currencyEquals, JSBI, Price } from '@pancakeswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport tokens, { mainnetTokens } from 'config/constants/tokens'\r\nimport { PairState, usePairs } from './usePairs'\r\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\r\n\r\nconst BUSD_MAINNET = mainnetTokens.busd\r\nconst { wbnb: WBNB } = tokens\r\n\r\n/**\r\n * Returns the price in BUSD of the input currency\r\n * @param currency currency to compute the BUSD price of\r\n */\r\nexport default function useBUSDPrice(currency?: Currency): Price | undefined {\r\n  const { chainId } = useActiveWeb3React()\r\n  const wrapped = wrappedCurrency(currency, chainId)\r\n  const tokenPairs: [Currency | undefined, Currency | undefined][] = useMemo(\r\n    () => [\r\n      [chainId && wrapped && currencyEquals(WBNB, wrapped) ? undefined : currency, chainId ? WBNB : undefined],\r\n      [wrapped?.equals(BUSD_MAINNET) ? undefined : wrapped, chainId === ChainId.MAINNET ? BUSD_MAINNET : undefined],\r\n      [chainId ? WBNB : undefined, chainId === ChainId.MAINNET ? BUSD_MAINNET : undefined],\r\n    ],\r\n    [chainId, currency, wrapped],\r\n  )\r\n  const [[ethPairState, ethPair], [busdPairState, busdPair], [busdEthPairState, busdEthPair]] = usePairs(tokenPairs)\r\n\r\n  return useMemo(() => {\r\n    if (!currency || !wrapped || !chainId) {\r\n      return undefined\r\n    }\r\n    // handle weth/eth\r\n    if (wrapped.equals(WBNB)) {\r\n      if (busdPair) {\r\n        const price = busdPair.priceOf(WBNB)\r\n        return new Price(currency, BUSD_MAINNET, price.denominator, price.numerator)\r\n      }\r\n      return undefined\r\n    }\r\n    // handle busd\r\n    if (wrapped.equals(BUSD_MAINNET)) {\r\n      return new Price(BUSD_MAINNET, BUSD_MAINNET, '1', '1')\r\n    }\r\n\r\n    const ethPairETHAmount = ethPair?.reserveOf(WBNB)\r\n    const ethPairETHBUSDValue: JSBI =\r\n      ethPairETHAmount && busdEthPair ? busdEthPair.priceOf(WBNB).quote(ethPairETHAmount).raw : JSBI.BigInt(0)\r\n\r\n    // all other tokens\r\n    // first try the busd pair\r\n    if (\r\n      busdPairState === PairState.EXISTS &&\r\n      busdPair &&\r\n      busdPair.reserveOf(BUSD_MAINNET).greaterThan(ethPairETHBUSDValue)\r\n    ) {\r\n      const price = busdPair.priceOf(wrapped)\r\n      return new Price(currency, BUSD_MAINNET, price.denominator, price.numerator)\r\n    }\r\n    if (ethPairState === PairState.EXISTS && ethPair && busdEthPairState === PairState.EXISTS && busdEthPair) {\r\n      if (busdEthPair.reserveOf(BUSD_MAINNET).greaterThan('0') && ethPair.reserveOf(WBNB).greaterThan('0')) {\r\n        const ethBusdPrice = busdEthPair.priceOf(BUSD_MAINNET)\r\n        const currencyEthPrice = ethPair.priceOf(WBNB)\r\n        const busdPrice = ethBusdPrice.multiply(currencyEthPrice).invert()\r\n        return new Price(currency, BUSD_MAINNET, busdPrice.denominator, busdPrice.numerator)\r\n      }\r\n    }\r\n\r\n    return undefined\r\n  }, [chainId, currency, ethPair, ethPairState, busdEthPair, busdEthPairState, busdPair, busdPairState, wrapped])\r\n}\r\n\r\nexport const useCakeBusdPrice = (): Price | undefined => {\r\n  const cakeBusdPrice = useBUSDPrice(tokens.cake)\r\n  return cakeBusdPrice\r\n}\r\n\r\nexport const useBNBBusdPrice = (): Price | undefined => {\r\n  const bnbBusdPrice = useBUSDPrice(tokens.wbnb)\r\n  return bnbBusdPrice\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useLocation } from 'react-router'\r\nimport { DEFAULT_META, getCustomMeta } from 'config/constants/meta'\r\nimport { useCakeBusdPrice } from 'hooks/useBUSDPrice'\r\nimport Container from './Container'\r\n\r\nconst StyledPage = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport const PageMeta: React.FC<{ symbol?: string }> = ({ symbol }) => {\r\n  const { t } = useTranslation()\r\n  const { pathname } = useLocation()\r\n  const cakePriceUsd = useCakeBusdPrice()\r\n  const cakePriceUsdDisplay = cakePriceUsd ? `$${cakePriceUsd.toFixed(3)}` : '...'\r\n\r\n  const pageMeta = getCustomMeta(pathname, t) || {}\r\n  const { title, description, image } = { ...DEFAULT_META, ...pageMeta }\r\n  let pageTitle = cakePriceUsdDisplay ? [title, cakePriceUsdDisplay].join(' - ') : title\r\n  if (symbol) {\r\n    pageTitle = [symbol, title].join(' - ')\r\n  }\r\n\r\n  return (\r\n    <Helmet>\r\n      <title>{pageTitle}</title>\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={description} />\r\n      <meta property=\"og:image\" content={image} />\r\n    </Helmet>\r\n  )\r\n}\r\n\r\ninterface PageProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  symbol?: string\r\n}\r\n\r\nconst Page: React.FC<PageProps> = ({ children, symbol, ...props }) => {\r\n  return (\r\n    <>\r\n      <StyledPage {...props}>{children}</StyledPage>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Page\r\n","import { ethers } from 'ethers'\r\nimport { getMulticallContract } from 'utils/contractHelpers'\r\nimport { MultiCallResponse } from './types'\r\n\r\nexport interface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (example: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\ninterface MulticallOptions {\r\n  requireSuccess?: boolean\r\n}\r\n\r\nconst multicall = async <T = any>(abi: any[], calls: Call[]): Promise<T> => {\r\n  try {\r\n    const multi = getMulticallContract()\r\n    const itf = new ethers.utils.Interface(abi)\r\n\r\n    const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n    const { returnData } = await multi.aggregate(calldata)\r\n\r\n    const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n    return res\r\n  } catch (error) {\r\n    // @ts-ignore\r\n    throw new Error(error)\r\n  }\r\n}\r\n\r\n/**\r\n * Multicall V2 uses the new \"tryAggregate\" function. It is different in 2 ways\r\n *\r\n * 1. If \"requireSuccess\" is false multicall will not bail out if one of the calls fails\r\n * 2. The return includes a boolean whether the call was successful e.g. [wasSuccessful, callResult]\r\n */\r\nexport const multicallv2 = async <T = any>(\r\n  abi: any[],\r\n  calls: Call[],\r\n  options: MulticallOptions = { requireSuccess: true },\r\n): Promise<MultiCallResponse<T>> => {\r\n  if (true) return multicall(abi, calls)\r\n  const { requireSuccess } = options\r\n  const multi = getMulticallContract()\r\n  const itf = new ethers.utils.Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const returnData = await multi.tryAggregate(requireSuccess, calldata)\r\n  const res = returnData.map((call, i) => {\r\n    const [result, data] = call\r\n    return result ? itf.decodeFunctionResult(calls[i].name, data) : null\r\n  })\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","export const GRAPH_API_PROFILE = process.env.REACT_APP_GRAPH_API_PROFILE\r\nexport const GRAPH_API_PREDICTION = process.env.REACT_APP_GRAPH_API_PREDICTION\r\nexport const GRAPH_API_LOTTERY = process.env.REACT_APP_GRAPH_API_LOTTERY\r\nexport const SNAPSHOT_VOTING_API = process.env.REACT_APP_SNAPSHOT_VOTING_API\r\nexport const SNAPSHOT_BASE_URL = process.env.REACT_APP_SNAPSHOT_BASE_URL\r\nexport const API_PROFILE = process.env.REACT_APP_API_PROFILE\r\nexport const API_NFT = process.env.REACT_APP_API_NFT\r\nexport const SNAPSHOT_API = `${SNAPSHOT_BASE_URL}/graphql`\r\nexport const SNAPSHOT_HUB_API = `${SNAPSHOT_BASE_URL}/api/message`\r\n\r\n/**\r\n * V1 will be deprecated but is still used to claim old rounds\r\n */\r\nexport const GRAPH_API_PREDICTION_V1 = 'https://api.thegraph.com/subgraphs/name/pancakeswap/prediction'\r\n\r\nexport const INFO_CLIENT = 'https://bsc.streamingfast.io/subgraphs/name/pancakeswap/exchange-v2'\r\nexport const BLOCKS_CLIENT = 'https://api.thegraph.com/subgraphs/name/pancakeswap/blocks'\r\nexport const GRAPH_API_NFTMARKET = process.env.REACT_APP_GRAPH_API_NFT_MARKET\r\n","import { request, gql } from 'graphql-request'\r\nimport { stringify } from 'qs'\r\nimport { GRAPH_API_NFTMARKET, API_NFT } from 'config/constants/endpoints'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { ethers } from 'ethers'\r\nimport map from 'lodash/map'\r\nimport { uniq } from 'lodash'\r\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport {\r\n  TokenMarketData,\r\n  ApiCollections,\r\n  TokenIdWithCollectionAddress,\r\n  NftToken,\r\n  NftLocation,\r\n  Collection,\r\n  ApiResponseCollectionTokens,\r\n  ApiResponseSpecificToken,\r\n  ApiCollection,\r\n  CollectionMarketDataBaseFields,\r\n  Transaction,\r\n  AskOrder,\r\n  ApiSingleTokenData,\r\n  NftAttribute,\r\n  ApiTokenFilterResponse,\r\n  ApiCollectionsResponse,\r\n} from './types'\r\nimport { getBaseNftFields, getBaseTransactionFields, getCollectionBaseFields } from './queries'\r\n\r\n/**\r\n * API HELPERS\r\n */\r\n\r\n/**\r\n * Fetch static data from all collections using the API\r\n * @returns\r\n */\r\nexport const getCollectionsApi = async (): Promise<ApiCollectionsResponse> => {\r\n  const res = await fetch(`${API_NFT}/collections`)\r\n  if (res.ok) {\r\n    const json = await res.json()\r\n    return json\r\n  }\r\n  console.error('Failed to fetch NFT collections', res.statusText)\r\n  return null\r\n}\r\n\r\n/**\r\n * Fetch static data from a collection using the API\r\n * @returns\r\n */\r\nexport const getCollectionApi = async (collectionAddress: string): Promise<ApiCollection> => {\r\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}`)\r\n  if (res.ok) {\r\n    const json = await res.json()\r\n    return json.data\r\n  }\r\n  console.error(`API: Failed to fetch NFT collection ${collectionAddress}`, res.statusText)\r\n  return null\r\n}\r\n\r\n/**\r\n * Fetch static data for all nfts in a collection using the API\r\n * @param collectionAddress\r\n * @param size\r\n * @param page\r\n * @returns\r\n */\r\nexport const getNftsFromCollectionApi = async (\r\n  collectionAddress: string,\r\n  size = 100,\r\n  page = 1,\r\n): Promise<ApiResponseCollectionTokens> => {\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n  const requestPath = `${API_NFT}/collections/${collectionAddress}/tokens${\r\n    !isPBCollection ? `?page=${page}&size=${size}` : ``\r\n  }`\r\n\r\n  const res = await fetch(requestPath)\r\n  if (res.ok) {\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n  console.error(`API: Failed to fetch NFT tokens for ${collectionAddress} collection`, res.statusText)\r\n  return null\r\n}\r\n\r\n/**\r\n * Fetch a single NFT using the API\r\n * @param collectionAddress\r\n * @param tokenId\r\n * @returns NFT from API\r\n */\r\nexport const getNftApi = async (\r\n  collectionAddress: string,\r\n  tokenId: string,\r\n): Promise<ApiResponseSpecificToken['data']> => {\r\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}/tokens/${tokenId}`)\r\n  if (res.ok) {\r\n    const json = await res.json()\r\n    return json.data\r\n  }\r\n\r\n  console.error(`API: Can't fetch NFT token ${tokenId} in ${collectionAddress}`, res.status)\r\n  return null\r\n}\r\n\r\n/**\r\n * Fetch a list of NFT from different collections\r\n * @param from Array of { collectionAddress: string; tokenId: string }\r\n * @returns Array of NFT from API\r\n */\r\nexport const getNftsFromDifferentCollectionsApi = async (\r\n  from: { collectionAddress: string; tokenId: string }[],\r\n): Promise<NftToken[]> => {\r\n  const promises = from.map((nft) => getNftApi(nft.collectionAddress, nft.tokenId))\r\n  const responses = await Promise.all(promises)\r\n  // Sometimes API can't find some tokens (e.g. 404 response)\r\n  // at least return the ones that returned successfully\r\n  return responses\r\n    .filter((resp) => resp)\r\n    .map((res, index) => ({\r\n      tokenId: res.tokenId,\r\n      name: res.name,\r\n      collectionName: res.collection.name,\r\n      collectionAddress: from[index].collectionAddress,\r\n      description: res.description,\r\n      attributes: res.attributes,\r\n      createdAt: res.createdAt,\r\n      updatedAt: res.updatedAt,\r\n      image: {\r\n        original: res.image?.original,\r\n        thumbnail: res.image?.thumbnail,\r\n      },\r\n    }))\r\n}\r\n\r\n/**\r\n * SUBGRAPH HELPERS\r\n */\r\n\r\n/**\r\n * Fetch market data from a collection using the Subgraph\r\n * @returns\r\n */\r\nexport const getCollectionSg = async (collectionAddress: string): Promise<CollectionMarketDataBaseFields> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getCollectionData($collectionAddress: String!) {\r\n          collection(id: $collectionAddress) {\r\n            ${getCollectionBaseFields()}\r\n          }\r\n        }\r\n      `,\r\n      { collectionAddress: collectionAddress.toLowerCase() },\r\n    )\r\n    return res.collection\r\n  } catch (error) {\r\n    console.error('Failed to fetch collection', error)\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch market data from all collections using the Subgraph\r\n * @returns\r\n */\r\nexport const getCollectionsSg = async (): Promise<CollectionMarketDataBaseFields[]> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        {\r\n          collections {\r\n            ${getCollectionBaseFields()}\r\n          }\r\n        }\r\n      `,\r\n    )\r\n    return res.collections\r\n  } catch (error) {\r\n    console.error('Failed to fetch NFT collections', error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch market data for nfts in a collection using the Subgraph\r\n * @param collectionAddress\r\n * @param first\r\n * @param skip\r\n * @returns\r\n */\r\nexport const getNftsFromCollectionSg = async (\r\n  collectionAddress: string,\r\n  first = 1000,\r\n  skip = 0,\r\n): Promise<TokenMarketData[]> => {\r\n  // Squad to be sorted by tokenId as this matches the order of the paginated API return. For PBs - get the most recent,\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getNftCollectionMarketData($collectionAddress: String!) {\r\n          collection(id: $collectionAddress) {\r\n            id\r\n            nfts(orderBy:${isPBCollection ? 'updatedAt' : 'tokenId'}, skip: $skip, first: $first) {\r\n             ${getBaseNftFields()}\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { collectionAddress: collectionAddress.toLowerCase(), skip, first },\r\n    )\r\n    return res.collection.nfts\r\n  } catch (error) {\r\n    console.error('Failed to fetch NFTs from collection', error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch market data for PancakeBunnies NFTs by bunny id using the Subgraph\r\n * @param bunnyId - bunny id to query\r\n * @param existingTokenIds - tokens that are already loaded into redux\r\n * @returns\r\n */\r\nexport const getNftsByBunnyIdSg = async (\r\n  bunnyId: string,\r\n  existingTokenIds: string[],\r\n  orderDirection: 'asc' | 'desc',\r\n): Promise<TokenMarketData[]> => {\r\n  try {\r\n    const where =\r\n      existingTokenIds.length > 0\r\n        ? { otherId: bunnyId, isTradable: true, tokenId_not_in: existingTokenIds }\r\n        : { otherId: bunnyId, isTradable: true }\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getNftsByBunnyIdSg($collectionAddress: String!, $where: NFT_filter, $orderDirection: String!) {\r\n          nfts(first: 30, where: $where, orderBy: currentAskPrice, orderDirection: $orderDirection) {\r\n            ${getBaseNftFields()}\r\n          }\r\n        }\r\n      `,\r\n      {\r\n        collectionAddress: pancakeBunniesAddress.toLowerCase(),\r\n        where,\r\n        orderDirection,\r\n      },\r\n    )\r\n    return res.nfts\r\n  } catch (error) {\r\n    console.error(`Failed to fetch collection NFTs for bunny id ${bunnyId}`, error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch market data for PancakeBunnies NFTs by bunny id using the Subgraph\r\n * @param bunnyId - bunny id to query\r\n * @param existingTokenIds - tokens that are already loaded into redux\r\n * @returns\r\n */\r\nexport const getMarketDataForTokenIds = async (\r\n  collectionAddress: string,\r\n  existingTokenIds: string[],\r\n): Promise<TokenMarketData[]> => {\r\n  try {\r\n    if (existingTokenIds.length === 0) {\r\n      return []\r\n    }\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getMarketDataForTokenIds($collectionAddress: String!, $where: NFT_filter) {\r\n          collection(id: $collectionAddress) {\r\n            id\r\n            nfts(first: 1000, where: $where) {\r\n              ${getBaseNftFields()}\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      {\r\n        collectionAddress: collectionAddress.toLowerCase(),\r\n        where: { tokenId_in: existingTokenIds },\r\n      },\r\n    )\r\n    return res.collection.nfts\r\n  } catch (error) {\r\n    console.error(`Failed to fetch market data for NFTs stored tokens`, error)\r\n    return []\r\n  }\r\n}\r\n\r\nexport const getNftsMarketData = async (\r\n  where = {},\r\n  first = 1000,\r\n  orderBy = 'id',\r\n  orderDirection: 'asc' | 'desc' = 'desc',\r\n  skip = 0,\r\n): Promise<TokenMarketData[]> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getNftsMarketData($first: Int, $skip: Int!, $where: NFT_filter, $orderBy: NFT_orderBy, $orderDirection: OrderDirection) {\r\n          nfts(where: $where, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, skip: $skip) {\r\n            ${getBaseNftFields()}\r\n            transactionHistory {\r\n              ${getBaseTransactionFields()}\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { where, first, skip, orderBy, orderDirection },\r\n    )\r\n\r\n    return res.nfts\r\n  } catch (error) {\r\n    console.error('Failed to fetch NFTs market data', error)\r\n    return []\r\n  }\r\n}\r\n\r\nexport const getAllPancakeBunniesLowestPrice = async (bunnyIds: string[]): Promise<Record<string, number>> => {\r\n  try {\r\n    const singlePancakeBunnySubQueries = bunnyIds.map(\r\n      (\r\n        bunnyId,\r\n      ) => `b${bunnyId}:nfts(first: 1, where: { otherId: ${bunnyId}, isTradable: true }, orderBy: currentAskPrice, orderDirection: asc) {\r\n        currentAskPrice\r\n      }\r\n    `,\r\n    )\r\n    const rawResponse: Record<string, { currentAskPrice: string }[]> = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getAllPancakeBunniesLowestPrice {\r\n          ${singlePancakeBunnySubQueries}\r\n        }\r\n      `,\r\n    )\r\n    return Object.keys(rawResponse).reduce((lowestPricesData, subQueryKey) => {\r\n      const bunnyId = subQueryKey.split('b')[1]\r\n      return {\r\n        ...lowestPricesData,\r\n        [bunnyId]:\r\n          rawResponse[subQueryKey].length > 0 ? parseFloat(rawResponse[subQueryKey][0].currentAskPrice) : Infinity,\r\n      }\r\n    }, {})\r\n  } catch (error) {\r\n    console.error('Failed to fetch PancakeBunnies lowest prices', error)\r\n    return {}\r\n  }\r\n}\r\n\r\nexport const getAllPancakeBunniesRecentUpdatedAt = async (bunnyIds: string[]): Promise<Record<string, number>> => {\r\n  try {\r\n    const singlePancakeBunnySubQueries = bunnyIds.map(\r\n      (\r\n        bunnyId,\r\n      ) => `b${bunnyId}:nfts(first: 1, where: { otherId: ${bunnyId}, isTradable: true }, orderBy: updatedAt, orderDirection: desc) {\r\n        updatedAt\r\n      }\r\n    `,\r\n    )\r\n    const rawResponse: Record<string, { updatedAt: string }[]> = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getAllPancakeBunniesLowestPrice {\r\n          ${singlePancakeBunnySubQueries}\r\n        }\r\n      `,\r\n    )\r\n    return Object.keys(rawResponse).reduce((updatedAtData, subQueryKey) => {\r\n      const bunnyId = subQueryKey.split('b')[1]\r\n      return {\r\n        ...updatedAtData,\r\n        [bunnyId]: rawResponse[subQueryKey].length > 0 ? Number(rawResponse[subQueryKey][0].updatedAt) : -Infinity,\r\n      }\r\n    }, {})\r\n  } catch (error) {\r\n    console.error('Failed to fetch PancakeBunnies latest market updates', error)\r\n    return {}\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the lowest price of any NFT in a collection\r\n */\r\nexport const getLowestPriceInCollection = async (collectionAddress: string) => {\r\n  try {\r\n    const response = await getNftsMarketData(\r\n      { collection: collectionAddress.toLowerCase(), isTradable: true },\r\n      1,\r\n      'currentAskPrice',\r\n      'asc',\r\n    )\r\n\r\n    if (response.length === 0) {\r\n      return 0\r\n    }\r\n\r\n    const [nftSg] = response\r\n    return parseFloat(nftSg.currentAskPrice)\r\n  } catch (error) {\r\n    console.error(`Failed to lowest price NFTs in collection ${collectionAddress}`, error)\r\n    return 0\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch user trading data for buyTradeHistory, sellTradeHistory and askOrderHistory from the Subgraph\r\n * @param where a User_filter where condition\r\n * @returns a UserActivity object\r\n */\r\nexport const getUserActivity = async (\r\n  address: string,\r\n): Promise<{ askOrderHistory: AskOrder[]; buyTradeHistory: Transaction[]; sellTradeHistory: Transaction[] }> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getUserActivity($address: String!) {\r\n          user(id: $address) {\r\n            buyTradeHistory(first: 250, orderBy: timestamp, orderDirection: desc) {\r\n              ${getBaseTransactionFields()}\r\n              nft {\r\n                ${getBaseNftFields()}\r\n              }\r\n            }\r\n            sellTradeHistory(first: 250, orderBy: timestamp, orderDirection: desc) {\r\n              ${getBaseTransactionFields()}\r\n              nft {\r\n                ${getBaseNftFields()}\r\n              }\r\n            }\r\n            askOrderHistory(first: 500, orderBy: timestamp, orderDirection: desc) {\r\n              id\r\n              block\r\n              timestamp\r\n              orderType\r\n              askPrice\r\n              nft {\r\n                ${getBaseNftFields()}\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { address },\r\n    )\r\n\r\n    return res.user || { askOrderHistory: [], buyTradeHistory: [], sellTradeHistory: [] }\r\n  } catch (error) {\r\n    console.error('Failed to fetch user Activity', error)\r\n    return {\r\n      askOrderHistory: [],\r\n      buyTradeHistory: [],\r\n      sellTradeHistory: [],\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the most recently listed NFTs\r\n * @param first Number of nfts to retrieve\r\n * @returns NftTokenSg[]\r\n */\r\nexport const getLatestListedNfts = async (first: number): Promise<TokenMarketData[]> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getLatestNftMarketData($first: Int) {\r\n          nfts(where: { isTradable: true }, orderBy: updatedAt , orderDirection: desc, first: $first) {\r\n            ${getBaseNftFields()}\r\n            collection {\r\n              id\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { first },\r\n    )\r\n\r\n    return res.nfts\r\n  } catch (error) {\r\n    console.error('Failed to fetch NFTs market data', error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Filter NFTs from a collection\r\n * @param collectionAddress\r\n * @returns\r\n */\r\nexport const fetchNftsFiltered = async (\r\n  collectionAddress: string,\r\n  filters: Record<string, string | number>,\r\n): Promise<ApiTokenFilterResponse> => {\r\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}/filter?${stringify(filters)}`)\r\n\r\n  if (res.ok) {\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n\r\n  console.error(`API: Failed to fetch NFT collection ${collectionAddress}`, res.statusText)\r\n  return null\r\n}\r\n\r\n/**\r\n * OTHER HELPERS\r\n */\r\n\r\nexport const getMetadataWithFallback = (apiMetadata: ApiResponseCollectionTokens['data'], bunnyId: string) => {\r\n  // The fallback is just for the testnet where some bunnies don't exist\r\n  return (\r\n    apiMetadata[bunnyId] ?? {\r\n      name: '',\r\n      description: '',\r\n      collection: { name: 'Pancake Bunnies' },\r\n      image: {\r\n        original: '',\r\n        thumbnail: '',\r\n      },\r\n    }\r\n  )\r\n}\r\n\r\nexport const getPancakeBunniesAttributesField = (bunnyId: string) => {\r\n  // Generating attributes field that is not returned by API\r\n  // but can be \"faked\" since objects are keyed with bunny id\r\n  return [\r\n    {\r\n      traitType: 'bunnyId',\r\n      value: bunnyId,\r\n      displayType: null,\r\n    },\r\n  ]\r\n}\r\n\r\nexport const combineApiAndSgResponseToNftToken = (\r\n  apiMetadata: ApiSingleTokenData,\r\n  marketData: TokenMarketData,\r\n  attributes: NftAttribute[],\r\n) => {\r\n  return {\r\n    tokenId: marketData.tokenId,\r\n    name: apiMetadata.name,\r\n    description: apiMetadata.description,\r\n    collectionName: apiMetadata.collection.name,\r\n    collectionAddress: pancakeBunniesAddress,\r\n    image: apiMetadata.image,\r\n    marketData,\r\n    attributes,\r\n  }\r\n}\r\n\r\nexport const fetchWalletTokenIdsForCollections = async (\r\n  account: string,\r\n  collections: ApiCollections,\r\n): Promise<TokenIdWithCollectionAddress[]> => {\r\n  const walletNftPromises = map(collections, async (collection): Promise<TokenIdWithCollectionAddress[]> => {\r\n    const { address: collectionAddress } = collection\r\n    const contract = getErc721Contract(collectionAddress)\r\n    let balanceOfResponse\r\n\r\n    try {\r\n      balanceOfResponse = await contract.balanceOf(account)\r\n    } catch (e) {\r\n      console.error(e)\r\n      return []\r\n    }\r\n\r\n    const balanceOf = balanceOfResponse.toNumber()\r\n\r\n    // User has no NFTs for this collection\r\n    if (balanceOfResponse.eq(0)) {\r\n      return []\r\n    }\r\n\r\n    const getTokenId = async (index: number) => {\r\n      try {\r\n        const tokenIdBn: ethers.BigNumber = await contract.tokenOfOwnerByIndex(account, index)\r\n        const tokenId = tokenIdBn.toString()\r\n        return tokenId\r\n      } catch (error) {\r\n        console.error('getTokenIdAndData', error)\r\n        return null\r\n      }\r\n    }\r\n\r\n    const tokenIdPromises = []\r\n\r\n    // For each index get the tokenId\r\n    for (let i = 0; i < balanceOf; i++) {\r\n      tokenIdPromises.push(getTokenId(i))\r\n    }\r\n\r\n    const tokenIds = await Promise.all(tokenIdPromises)\r\n    const nftLocation = NftLocation.WALLET\r\n    const tokensWithCollectionAddress = tokenIds.map((tokenId) => {\r\n      return { tokenId, collectionAddress, nftLocation }\r\n    })\r\n\r\n    return tokensWithCollectionAddress\r\n  })\r\n\r\n  const walletNfts = await Promise.all(walletNftPromises)\r\n  return walletNfts.flat()\r\n}\r\n\r\n/**\r\n * Helper to combine data from the collections' API and subgraph\r\n */\r\nexport const combineCollectionData = (\r\n  collectionApiData: ApiCollection[],\r\n  collectionSgData: CollectionMarketDataBaseFields[],\r\n): Record<string, Collection> => {\r\n  const collectionsMarketObj: Record<string, CollectionMarketDataBaseFields> = collectionSgData.reduce(\r\n    (prev, current) => ({ ...prev, [current.id]: { ...current } }),\r\n    {},\r\n  )\r\n\r\n  return collectionApiData.reduce((accum, current) => {\r\n    const collectionMarket = collectionsMarketObj[current.address.toLowerCase()]\r\n    const collection: Collection = {\r\n      ...current,\r\n      ...collectionMarket,\r\n    }\r\n\r\n    if (current.name) {\r\n      collection.name = current.name\r\n    }\r\n\r\n    return {\r\n      ...accum,\r\n      [current.address]: collection,\r\n    }\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Evaluate whether a market NFT is in a users wallet, their profile picture, or on sale\r\n * @param tokenId string\r\n * @param tokenIdsInWallet array of tokenIds in wallet\r\n * @param tokenIdsForSale array of tokenIds on sale\r\n * @param profileNftId Optional tokenId of users' profile picture\r\n * @returns NftLocation enum value\r\n */\r\nexport const getNftLocationForMarketNft = (\r\n  tokenId: string,\r\n  tokenIdsInWallet: string[],\r\n  tokenIdsForSale: string[],\r\n  profileNftId?: string,\r\n): NftLocation => {\r\n  if (tokenId === profileNftId) {\r\n    return NftLocation.PROFILE\r\n  }\r\n  if (tokenIdsForSale.includes(tokenId)) {\r\n    return NftLocation.FORSALE\r\n  }\r\n  if (tokenIdsInWallet.includes(tokenId)) {\r\n    return NftLocation.WALLET\r\n  }\r\n  console.error(`Cannot determine location for tokenID ${tokenId}, defaulting to NftLocation.WALLET`)\r\n  return NftLocation.WALLET\r\n}\r\n\r\n/**\r\n * Construct complete TokenMarketData entities with a users' wallet NFT ids and market data for their wallet NFTs\r\n * @param walletNfts TokenIdWithCollectionAddress\r\n * @param marketDataForWalletNfts TokenMarketData[]\r\n * @returns TokenMarketData[]\r\n */\r\nexport const attachMarketDataToWalletNfts = (\r\n  walletNfts: TokenIdWithCollectionAddress[],\r\n  marketDataForWalletNfts: TokenMarketData[],\r\n): TokenMarketData[] => {\r\n  const walletNftsWithMarketData = walletNfts.map((walletNft) => {\r\n    const marketData = marketDataForWalletNfts.find(\r\n      (marketNft) =>\r\n        marketNft.tokenId === walletNft.tokenId &&\r\n        marketNft.collection.id.toLowerCase() === walletNft.collectionAddress.toLowerCase(),\r\n    )\r\n    return (\r\n      marketData ?? {\r\n        tokenId: walletNft.tokenId,\r\n        collection: {\r\n          id: walletNft.collectionAddress.toLowerCase(),\r\n        },\r\n        nftLocation: walletNft.nftLocation,\r\n        metadataUrl: null,\r\n        transactionHistory: null,\r\n        currentSeller: null,\r\n        isTradable: null,\r\n        currentAskPrice: null,\r\n        latestTradedPriceInBNB: null,\r\n        tradeVolumeBNB: null,\r\n        totalTrades: null,\r\n        otherId: null,\r\n      }\r\n    )\r\n  })\r\n  return walletNftsWithMarketData\r\n}\r\n\r\n/**\r\n * Attach TokenMarketData and location to NftToken\r\n * @param nftsWithMetadata NftToken[] with API metadata\r\n * @param nftsForSale  market data for nfts that are on sale (i.e. not in a user's wallet)\r\n * @param walletNfts market data for nfts in a user's wallet\r\n * @param tokenIdsInWallet array of token ids in user's wallet\r\n * @param tokenIdsForSale array of token ids of nfts that are on sale\r\n * @param profileNftId profile picture token id\r\n * @returns NFT[]\r\n */\r\nexport const combineNftMarketAndMetadata = (\r\n  nftsWithMetadata: NftToken[],\r\n  nftsForSale: TokenMarketData[],\r\n  walletNfts: TokenMarketData[],\r\n  tokenIdsInWallet: string[],\r\n  tokenIdsForSale: string[],\r\n  profileNftId?: string,\r\n): NftToken[] => {\r\n  const completeNftData = nftsWithMetadata.map<NftToken>((nft) => {\r\n    // Get metadata object\r\n    const isOnSale = nftsForSale.filter((forSaleNft) => forSaleNft.tokenId === nft.tokenId).length > 0\r\n    let marketData\r\n    if (isOnSale) {\r\n      marketData = nftsForSale.find((marketNft) => marketNft.tokenId === nft.tokenId)\r\n    } else {\r\n      marketData = walletNfts.find((marketNft) => marketNft.tokenId === nft.tokenId)\r\n    }\r\n    const location = getNftLocationForMarketNft(nft.tokenId, tokenIdsInWallet, tokenIdsForSale, profileNftId)\r\n    return { ...nft, marketData, location }\r\n  })\r\n  return completeNftData\r\n}\r\n\r\n/**\r\n * Get in-wallet, on-sale & profile pic NFT metadata, complete with market data for a given account\r\n * @param account\r\n * @param collections\r\n * @param profileNftWithCollectionAddress\r\n * @returns Promise<NftToken[]>\r\n */\r\nexport const getCompleteAccountNftData = async (\r\n  account: string,\r\n  collections: ApiCollections,\r\n  profileNftWithCollectionAddress?: TokenIdWithCollectionAddress,\r\n): Promise<NftToken[]> => {\r\n  const walletNftIdsWithCollectionAddress = await fetchWalletTokenIdsForCollections(account, collections)\r\n  if (profileNftWithCollectionAddress?.tokenId) {\r\n    walletNftIdsWithCollectionAddress.unshift(profileNftWithCollectionAddress)\r\n  }\r\n\r\n  const uniqueCollectionAddresses = uniq(\r\n    walletNftIdsWithCollectionAddress.map((walletNftId) => walletNftId.collectionAddress),\r\n  )\r\n\r\n  const walletNftsByCollection = uniqueCollectionAddresses.map((collectionAddress) => {\r\n    return {\r\n      collectionAddress,\r\n      idWithCollectionAddress: walletNftIdsWithCollectionAddress.filter(\r\n        (walletNft) => walletNft.collectionAddress === collectionAddress,\r\n      ),\r\n    }\r\n  })\r\n\r\n  const walletMarketDataRequests = walletNftsByCollection.map((walletNftByCollection) => {\r\n    const tokenIdIn = walletNftByCollection.idWithCollectionAddress.map((walletNft) => walletNft.tokenId)\r\n    return getNftsMarketData({\r\n      tokenId_in: tokenIdIn,\r\n      collection: walletNftByCollection.collectionAddress.toLowerCase(),\r\n    })\r\n  })\r\n\r\n  const walletMarketDataResponses = await Promise.all(walletMarketDataRequests)\r\n  const walletMarketData = walletMarketDataResponses.flat()\r\n\r\n  const walletNftsWithMarketData = attachMarketDataToWalletNfts(walletNftIdsWithCollectionAddress, walletMarketData)\r\n\r\n  const walletTokenIds = walletNftIdsWithCollectionAddress\r\n    .filter((walletNft) => {\r\n      // Profile Pic NFT is no longer wanted in this array, hence the filter\r\n      return profileNftWithCollectionAddress?.tokenId !== walletNft.tokenId\r\n    })\r\n    .map((nft) => nft.tokenId)\r\n\r\n  const marketDataForSaleNfts = await getNftsMarketData({ currentSeller: account.toLowerCase() })\r\n  const tokenIdsForSale = marketDataForSaleNfts.map((nft) => nft.tokenId)\r\n\r\n  const forSaleNftIds = marketDataForSaleNfts.map((nft) => {\r\n    return { collectionAddress: nft.collection.id, tokenId: nft.tokenId }\r\n  })\r\n\r\n  const metadataForAllNfts = await getNftsFromDifferentCollectionsApi([\r\n    ...forSaleNftIds,\r\n    ...walletNftIdsWithCollectionAddress,\r\n  ])\r\n\r\n  const completeNftData = combineNftMarketAndMetadata(\r\n    metadataForAllNfts,\r\n    marketDataForSaleNfts,\r\n    walletNftsWithMarketData,\r\n    walletTokenIds,\r\n    tokenIdsForSale,\r\n    profileNftWithCollectionAddress?.tokenId,\r\n  )\r\n\r\n  return completeNftData\r\n}\r\n\r\n/**\r\n * Fetch distribution information for a collection\r\n * @returns\r\n */\r\nexport const getCollectionDistributionApi = async <T>(collectionAddress: string): Promise<T> => {\r\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}/distribution`)\r\n  if (res.ok) {\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n  console.error(`API: Failed to fetch NFT collection ${collectionAddress} distribution`, res.statusText)\r\n  return null\r\n}\r\n","export const getBaseNftFields = () => `\r\n  tokenId\r\n  metadataUrl\r\n  currentAskPrice\r\n  currentSeller\r\n  latestTradedPriceInBNB\r\n  tradeVolumeBNB\r\n  totalTrades\r\n  isTradable\r\n  updatedAt\r\n  otherId\r\n  collection {\r\n    id\r\n  }\r\n`\r\n\r\nexport const getBaseTransactionFields = () => `\r\n  id\r\n  block\r\n  timestamp\r\n  askPrice\r\n  netPrice\r\n  withBNB\r\n  buyer {\r\n    id\r\n  }\r\n  seller {\r\n    id\r\n  }\r\n`\r\n\r\nexport const getCollectionBaseFields = () => `\r\n  id\r\n  name\r\n  symbol\r\n  active\r\n  totalTrades\r\n  totalVolumeBNB\r\n  numberTokensListed\r\n  creatorAddress\r\n  tradingFee\r\n  creatorFee\r\n  whitelistChecker\r\n`\r\n","import { createAction } from '@reduxjs/toolkit'\r\nimport { DerivedPairDataNormalized, PairDataNormalized, PairDataTimeWindowEnum } from './types'\r\n\r\nexport enum Field {\r\n  INPUT = 'INPUT',\r\n  OUTPUT = 'OUTPUT',\r\n}\r\n\r\nexport const selectCurrency = createAction<{ field: Field; currencyId: string }>('swap/selectCurrency')\r\nexport const switchCurrencies = createAction<void>('swap/switchCurrencies')\r\nexport const typeInput = createAction<{ field: Field; typedValue: string }>('swap/typeInput')\r\nexport const replaceSwapState = createAction<{\r\n  field: Field\r\n  typedValue: string\r\n  inputCurrencyId?: string\r\n  outputCurrencyId?: string\r\n  recipient: string | null\r\n}>('swap/replaceSwapState')\r\nexport const setRecipient = createAction<{ recipient: string | null }>('swap/setRecipient')\r\nexport const updatePairData =\r\n  createAction<{ pairData: PairDataNormalized; pairId: string; timeWindow: PairDataTimeWindowEnum }>(\r\n    'swap/updatePairData',\r\n  )\r\nexport const updateDerivedPairData =\r\n  createAction<{ pairData: DerivedPairDataNormalized; pairId: string; timeWindow: PairDataTimeWindowEnum }>(\r\n    'swap/updateDerivedPairData',\r\n  )\r\n","import { BigNumberish } from 'ethers'\r\n\r\n// Collections -> Nfts -> Transactions\r\n// Users -> Nft tokens IDs\r\n\r\n// TODO: Handle the error state on the UI\r\nexport enum NFTMarketInitializationState {\r\n  UNINITIALIZED = 'UNINITIALIZED',\r\n  INITIALIZED = 'INITIALIZED',\r\n  ERROR = 'ERROR',\r\n}\r\n\r\nexport enum UserNftInitializationState {\r\n  UNINITIALIZED = 'UNINITIALIZED',\r\n  INITIALIZING = 'INITIALIZING',\r\n  INITIALIZED = 'INITIALIZED',\r\n  ERROR = 'ERROR',\r\n}\r\n\r\nexport enum NftFilterLoadingState {\r\n  IDLE = 'IDLE',\r\n  LOADING = 'LOADING',\r\n}\r\n\r\nexport interface State {\r\n  initializationState: NFTMarketInitializationState\r\n  data: {\r\n    collections: Record<string, Collection> // string is the address\r\n    nfts: Record<string, NftToken[]> // string is the collection address\r\n    filters: Record<string, NftFilter> // string is the collection address\r\n    loadingState: {\r\n      isUpdatingPancakeBunnies: boolean\r\n      latestPancakeBunniesUpdateAt: number\r\n    }\r\n    users: Record<string, User> // string is the address\r\n    user: UserNftsState\r\n  }\r\n}\r\n\r\nexport interface UserNftsState {\r\n  userNftsInitializationState: UserNftInitializationState\r\n  nfts: NftToken[]\r\n  activity: UserActivity\r\n}\r\n\r\nexport interface Transaction {\r\n  id: string\r\n  block: string\r\n  timestamp: string\r\n  askPrice: string\r\n  netPrice: string\r\n  buyer: { id: string }\r\n  seller: { id: string }\r\n  withBNB: boolean\r\n  nft?: TokenMarketData\r\n}\r\n\r\nexport enum AskOrderType {\r\n  NEW = 'NEW',\r\n  MODIFY = 'MODIFY',\r\n  CANCEL = 'CANCEL',\r\n}\r\n\r\nexport interface AskOrder {\r\n  id: string\r\n  block: string\r\n  timestamp: string\r\n  askPrice: string\r\n  orderType: AskOrderType\r\n  nft?: TokenMarketData\r\n}\r\n\r\nexport interface Image {\r\n  original: string\r\n  thumbnail: string\r\n  mp4?: string\r\n  webm?: string\r\n  gif?: string\r\n}\r\n\r\nexport enum NftLocation {\r\n  FORSALE = 'For Sale',\r\n  PROFILE = 'Profile Pic',\r\n  WALLET = 'In Wallet',\r\n}\r\n\r\n// Market data regarding specific token ID, acquired via subgraph\r\nexport interface TokenMarketData {\r\n  tokenId: string\r\n  metadataUrl: string\r\n  currentAskPrice: string\r\n  currentSeller: string\r\n  latestTradedPriceInBNB: string\r\n  tradeVolumeBNB: string\r\n  totalTrades: string\r\n  isTradable: boolean\r\n  otherId: string\r\n  collection?: {\r\n    id: string\r\n  }\r\n  updatedAt?: string\r\n  transactionHistory?: Transaction[]\r\n}\r\n\r\n// Represents single NFT token, either Squad-like NFT or single PancakeBunny.\r\nexport interface NftToken {\r\n  tokenId: string\r\n  name: string\r\n  description: string\r\n  collectionName: string\r\n  collectionAddress: string\r\n  image: Image\r\n  attributes?: NftAttribute[]\r\n  createdAt?: string // API createdAt\r\n  updatedAt?: string // API updatedAt\r\n  marketData?: TokenMarketData\r\n  location?: NftLocation\r\n  meta?: Record<string, string | number>\r\n}\r\n\r\nexport interface NftFilter {\r\n  loadingState: NftFilterLoadingState\r\n  activeFilters: Record<string, NftAttribute>\r\n  showOnlyOnSale: boolean\r\n  ordering: {\r\n    field: string\r\n    direction: 'asc' | 'desc'\r\n  }\r\n}\r\n\r\nexport interface TokenIdWithCollectionAddress {\r\n  collectionAddress: string\r\n  tokenId: string\r\n  nftLocation?: NftLocation\r\n}\r\n\r\nexport interface NftAttribute {\r\n  traitType: string\r\n  value: string | number\r\n  displayType: string\r\n}\r\n\r\n// Internal type used to refer to a collection\r\n// Most fields are populated from API (via ApiCollection type)\r\nexport interface Collection {\r\n  id: string\r\n  address: string\r\n  name: string\r\n  description?: string\r\n  symbol: string\r\n  active: boolean\r\n  totalVolumeBNB: string\r\n  numberTokensListed: string\r\n  tradingFee: string\r\n  creatorFee: string\r\n  owner: string\r\n  totalSupply: string\r\n  verified: boolean\r\n  avatar: string\r\n  banner: {\r\n    large: string\r\n    small: string\r\n  }\r\n  attributes?: NftAttribute[]\r\n}\r\n\r\nexport interface ApiCollections {\r\n  [key: string]: Collection\r\n}\r\n\r\nexport interface User {\r\n  address: string\r\n  numberTokensListed: BigNumberish\r\n  numberTokensPurchased: BigNumberish\r\n  numberTokensSold: BigNumberish\r\n  nfts: Record<string, BigNumberish> // String is an address, BigNumberish is a tokenID\r\n}\r\n\r\n/**\r\n * API RESPONSES\r\n */\r\n\r\nexport interface ApiCollection {\r\n  address: string\r\n  owner: string\r\n  name: string\r\n  description: string\r\n  symbol: string\r\n  totalSupply: string\r\n  verified: boolean\r\n  createdAt: string\r\n  updatedAt: string\r\n  avatar: string\r\n  banner: {\r\n    large: string\r\n    small: string\r\n  }\r\n  attributes?: NftAttribute[] // returned for specific collection but not for all collections\r\n}\r\n\r\n// Get all collections\r\n// ${API_NFT}/collections/\r\nexport interface ApiCollectionsResponse {\r\n  total: number\r\n  data: ApiCollection[]\r\n}\r\n\r\n// Get single collection\r\n// ${API_NFT}/collections/${collectionAddress}\r\nexport interface ApiSingleCollectionResponse {\r\n  data: ApiCollection\r\n}\r\n\r\n// Get single collection\r\n// ${API_NFT}/collections/${collectionAddress}\r\nexport interface ApiTokenFilterResponse {\r\n  total: number\r\n  data: Record<string, ApiSingleTokenData>\r\n}\r\n\r\nexport interface ApiSingleTokenData {\r\n  name: string\r\n  description: string\r\n  image: Image\r\n  collection: {\r\n    name: string\r\n  }\r\n  attributes?: NftAttribute[]\r\n  tokenId?: string\r\n}\r\n\r\n// Get tokens within collection\r\n// ${API_NFT}/collections/${collectionAddress}/tokens\r\nexport interface ApiResponseCollectionTokens {\r\n  total: number\r\n  attributesDistribution: Record<string, number>\r\n  data: Record<string, ApiSingleTokenData>\r\n}\r\n\r\n// Get specific token data\r\n// ${API_NFT}/collections/${collectionAddress}/tokens/${tokenId}\r\nexport interface ApiResponseSpecificToken {\r\n  data: {\r\n    tokenId: string\r\n    name: string\r\n    description: string\r\n    image: Image\r\n    createdAt: string\r\n    updatedAt: string\r\n    attributes: NftAttribute[]\r\n    collection: {\r\n      name: string\r\n    }\r\n  }\r\n}\r\n\r\n// ${API_NFT}/collections/${collectionAddress}/distribution\r\nexport interface ApiCollectionDistribution {\r\n  total: number\r\n  data: Record<string, Record<string, number>>\r\n}\r\n\r\nexport interface ApiCollectionDistributionPB {\r\n  total: number\r\n  data: Record<string, number>\r\n}\r\n\r\n/**\r\n * SUBGRAPH RESPONSES\r\n */\r\n\r\nexport interface CollectionMarketDataBaseFields {\r\n  id: string\r\n  name: string\r\n  symbol: string\r\n  active: boolean\r\n  totalTrades: string\r\n  totalVolumeBNB: string\r\n  numberTokensListed: string\r\n  creatorAddress: string\r\n  tradingFee: string\r\n  creatorFee: string\r\n  whitelistChecked: string\r\n}\r\n\r\nexport interface UserActivity {\r\n  askOrderHistory: AskOrder[]\r\n  buyTradeHistory: Transaction[]\r\n  sellTradeHistory: Transaction[]\r\n  initializationState: UserNftInitializationState\r\n}\r\n","import { Token } from '@pancakeswap/sdk'\r\nimport { SerializedToken } from 'config/constants/types'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\n\r\nexport function serializeToken(token: Token): SerializedToken {\r\n  return {\r\n    chainId: token.chainId,\r\n    address: token.address,\r\n    decimals: token.decimals,\r\n    symbol: token.symbol,\r\n    name: token.name,\r\n    projectLink: token.projectLink,\r\n  }\r\n}\r\n\r\nexport function deserializeToken(serializedToken: SerializedToken): Token {\r\n  return new Token(\r\n    serializedToken.chainId,\r\n    serializedToken.address,\r\n    serializedToken.decimals,\r\n    serializedToken.symbol,\r\n    serializedToken.name,\r\n    serializedToken.projectLink,\r\n  )\r\n}\r\n\r\nexport enum GAS_PRICE {\r\n  default = '5',\r\n  fast = '6',\r\n  instant = '7',\r\n  testnet = '10',\r\n}\r\n\r\nexport const GAS_PRICE_GWEI = {\r\n  default: parseUnits(GAS_PRICE.default, 'gwei').toString(),\r\n  fast: parseUnits(GAS_PRICE.fast, 'gwei').toString(),\r\n  instant: parseUnits(GAS_PRICE.instant, 'gwei').toString(),\r\n  testnet: parseUnits(GAS_PRICE.testnet, 'gwei').toString(),\r\n}\r\n","const PANCAKE_EXTENDED = 'https://tokens.pancakeswap.finance/pancakeswap-extended.json'\r\nconst PANCAKE_TOP100 = 'https://tokens.pancakeswap.finance/pancakeswap-top-100.json'\r\n\r\nexport const UNSUPPORTED_LIST_URLS: string[] = []\r\n\r\n// lower index == higher priority for token import\r\nexport const DEFAULT_LIST_OF_LISTS: string[] = [\r\n  PANCAKE_TOP100,\r\n  PANCAKE_EXTENDED,\r\n  ...UNSUPPORTED_LIST_URLS, // need to load unsupported tokens as well\r\n]\r\n\r\n// default lists to be 'active' aka searched across\r\nexport const DEFAULT_ACTIVE_LIST_URLS: string[] = []\r\n","/* eslint-disable */\r\n\r\nfunction wait(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms))\r\n}\r\n\r\nfunction waitRandom(min: number, max: number): Promise<void> {\r\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\r\n}\r\n\r\n/**\r\n * This error is thrown if the function is cancelled before completing\r\n */\r\nexport class CancelledError extends Error {\r\n  constructor() {\r\n    super('Cancelled')\r\n  }\r\n}\r\n\r\n/**\r\n * Throw this error if the function should retry\r\n */\r\nexport class RetryableError extends Error {}\r\n\r\n/**\r\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\r\n * @param fn function to retry\r\n * @param n how many times to retry\r\n * @param minWait min wait between retries in ms\r\n * @param maxWait max wait between retries in ms\r\n */\r\nexport function retry<T>(\r\n  fn: () => Promise<T>,\r\n  { n, minWait, maxWait }: { n: number; minWait: number; maxWait: number },\r\n): { promise: Promise<T>; cancel: () => void } {\r\n  let completed = false\r\n  let rejectCancelled: (error: Error) => void\r\n  const promise = new Promise<T>(async (resolve, reject) => {\r\n    rejectCancelled = reject\r\n    while (true) {\r\n      let result: T\r\n      try {\r\n        result = await fn()\r\n        if (!completed) {\r\n          resolve(result)\r\n          completed = true\r\n        }\r\n        break\r\n      } catch (error) {\r\n        if (completed) {\r\n          break\r\n        }\r\n        if (n <= 0 || !(error instanceof RetryableError)) {\r\n          reject(error)\r\n          completed = true\r\n          break\r\n        }\r\n        n--\r\n      }\r\n      await waitRandom(minWait, maxWait)\r\n    }\r\n  })\r\n  return {\r\n    promise,\r\n    cancel: () => {\r\n      if (completed) return\r\n      completed = true\r\n      rejectCancelled(new CancelledError())\r\n    },\r\n  }\r\n}\r\n\r\n/* eslint-enable */\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { useEffect, useMemo, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useMulticallContract } from '../../hooks/useContract'\r\nimport useDebounce from '../../hooks/useDebounce'\r\nimport { CancelledError, retry, RetryableError } from './retry'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport {\r\n  Call,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  parseCallKey,\r\n  updateMulticallResults,\r\n} from './actions'\r\nimport chunkArray from './chunkArray'\r\n\r\n// chunk calls so we do not exceed the gas limit\r\nconst CALL_CHUNK_SIZE = 500\r\n\r\n/**\r\n * Fetches a chunk of calls, enforcing a minimum block number constraint\r\n * @param multicallContract multicall contract to fetch against\r\n * @param chunk chunk of calls to make\r\n * @param minBlockNumber minimum block number of the result set\r\n */\r\nasync function fetchChunk(\r\n  multicallContract: Contract,\r\n  chunk: Call[],\r\n  minBlockNumber: number,\r\n): Promise<{ results: string[]; blockNumber: number }> {\r\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber)\r\n  let resultsBlockNumber\r\n  let returnData\r\n  try {\r\n    // prettier-ignore\r\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(\r\n      chunk.map((obj) => [obj.address, obj.callData])\r\n    )\r\n  } catch (error) {\r\n    console.debug('Failed to fetch chunk inside retry', error)\r\n    throw error\r\n  }\r\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\r\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`)\r\n    throw new RetryableError('Fetched for old block number')\r\n  }\r\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() }\r\n}\r\n\r\n/**\r\n * From the current all listeners state, return each call key mapped to the\r\n * minimum number of blocks per fetch. This is how often each key must be fetched.\r\n * @param allListeners the all listeners state\r\n * @param chainId the current chain id\r\n */\r\nexport function activeListeningKeys(\r\n  allListeners: AppState['multicall']['callListeners'],\r\n  chainId?: number,\r\n): { [callKey: string]: number } {\r\n  if (!allListeners || !chainId) return {}\r\n  const listeners = allListeners[chainId]\r\n  if (!listeners) return {}\r\n\r\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\r\n    const keyListeners = listeners[callKey]\r\n\r\n    memo[callKey] = Object.keys(keyListeners)\r\n      .filter((key) => {\r\n        const blocksPerFetch = parseInt(key)\r\n        if (blocksPerFetch <= 0) return false\r\n        return keyListeners[blocksPerFetch] > 0\r\n      })\r\n      .reduce((previousMin, current) => {\r\n        return Math.min(previousMin, parseInt(current))\r\n      }, Infinity)\r\n    return memo\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Return the keys that need to be refetched\r\n * @param callResults current call result state\r\n * @param listeningKeys each call key mapped to how old the data can be in blocks\r\n * @param chainId the current chain id\r\n * @param currentBlock the latest block number\r\n */\r\nexport function outdatedListeningKeys(\r\n  callResults: AppState['multicall']['callResults'],\r\n  listeningKeys: { [callKey: string]: number },\r\n  chainId: number | undefined,\r\n  currentBlock: number | undefined,\r\n): string[] {\r\n  if (!chainId || !currentBlock) return []\r\n  const results = callResults[chainId]\r\n  // no results at all, load everything\r\n  if (!results) return Object.keys(listeningKeys)\r\n\r\n  return Object.keys(listeningKeys).filter((callKey) => {\r\n    const blocksPerFetch = listeningKeys[callKey]\r\n\r\n    const data = callResults[chainId][callKey]\r\n    // no data, must fetch\r\n    if (!data) return true\r\n\r\n    const minDataBlockNumber = currentBlock - (blocksPerFetch - 1)\r\n\r\n    // already fetching it for a recent enough block, don't refetch it\r\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\r\n\r\n    // if data is older than minDataBlockNumber, fetch it\r\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\r\n  })\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const state = useSelector<AppState, AppState['multicall']>((s) => s.multicall)\r\n  // wait for listeners to settle before triggering updates\r\n  const debouncedListeners = useDebounce(state.callListeners, 100)\r\n  const { currentBlock } = useBlock()\r\n  const { chainId } = useActiveWeb3React()\r\n  const multicallContract = useMulticallContract()\r\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\r\n\r\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\r\n    return activeListeningKeys(debouncedListeners, chainId)\r\n  }, [debouncedListeners, chainId])\r\n\r\n  const unserializedOutdatedCallKeys = useMemo(() => {\r\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, currentBlock)\r\n  }, [chainId, state.callResults, listeningKeys, currentBlock])\r\n\r\n  const serializedOutdatedCallKeys = useMemo(\r\n    () => JSON.stringify(unserializedOutdatedCallKeys.sort()),\r\n    [unserializedOutdatedCallKeys],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!currentBlock || !chainId || !multicallContract) return\r\n\r\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\r\n    if (outdatedCallKeys.length === 0) return\r\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\r\n\r\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE)\r\n\r\n    if (cancellations.current?.blockNumber !== currentBlock) {\r\n      cancellations.current?.cancellations?.forEach((c) => c())\r\n    }\r\n\r\n    dispatch(\r\n      fetchingMulticallResults({\r\n        calls,\r\n        chainId,\r\n        fetchingBlockNumber: currentBlock,\r\n      }),\r\n    )\r\n\r\n    cancellations.current = {\r\n      blockNumber: currentBlock,\r\n      cancellations: chunkedCalls.map((chunk, index) => {\r\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, currentBlock), {\r\n          n: Infinity,\r\n          minWait: 2500,\r\n          maxWait: 3500,\r\n        })\r\n        promise\r\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\r\n            cancellations.current = { cancellations: [], blockNumber: currentBlock }\r\n\r\n            // accumulates the length of all previous indices\r\n            const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce<number>((memo, curr) => memo + curr.length, 0)\r\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length\r\n\r\n            dispatch(\r\n              updateMulticallResults({\r\n                chainId,\r\n                results: outdatedCallKeys\r\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\r\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\r\n                    memo[callKey] = returnData[i] ?? null\r\n                    return memo\r\n                  }, {}),\r\n                blockNumber: fetchBlockNumber,\r\n              }),\r\n            )\r\n          })\r\n          .catch((error: any) => {\r\n            if (error instanceof CancelledError) {\r\n              console.debug('Cancelled fetch for blockNumber', currentBlock)\r\n              return\r\n            }\r\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error)\r\n            dispatch(\r\n              errorFetchingMulticallResults({\r\n                calls: chunk,\r\n                chainId,\r\n                fetchingBlockNumber: currentBlock,\r\n              }),\r\n            )\r\n          })\r\n        return cancel\r\n      }),\r\n    }\r\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, currentBlock])\r\n\r\n  return null\r\n}\r\n","// chunks array into chunks of maximum size\r\n// evenly distributes items among the chunks\r\nexport default function chunkArray<T>(items: T[], maxChunkSize: number): T[][] {\r\n  if (maxChunkSize < 1) throw new Error('maxChunkSize must be gte 1')\r\n  if (items.length <= maxChunkSize) return [items]\r\n\r\n  const numChunks: number = Math.ceil(items.length / maxChunkSize)\r\n  const chunkSize = Math.ceil(items.length / numChunks)\r\n\r\n  return [...Array(numChunks).keys()].map((ix) => items.slice(ix * chunkSize, ix * chunkSize + chunkSize))\r\n}\r\n","import React, { useEffect, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Text, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { checkedTransaction, finalizeTransaction } from './actions'\r\n\r\nexport function shouldCheck(\r\n  currentBlock: number,\r\n  tx: { addedTime: number; receipt?: any; lastCheckedBlockNumber?: number },\r\n): boolean {\r\n  if (tx.receipt) return false\r\n  if (!tx.lastCheckedBlockNumber) return true\r\n  const blocksSinceCheck = currentBlock - tx.lastCheckedBlockNumber\r\n  if (blocksSinceCheck < 1) return false\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9\r\n  }\r\n  if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2\r\n  }\r\n  // otherwise every block\r\n  return true\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const { library, chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n\r\n  const { currentBlock } = useBlock()\r\n\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\r\n\r\n  const transactions = useMemo(() => (chainId ? state[chainId] ?? {} : {}), [chainId, state])\r\n\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !library || !currentBlock) return\r\n\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(currentBlock, transactions[hash]))\r\n      .forEach((hash) => {\r\n        library\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                }),\r\n              )\r\n\r\n              const toast = receipt.status === 1 ? toastSuccess : toastError\r\n              toast(\r\n                t('Transaction receipt'),\r\n                <Flex flexDirection=\"column\">\r\n                  <Text>{transactions[hash]?.summary ?? `Hash: ${hash.slice(0, 8)}...${hash.slice(58, 65)}`}</Text>\r\n                  {chainId && (\r\n                    <Link external href={getBscScanLink(hash, 'transaction', chainId)}>\r\n                      {t('View on BscScan')}\r\n                    </Link>\r\n                  )}\r\n                </Flex>,\r\n              )\r\n            } else {\r\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: currentBlock }))\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error)\r\n          })\r\n      })\r\n  }, [chainId, library, transactions, currentBlock, dispatch, toastSuccess, toastError, t])\r\n\r\n  return null\r\n}\r\n","import { useEffect } from 'react'\r\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\n\r\nconst _binanceChainListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'BinanceChain', {\r\n      get() {\r\n        return this.bsc\r\n      },\r\n      set(bsc) {\r\n        this.bsc = bsc\r\n\r\n        resolve()\r\n      },\r\n    }),\r\n  )\r\n\r\nconst useEagerConnect = () => {\r\n  const { login } = useAuth()\r\n\r\n  useEffect(() => {\r\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\r\n\r\n    if (connectorId) {\r\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC\r\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain')\r\n\r\n      // Currently BSC extension doesn't always inject in time.\r\n      // We must check to see if it exists, and if not, wait for it before proceeding.\r\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\r\n        _binanceChainListener().then(() => login(connectorId))\r\n\r\n        return\r\n      }\r\n\r\n      login(connectorId)\r\n    }\r\n  }, [login])\r\n}\r\n\r\nexport default useEagerConnect\r\n","import { useEffect } from 'react'\r\n\r\nconst useUserAgent = () => {\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-useragent', navigator.userAgent)\r\n  }, [])\r\n}\r\n\r\nexport default useUserAgent\r\n","import { createBrowserHistory } from 'history'\r\n\r\n// Manually create the history object so we can access outside the Router e.g. in modals\r\nconst history = createBrowserHistory()\r\n\r\nexport default history\r\n","import { useEffect } from 'react'\r\nimport history from 'routerHistory'\r\n\r\nconst useScrollOnRouteChange = () => {\r\n  useEffect(() => {\r\n    const unlisten = history.listen((args) => {\r\n      if (args.hash === '') {\r\n        setTimeout(() => {\r\n          window.scroll({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: 'smooth',\r\n          })\r\n        }, 50)\r\n      }\r\n    })\r\n\r\n    return () => unlisten()\r\n  }, [])\r\n}\r\n\r\nexport default useScrollOnRouteChange\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledDatePickerPortal = styled.div`\r\n  .react-datepicker-wrapper,\r\n  .react-datepicker__input-container {\r\n    display: block;\r\n  }\r\n\r\n  .react-datepicker {\r\n    background: ${({ theme }) => theme.card.background};\r\n    border-color: ${({ theme }) => theme.colors.cardBorder};\r\n    color: ${({ theme }) => theme.colors.text};\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n\r\n  .react-datepicker__header {\r\n    background: ${({ theme }) => theme.colors.input};\r\n    border-color: ${({ theme }) => theme.colors.cardBorder};\r\n  }\r\n\r\n  .react-datepicker__current-month,\r\n  .react-datepicker-time__header,\r\n  .react-datepicker-year-header,\r\n  .react-datepicker__day-name,\r\n  .react-datepicker__day,\r\n  .react-datepicker__time-name {\r\n    color: ${({ theme }) => theme.colors.text};\r\n  }\r\n\r\n  .react-datepicker__day:hover,\r\n  .react-datepicker__month-text:hover,\r\n  .react-datepicker__quarter-text:hover,\r\n  .react-datepicker__year-text:hover {\r\n    background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  }\r\n\r\n  .react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::before,\r\n  .react-datepicker-popper[data-placement^='bottom'] .react-datepicker__triangle::after {\r\n    border-bottom-color: ${({ theme }) => theme.colors.cardBorder};\r\n  }\r\n\r\n  .react-datepicker__day--selected,\r\n  .react-datepicker__day--in-selecting-range,\r\n  .react-datepicker__day--in-range,\r\n  .react-datepicker__month-text--selected,\r\n  .react-datepicker__month-text--in-selecting-range,\r\n  .react-datepicker__month-text--in-range,\r\n  .react-datepicker__quarter-text--selected,\r\n  .react-datepicker__quarter-text--in-selecting-range,\r\n  .react-datepicker__quarter-text--in-range,\r\n  .react-datepicker__year-text--selected,\r\n  .react-datepicker__year-text--in-selecting-range,\r\n  .react-datepicker__year-text--in-range {\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n  }\r\n\r\n  .react-datepicker__day--selected:hover,\r\n  .react-datepicker__day--in-selecting-range:hover,\r\n  .react-datepicker__day--in-range:hover,\r\n  .react-datepicker__month-text--selected:hover,\r\n  .react-datepicker__month-text--in-selecting-range:hover,\r\n  .react-datepicker__month-text--in-range:hover,\r\n  .react-datepicker__quarter-text--selected:hover,\r\n  .react-datepicker__quarter-text--in-selecting-range:hover,\r\n  .react-datepicker__quarter-text--in-range:hover,\r\n  .react-datepicker__year-text--selected:hover,\r\n  .react-datepicker__year-text--in-selecting-range:hover,\r\n  .react-datepicker__year-text--in-range:hover {\r\n    background-color: ${({ theme }) => theme.colors.primaryBright};\r\n  }\r\n\r\n  .react-datepicker__day--keyboard-selected,\r\n  .react-datepicker__month-text--keyboard-selected,\r\n  .react-datepicker__quarter-text--keyboard-selected,\r\n  .react-datepicker__year-text--keyboard-selected {\r\n    background-color: ${({ theme }) => theme.colors.secondary};\r\n    color: #ffffff;\r\n  }\r\n\r\n  .react-datepicker__day--keyboard-selected:hover,\r\n  .react-datepicker__month-text--keyboard-selected:hover,\r\n  .react-datepicker__quarter-text--keyboard-selected:hover,\r\n  .react-datepicker__year-text--keyboard-selected:hover {\r\n    background-color: ${({ theme }) => theme.colors.secondary};\r\n    color: #ffffff;\r\n  }\r\n\r\n  .react-datepicker__time-container,\r\n  .react-datepicker__time-container .react-datepicker__time .react-datepicker__time-box {\r\n    width: 120px;\r\n  }\r\n\r\n  .react-datepicker__header--time {\r\n    padding: 8px;\r\n  }\r\n\r\n  .react-datepicker__time-container\r\n    .react-datepicker__time\r\n    .react-datepicker__time-box\r\n    ul.react-datepicker__time-list\r\n    li.react-datepicker__time-list-item {\r\n    height: auto;\r\n    padding: 8px;\r\n  }\r\n`\r\n\r\nconst DatePickerPortal = () => {\r\n  return <StyledDatePickerPortal id=\"reactDatePicker\" />\r\n}\r\n\r\nexport default DatePickerPortal\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap/uikit/dist/theme'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","import React, { Suspense, SuspenseProps } from 'react'\r\n\r\ninterface State {\r\n  hasError: boolean\r\n}\r\n\r\nclass SuspenseWithChunkError extends React.Component<SuspenseProps, State> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true }\r\n  }\r\n\r\n  componentDidCatch(error) {\r\n    const isJsChunkLoadError = error.name === 'ChunkLoadError'\r\n    const isCssChunkLoadError = error.code === 'CSS_CHUNK_LOAD_FAILED'\r\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError\r\n\r\n    // Save a flag on the window object indicating that we have already had a chunk error.\r\n    // This prevents infinite reloads\r\n    const isRecoveringFromChunkError = !!window.history.state?.isRecoveringFromChunkError\r\n\r\n    // If was a chunk load error, refresh the page\r\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\r\n      const nextState = { ...window.history.state, isRecoveringFromChunkError: true }\r\n      window.history.replaceState(nextState, '')\r\n      window.location.reload()\r\n      return\r\n    }\r\n\r\n    throw error\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state\r\n    const { fallback } = this.props\r\n\r\n    if (hasError) {\r\n      return fallback\r\n    }\r\n\r\n    return <Suspense {...this.props} />\r\n  }\r\n}\r\n\r\nexport default SuspenseWithChunkError\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap/uikit'\r\nimport Page from '../Layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <div>Loading...</div>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import React, { lazy } from 'react'\r\nimport { Router, Route, Switch } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport useEagerConnect from 'hooks/useEagerConnect'\r\nimport useUserAgent from 'hooks/useUserAgent'\r\nimport useScrollOnRouteChange from 'hooks/useScrollOnRouteChange'\r\nimport { usePollBlockNumber } from 'state/block/hooks'\r\nimport { usePollCoreFarmData } from 'state/farms/hooks'\r\nimport { useFetchProfile } from 'state/profile/hooks'\r\nimport { DatePickerPortal } from 'components/DatePicker'\r\nimport GlobalStyle from './style/Global'\r\nimport SuspenseWithChunkError from './components/SuspenseWithChunkError'\r\nimport PageLoader from './components/Loader/PageLoader'\r\nimport history from './routerHistory'\r\nimport { ToastListener } from './contexts/ToastsContext'\r\nimport { StyleSheetManager } from 'styled-components'\r\n\r\nimport { useInactiveListener } from './hooks/useInactiveListener'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page\r\nconst Lottery = lazy(() => import('./views/Lottery'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n\r\n// This config is required for number formatting\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n\r\n  usePollBlockNumber()\r\n  useEagerConnect()\r\n  useFetchProfile()\r\n  usePollCoreFarmData()\r\n  useScrollOnRouteChange()\r\n  useUserAgent()\r\n  useInactiveListener()\r\n\r\n  //  stylisPlugins={[stylisImportantPlugin]}\r\n  return (\r\n    <StyleSheetManager disableCSSOMInjection={true} target={document.getElementById('lottery-style-holder')}>\r\n      <Router history={history}>\r\n        <GlobalStyle />\r\n        <SuspenseWithChunkError fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\">\r\n              <Lottery />\r\n            </Route>\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </SuspenseWithChunkError>\r\n        <ToastListener />\r\n        <DatePickerPortal />\r\n      </Router>\r\n    </StyleSheetManager>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { connectorLocalStorageKey } from '@pancakeswap/uikit'\r\nimport { profileClear } from '../state/profile'\r\nimport { resetUserNftState } from '../state/nftMarket/reducer'\r\nimport { clearAllTransactions } from '../state/transactions/actions'\r\nimport { useAppDispatch } from '../state'\r\nimport { connectorsByName } from '../utils/web3React'\r\n\r\nexport const useInactiveListener = () => {\r\n  const { account, chainId, connector } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (account && connector) {\r\n      const handleDeactivate = () => {\r\n        dispatch(profileClear())\r\n        dispatch(resetUserNftState())\r\n        // This localStorage key is set by @web3-react/walletconnect-connector\r\n        if (window.localStorage.getItem('walletconnect')) {\r\n          connectorsByName.walletconnect.close()\r\n          connectorsByName.walletconnect.walletConnectProvider = null\r\n        }\r\n        window.localStorage.removeItem(connectorLocalStorageKey)\r\n        if (chainId) {\r\n          dispatch(clearAllTransactions({ chainId }))\r\n        }\r\n      }\r\n\r\n      connector.addListener('Web3ReactDeactivate', handleDeactivate)\r\n\r\n      return () => {\r\n        connector.removeListener('Web3ReactDeactivate', handleDeactivate)\r\n      }\r\n    }\r\n    return undefined\r\n  }, [account, chainId, dispatch, connector])\r\n}\r\n","import React from 'react'\r\nimport { ModalProvider, light, dark } from '@pancakeswap/uikit'\r\nimport { Web3ReactProvider } from '@web3-react/core'\r\nimport { HelmetProvider } from 'react-helmet-async'\r\nimport { Provider } from 'react-redux'\r\nimport { ThemeProvider } from 'styled-components'\r\nimport { useThemeManager } from 'state/user/hooks'\r\nimport { getLibrary } from 'utils/web3React'\r\nimport { LanguageProvider } from 'contexts/Localization'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport { ToastsProvider } from 'contexts/ToastsContext'\r\nimport store from 'state'\r\n\r\nconst ThemeProviderWrapper = (props) => {\r\n  const [isDark] = useThemeManager()\r\n  return <ThemeProvider theme={isDark ? dark : light} {...props} />\r\n}\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <Provider store={store}>\r\n        <ToastsProvider>\r\n          <HelmetProvider>\r\n            <ThemeProviderWrapper>\r\n              <LanguageProvider>\r\n                <RefreshContextProvider>\r\n                  <ModalProvider>{children}</ModalProvider>\r\n                </RefreshContextProvider>\r\n              </LanguageProvider>\r\n            </ThemeProviderWrapper>\r\n          </HelmetProvider>\r\n        </ToastsProvider>\r\n      </Provider>\r\n    </Web3ReactProvider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React, { useMemo, ReactNode } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport useActiveWeb3React from './hooks/useActiveWeb3React'\r\nimport { BLOCKED_ADDRESSES } from './config/constants'\r\nimport MulticallUpdater from './state/multicall/updater'\r\nimport TransactionUpdater from './state/transactions/updater'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nfunction Updaters() {\r\n  return (\r\n    <>\r\n      <TransactionUpdater />\r\n      <MulticallUpdater />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction Blocklist({ children }: { children: ReactNode }) {\r\n  const { account } = useActiveWeb3React()\r\n  const blocked: boolean = useMemo(() => Boolean(account && BLOCKED_ADDRESSES.indexOf(account) !== -1), [account])\r\n  if (blocked) {\r\n    return <div>Blocked address</div>\r\n  }\r\n  return <>{children}</>\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Blocklist>\r\n      <Providers>\r\n        <Updaters />\r\n        <App />\r\n      </Providers>\r\n    </Blocklist>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport interface Call {\r\n  address: string\r\n  callData: string\r\n}\r\n\r\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\r\nconst LOWER_HEX_REGEX = /^0x[a-f0-9]*$/\r\nexport function toCallKey(call: Call): string {\r\n  if (!ADDRESS_REGEX.test(call.address)) {\r\n    throw new Error(`Invalid address: ${call.address}`)\r\n  }\r\n  if (!LOWER_HEX_REGEX.test(call.callData)) {\r\n    throw new Error(`Invalid hex: ${call.callData}`)\r\n  }\r\n  return `${call.address}-${call.callData}`\r\n}\r\n\r\nexport function parseCallKey(callKey: string): Call {\r\n  const pcs = callKey.split('-')\r\n  if (pcs.length !== 2) {\r\n    throw new Error(`Invalid call key: ${callKey}`)\r\n  }\r\n  return {\r\n    address: pcs[0],\r\n    callData: pcs[1],\r\n  }\r\n}\r\n\r\nexport interface ListenerOptions {\r\n  // how often this data should be fetched, by default 1\r\n  readonly blocksPerFetch?: number\r\n}\r\n\r\nexport const addMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\r\n  'multicall/addMulticallListeners',\r\n)\r\nexport const removeMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\r\n  'multicall/removeMulticallListeners',\r\n)\r\nexport const fetchingMulticallResults = createAction<{ chainId: number; calls: Call[]; fetchingBlockNumber: number }>(\r\n  'multicall/fetchingMulticallResults',\r\n)\r\nexport const errorFetchingMulticallResults = createAction<{\r\n  chainId: number\r\n  calls: Call[]\r\n  fetchingBlockNumber: number\r\n}>('multicall/errorFetchingMulticallResults')\r\nexport const updateMulticallResults = createAction<{\r\n  chainId: number\r\n  blockNumber: number\r\n  results: {\r\n    [callKey: string]: string | null\r\n  }\r\n}>('multicall/updateMulticallResults')\r\n","import BigNumber from 'bignumber.js'\r\nimport { Token } from '@pancakeswap/sdk'\r\n\r\nexport type TranslatableText =\r\n  | string\r\n  | {\r\n      key: string\r\n      data?: {\r\n        [key: string]: string | number\r\n      }\r\n    }\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface SerializedToken {\r\n  chainId: number\r\n  address: string\r\n  decimals: number\r\n  symbol?: string\r\n  name?: string\r\n  projectLink?: string\r\n}\r\n\r\nexport enum PoolIds {\r\n  poolBasic = 'poolBasic',\r\n  poolUnlimited = 'poolUnlimited',\r\n}\r\n\r\nexport type IfoStatus = 'idle' | 'coming_soon' | 'live' | 'finished'\r\n\r\ninterface IfoPoolInfo {\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  distributionRatio: number // Range [0-1]\r\n}\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  currency: Token\r\n  token: Token\r\n  releaseBlockNumber: number\r\n  articleUrl: string\r\n  campaignId: string\r\n  tokenOfferingPrice: number\r\n  version: number\r\n  [PoolIds.poolBasic]?: IfoPoolInfo\r\n  [PoolIds.poolUnlimited]: IfoPoolInfo\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n  'AUTO' = 'Auto',\r\n}\r\n\r\ninterface FarmConfigBaseProps {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  multiplier?: string\r\n  isCommunity?: boolean\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface SerializedFarmConfig extends FarmConfigBaseProps {\r\n  token: SerializedToken\r\n  quoteToken: SerializedToken\r\n}\r\n\r\nexport interface DeserializedFarmConfig extends FarmConfigBaseProps {\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\ninterface PoolConfigBaseProps {\r\n  sousId: number\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  enableEmergencyWithdraw?: boolean\r\n}\r\n\r\nexport interface SerializedPoolConfig extends PoolConfigBaseProps {\r\n  earningToken: SerializedToken\r\n  stakingToken: SerializedToken\r\n}\r\n\r\nexport interface DeserializedPoolConfig extends PoolConfigBaseProps {\r\n  earningToken: Token\r\n  stakingToken: Token\r\n}\r\n\r\nexport type Images = {\r\n  lg: string\r\n  md: string\r\n  sm: string\r\n  ipfs?: string\r\n}\r\n\r\nexport type TeamImages = {\r\n  alt: string\r\n} & Images\r\n\r\nexport type Team = {\r\n  id: number\r\n  name: string\r\n  description: string\r\n  isJoinable?: boolean\r\n  users: number\r\n  points: number\r\n  images: TeamImages\r\n  background: string\r\n  textColor: string\r\n}\r\n\r\nexport type CampaignType = 'ifo' | 'teambattle' | 'participation'\r\n\r\nexport type Campaign = {\r\n  id: string\r\n  type: CampaignType\r\n  title?: TranslatableText\r\n  description?: TranslatableText\r\n  badge?: string\r\n}\r\n\r\nexport type PageMeta = {\r\n  title: string\r\n  description?: string\r\n  image?: string\r\n}\r\n\r\nexport enum LotteryStatus {\r\n  PENDING = 'pending',\r\n  OPEN = 'open',\r\n  CLOSE = 'close',\r\n  CLAIMABLE = 'claimable',\r\n}\r\n\r\nexport interface LotteryTicket {\r\n  id: string\r\n  number: string\r\n  status: boolean\r\n  rewardBracket?: number\r\n  roundId?: string\r\n  cakeReward?: string\r\n}\r\n\r\nexport interface LotteryTicketClaimData {\r\n  ticketsWithUnclaimedRewards: LotteryTicket[]\r\n  allWinningTickets: LotteryTicket[]\r\n  cakeTotal: BigNumber\r\n  roundId: string\r\n}\r\n\r\n// Farm Auction\r\nexport interface FarmAuctionBidderConfig {\r\n  account: string\r\n  farmName: string\r\n  tokenAddress: string\r\n  quoteToken: Token\r\n  tokenName: string\r\n  projectSite?: string\r\n  lpAddress?: string\r\n}\r\n\r\n// Note: this status is slightly different compared to 'status' comfing\r\n// from Farm Auction smart contract\r\nexport enum AuctionStatus {\r\n  ToBeAnnounced, // No specific dates/blocks to display\r\n  Pending, // Auction is scheduled but not live yet (i.e. waiting for startBlock)\r\n  Open, // Auction is open for bids\r\n  Finished, // Auction end block is reached, bidding is not possible\r\n  Closed, // Auction was closed in smart contract\r\n}\r\n\r\nexport interface Auction {\r\n  id: number\r\n  status: AuctionStatus\r\n  startBlock: number\r\n  startDate: Date\r\n  endBlock: number\r\n  endDate: Date\r\n  auctionDuration: number\r\n  initialBidAmount: number\r\n  topLeaderboard: number\r\n  leaderboardThreshold: BigNumber\r\n}\r\n\r\nexport interface BidderAuction {\r\n  id: number\r\n  amount: BigNumber\r\n  claimed: boolean\r\n}\r\n\r\nexport interface Bidder extends FarmAuctionBidderConfig {\r\n  position?: number\r\n  isTopPosition: boolean\r\n  samePositionAsAbove: boolean\r\n  amount: BigNumber\r\n}\r\n\r\nexport interface ConnectedBidder {\r\n  account: string\r\n  isWhitelisted: boolean\r\n  bidderData?: Bidder\r\n}\r\n","import { ChainId, JSBI, Percent, Token } from '@pancakeswap/sdk'\r\nimport { mainnetTokens, testnetTokens } from './tokens'\r\n\r\nexport const ROUTER_ADDRESS = '0x10ED43C718714eb63d5aA57B78B54704E256024E'\r\n\r\n// a list of tokens by chain\r\ntype ChainTokenList = {\r\n  readonly [chainId in ChainId]: Token[]\r\n}\r\n\r\n// used to construct intermediary pairs for trading\r\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\r\n  [ChainId.MAINNET]: [\r\n    mainnetTokens.wbnb,\r\n    mainnetTokens.cake,\r\n    mainnetTokens.busd,\r\n    mainnetTokens.usdt,\r\n    mainnetTokens.btcb,\r\n    mainnetTokens.ust,\r\n    mainnetTokens.eth,\r\n    mainnetTokens.usdc,\r\n  ],\r\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd],\r\n}\r\n\r\n/**\r\n * Addittional bases for specific tokens\r\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\r\n */\r\nexport const ADDITIONAL_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {},\r\n}\r\n\r\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\r\n */\r\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {},\r\n}\r\n\r\n// used for display in the default list when adding liquidity\r\nexport const SUGGESTED_BASES: ChainTokenList = {\r\n  [ChainId.MAINNET]: [mainnetTokens.busd, mainnetTokens.cake, mainnetTokens.btcb],\r\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd],\r\n}\r\n\r\n// used to construct the list of all pairs we consider by default in the frontend\r\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\r\n  [ChainId.MAINNET]: [mainnetTokens.wbnb, mainnetTokens.dai, mainnetTokens.busd, mainnetTokens.usdt],\r\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd],\r\n}\r\n\r\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\r\n  [ChainId.MAINNET]: [\r\n    [mainnetTokens.cake, mainnetTokens.wbnb],\r\n    [mainnetTokens.busd, mainnetTokens.usdt],\r\n    [mainnetTokens.dai, mainnetTokens.usdt],\r\n  ],\r\n}\r\n\r\nexport const NetworkContextName = 'NETWORK'\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\r\n\r\nexport const BIG_INT_ZERO = JSBI.BigInt(0)\r\n\r\n// one basis point\r\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\r\nexport const BIPS_BASE = JSBI.BigInt(10000)\r\n// used for warning states\r\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\r\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\r\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\r\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\r\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\r\n// for non expert mode disable swaps above this\r\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\r\n\r\n// used to ensure the user doesn't send so much BNB so they end up with <.01\r\nexport const MIN_BNB: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 BNB\r\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000))\r\n\r\nexport const ZERO_PERCENT = new Percent('0')\r\nexport const ONE_HUNDRED_PERCENT = new Percent('1')\r\n\r\n// SDN OFAC addresses\r\nexport const BLOCKED_ADDRESSES: string[] = [\r\n  '0x7F367cC41522cE07553e823bf3be79A889DEbe1B',\r\n  '0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b',\r\n  '0x901bb9583b24D97e995513C6778dc6888AB6870e',\r\n  '0xA7e5d5A720f06526557c513402f2e6B5fA20b008',\r\n  '0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C',\r\n]\r\n\r\nexport { default as farmsConfig } from './farms'\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n","import { serializeTokens } from './tokens'\r\nimport { SerializedPoolConfig, PoolCategory } from './types'\r\n\r\nconst serializedTokens = serializeTokens()\r\n\r\nconst pools: SerializedPoolConfig[] = [\r\n  {\r\n    sousId: 0,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.cake,\r\n    contractAddress: {\r\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '10',\r\n    sortOrder: 1,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 240,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.zoo,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2EfE8772EB97B74be742d578A654AB6C95bF18db',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.4516',\r\n  },\r\n  {\r\n    sousId: 239,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.sfund,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x7F103689cabe17C2F70DA6faa298045d72a943b8',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0311',\r\n  },\r\n  {\r\n    sousId: 238,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.qi,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xbd52ef04DB1ad1c68A8FA24Fa71f2188978ba617',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.736',\r\n  },\r\n  {\r\n    sousId: 237,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.kart,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x73bB10B89091f15e8FeD4d6e9EBa6415df6acb21',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.1897',\r\n  },\r\n  {\r\n    sousId: 236,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.porto,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xdD52FAB121376432DBCBb47592742F9d86CF8952',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0578',\r\n  },\r\n  {\r\n    sousId: 235,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dvi,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2b8751B7141Efa7a9917f9C6fea2CEA071af5eE7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.2516',\r\n  },\r\n  {\r\n    sousId: 234,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.jgn,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xfDFb4DbE94916F9f55dBC2c14Ea8B3e386eCD9F9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.5233',\r\n  },\r\n  {\r\n    sousId: 233,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.eternal,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xc28c400F2B675b25894FA632205ddec71E432288',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.002893',\r\n  },\r\n  {\r\n    sousId: 232,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.xwg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x79f5f7DDADeFa0A9e850DFFC4fBa77e5172Fe701',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '2.3379',\r\n  },\r\n  {\r\n    sousId: 231,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dar,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9b861A078B2583373A7a3EEf815bE1A39125Ae08',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '2.3148',\r\n  },\r\n  {\r\n    sousId: 230,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.fina,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xa35caA9509a2337E22C54C929146D5F7f6515794',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.06944',\r\n  },\r\n  {\r\n    sousId: 229,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bmon,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6e63B2B96c77532ea7ec2B3D3BFA9C8e1d383f3C',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '2.0254',\r\n  },\r\n  {\r\n    sousId: 228,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dkt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xFef4B7a0194159d89717Efa592384d42B28D3926',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.09838',\r\n  },\r\n  {\r\n    sousId: 227,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ramp,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2D26e4b9a5F19eD5BB7AF221DC02432D31DEB4dA',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.2152',\r\n  },\r\n  {\r\n    sousId: 226,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.lazio,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xd008416c2c9cf23843bd179aa3cefedb4c8d1607',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0694',\r\n  },\r\n  {\r\n    sousId: 225,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.sps,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xd9b63bb6c62fe2e9a641699a91e680994b8b0081',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.40046',\r\n  },\r\n  {\r\n    sousId: 224,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.mcb,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xCc2D359c3a99d9cfe8e6F31230142efF1C828e6D',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00706',\r\n  },\r\n  {\r\n    sousId: 223,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.rpg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x65C0940C50A3C98AEEc95a115Ae62E9804588713',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.01863',\r\n  },\r\n  {\r\n    sousId: 222,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.beta,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6f660c58723922c6f866a058199ff4881019b4b5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.7361',\r\n  },\r\n  {\r\n    sousId: 221,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.nft,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x8d018823d13c56d62ffb795151a9e629c21e047b',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '173727',\r\n  },\r\n  {\r\n    sousId: 220,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.chess,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x4D1Ec426d0d7fb6bF344Dd372d0502EDD71c8d88',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0861',\r\n  },\r\n  {\r\n    sousId: 219,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.tlos,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xCB41a72067c227D6Ed7bc7CFAcd13eCe47Dfe5E9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.3616',\r\n  },\r\n  {\r\n    sousId: 218,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.stephero,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xcecba456fefe5b18d43df23419e7ab755b436655',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.1851',\r\n  },\r\n  {\r\n    sousId: 217,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bp,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x8ed7acf12b08274d5cdaf03d43d0e54bcbdd487e',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.217',\r\n  },\r\n  {\r\n    sousId: 216,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.cvp,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xC4b15117BC0be030c20754FF36197641477af5d1',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.14',\r\n  },\r\n  {\r\n    sousId: 215,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.qbt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xB72dEf58D0832f747d6B7197471Fe20AeA7EB463',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.412',\r\n  },\r\n  {\r\n    sousId: 214,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.naos,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb38b78529bCc895dA16CE2978D6cD6C56e8CfFC3',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.1736',\r\n  },\r\n  {\r\n    sousId: 213,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.pha,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2E101b5F7f910F2609e5AcE5f43bD274b1DE09AA',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.28',\r\n  },\r\n  {\r\n    sousId: 212,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bel,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x52733Ad7b4D09BF613b0389045e33E2F287afa04',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.101',\r\n  },\r\n  {\r\n    sousId: 211,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ramp,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x401b9b97bdbc3197c1adfab9652dc78040bd1e13',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.9837',\r\n  },\r\n  {\r\n    sousId: 210,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.pots,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xBeDb490970204cb3CC7B0fea94463BeD67d5364D',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0868',\r\n  },\r\n  {\r\n    sousId: 209,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.tusd,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb6e510ae2da1ab4e350f837c70823ab75091780e',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.5787',\r\n  },\r\n  {\r\n    sousId: 208,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.revv,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x8aa5b2c67852ed5334c8a7f0b5eb0ef975106793',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.331',\r\n  },\r\n  {\r\n    sousId: 207,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.btt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3b804460c3c62f0f565af593984159f13b1ac976',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '263',\r\n  },\r\n  {\r\n    sousId: 206,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.skill,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x455f4d4cc4d6ca15441a93c631e82aaf338ad843',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00289',\r\n  },\r\n  {\r\n    sousId: 205,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.win,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xde4aef42bb27a2cb45c746acde4e4d8ab711d27c',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1815.39',\r\n  },\r\n  {\r\n    sousId: 204,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.if,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x57d3524888ded4085d9124a422f13b27c8a43de7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.02835',\r\n  },\r\n  {\r\n    sousId: 203,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.sps,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb56299d8fbf46c509014b103a164ad1fc65ea222',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '12.86',\r\n  },\r\n  {\r\n    sousId: 202,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.c98,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x5e49531BA07bE577323e55666D46C6217164119E',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.7361',\r\n  },\r\n  {\r\n    sousId: 201,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.axs,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xBB472601B3CB32723d0755094BA80B73F67f2AF3',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00744',\r\n  },\r\n  {\r\n    sousId: 200,\r\n    stakingToken: serializedTokens.axs,\r\n    earningToken: serializedTokens.cake,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x583A36816F3b8401C4fdf682203E0caDA6997740',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00992',\r\n  },\r\n  {\r\n    sousId: 199,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.pmon,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x28050e8f024e05f9ddbef5f60dd49f536dba0cf0',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.02696',\r\n  },\r\n  {\r\n    sousId: 198,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.trx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb2b62f88ab82ed0bb4ab4da60d9dc9acf9e816e5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '9.6643',\r\n  },\r\n  {\r\n    sousId: 197,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.chess,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xd1812e7e28c39e78727592de030fc0e7c366d61a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.4286',\r\n  },\r\n  {\r\n    sousId: 196,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.titan,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x97058cf9b36c9ef1622485cef22e72d6fea32a36',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.08912',\r\n  },\r\n  {\r\n    sousId: 195,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.harmony,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xe595456846155e23b24cc9cbee910ee97027db6d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '3.0092',\r\n  },\r\n  {\r\n    sousId: 194,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.mask,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xae611c6d4d3ca2cee44cd34eb7aac29d5a387fcf',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.06423',\r\n  },\r\n  {\r\n    sousId: 193,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dvi,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x135827eaf9746573c0b013f18ee12f138b9b0384',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.7233',\r\n  },\r\n  {\r\n    sousId: 192,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.gum,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x09b8a5f51c9e245402057851ada274174fa00e2a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.67129',\r\n  },\r\n  {\r\n    sousId: 191,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.adx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x53a2d1db049b5271c6b6db020dba0e8a7c4eb90d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.7523',\r\n  },\r\n  {\r\n    sousId: 190,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.suter,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x4da8da81647ee0aa7350e9959f3e4771eb753da0',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '69.9074',\r\n  },\r\n  {\r\n    sousId: 189,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bscpad,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0446b8f8474c590d2249a4acdd6eedbc2e004bca',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.3877',\r\n  },\r\n  {\r\n    sousId: 188,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.rabbit,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x391240A007Bfd8A59bA74978D691219a76c64c5C',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '3.993',\r\n  },\r\n  {\r\n    sousId: 187,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.waultx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x017DEa5C58c2Bcf57FA73945073dF7AD4052a71C',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '7.9108',\r\n  },\r\n  {\r\n    sousId: 186,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.wex,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6Bd94783caCef3fb7eAa9284f1631c464479829f',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '11.574',\r\n  },\r\n  {\r\n    sousId: 185,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.form,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x7c71723fB1F9Cfb250B702cfc4eBd5D9Ab2E83d9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.4467',\r\n  },\r\n  {\r\n    sousId: 184,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.orbs,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9C8813d7D0A61d30610a7A5FdEF9109e196a3D77',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '3.8946',\r\n  },\r\n  {\r\n    sousId: 183,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.$dg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xa07a91da6d10173f33c294803684bceede325957',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00135',\r\n  },\r\n  {\r\n    sousId: 182,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.woo,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x88c321d444c88acf3e747dc90f20421b97648903',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.3854',\r\n  },\r\n  {\r\n    sousId: 181,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.woo,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3c7234c496d76133b48bd6a342e7aea4f8d87fc8',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0003854',\r\n  },\r\n  {\r\n    sousId: 180,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.htb,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x64473c33c360f315cab38674f1633505d1d8dcb2',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '5.2083',\r\n  },\r\n  {\r\n    sousId: 179,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.jgn,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x5cc7a19a50be2a6b2540ebcd55bd728e732e59c3',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.1001',\r\n  },\r\n  {\r\n    sousId: 178,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dft,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2666e2494e742301ffc8026e476acc1710a775ed',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.7361',\r\n  },\r\n  {\r\n    sousId: 177,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.hai,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6ac2213F09A404c86AFf506Aa51B6a5BF1F6e24E',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.3078',\r\n  },\r\n  {\r\n    sousId: 176,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.o3,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x35BD47263f7E57368Df76339903C53bAa99076e1',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.107638',\r\n  },\r\n  {\r\n    sousId: 175,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ampl,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x62dEc3A560D2e8A84D30752bA454f97b26757877',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.398',\r\n  },\r\n  {\r\n    sousId: 174,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.oddz,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x44d1f81e80e43e935d66d65874354ef91e5e49f6',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.4843',\r\n  },\r\n  {\r\n    sousId: 173,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bondly,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x4ea43fce546975aae120c9eeceb172500be4a02b',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.6741',\r\n  },\r\n  {\r\n    sousId: 172,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.marsh,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x567fd708e788e51b68666b9310ee9df163d60fae',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.1108',\r\n  },\r\n  {\r\n    sousId: 171,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.mbox,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x36f9452083fc9bc469a31e7966b873f402292433',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.4803',\r\n  },\r\n  {\r\n    sousId: 170,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ata,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xc612680457751d0d01b5d901ad08132a3b001900',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.7361',\r\n  },\r\n  {\r\n    sousId: 169,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.mx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x336bcd59f2b6eb7221a99f7a50fd03c6bf9a306b',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.27777',\r\n  },\r\n  {\r\n    sousId: 168,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bcfx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2b3974dda76b2d408b7d680a27fbb0393e3cf0e1',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.6944',\r\n  },\r\n  {\r\n    sousId: 167,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.qkc,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xfa67f97eeee6de55d179ecabbfe701f27d9a1ed9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '15.9143',\r\n  },\r\n  {\r\n    sousId: 166,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ktn,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x48852322a185dc5fc733ff8c8d7c6dcbd2b3b2a2',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.01215',\r\n  },\r\n  {\r\n    sousId: 165,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.mtrg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xf4d0f71698f58f221911515781b05e808a8635cb',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.05613',\r\n  },\r\n  {\r\n    sousId: 164,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.tusd,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9dceb1d92f7e0361d0766f3d98482424df857654',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.5787',\r\n  },\r\n  {\r\n    sousId: 163,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.vrt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb77f1425ec3a7c78b1a1e892f72332c8b5e8ffcb',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '40.5092',\r\n  },\r\n  {\r\n    sousId: 162,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.kalm,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb9ff4da0954b300542e722097671ead8cf337c17',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0868',\r\n  },\r\n  {\r\n    sousId: 161,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ez,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb19395702460261e51edf7a7b130109c64f13af9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.01736',\r\n  },\r\n  {\r\n    sousId: 160,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.kalm,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6e113ecb9ff2d271140f124c2cc5b5e4b5700c9f',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n    tokenPerBlock: '0.00868',\r\n  },\r\n  {\r\n    sousId: 159,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.popen,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x7baf1763ce5d0da8c9d85927f08a8be9c481ce50',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.19097',\r\n  },\r\n  {\r\n    sousId: 158,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.lien,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2b8d6c9c62bfc1bed84724165d3000e61d332cab',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.023148',\r\n  },\r\n  {\r\n    sousId: 157,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.well,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x8a06ff2748edcba3fb4e44a6bfda4e46769e557b',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.2025',\r\n    sortOrder: 999,\r\n  },\r\n  {\r\n    sousId: 156,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.deri,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3eba95f5493349bbe0cad33eaae05dc6a7e26b90',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '1.6087',\r\n    sortOrder: 999,\r\n  },\r\n  {\r\n    sousId: 155,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.chr,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x593edbd14a5b7eec828336accca9c16cc12f04be',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '1.655',\r\n    sortOrder: 999,\r\n  },\r\n  {\r\n    sousId: 154,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.cyc,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xD714738837944C3c592477249E8edB724A76e068',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.00015914',\r\n    sortOrder: 999,\r\n  },\r\n  {\r\n    sousId: 153,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.xend,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x8ea9f2482b2f7b12744a831f81f8d08714adc093',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.31828',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 152,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.hget,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x8e8125f871eb5ba9d55361365f5391ab437f9acc',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.03553',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 151,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.hotcross,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0e09205e993f78cd5b3a5df355ae98ee7d0b5834',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '3.4722',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 150,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.rfox,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xf9f00d41b1f4b3c531ff750a9b986c1a530f33d9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.7361',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 149,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.wmass,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x4Af531EcD50167a9402Ce921ee6436dd4cFC04FD',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.24942',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 148,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ubxt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9b4bac2d8f69853aa29cb45478c77fc54532ac22',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '2.4074',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 147,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.btr,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x20ee70a07ae1b475cb150dec27930d97915726ea',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '2.8935',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 146,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.τdoge,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x017556dffb8c6a52fd7f4788adf6fb339309c81b',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.868',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 145,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.pmon,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xdaa711ecf2ac0bff5c82fceeae96d0008791cc49',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.01261',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 144,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.one,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x74af842ecd0b6588add455a47aa21ed9ba794108',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '57.87',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 143,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.fine,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x42d41749d6e9a1c5b47e27f690d4531f181b2159',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.1342',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 142,\r\n    stakingToken: serializedTokens.doge,\r\n    earningToken: serializedTokens.cake,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xbebd44824631b55991fa5f2bf5c7a4ec96ff805b',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.01388',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 141,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bmxx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x55131f330c886e3f0cae389cedb23766ac9aa3ed',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.01331',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 140,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.oin,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x01453a74a94687fa3f99b80762435855a13664f4',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.3472',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 139,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.hyfi,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0032ceb978fe5fc8a5d5d6f5adfc005e76397e29',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '2.8935',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 138,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.kun,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x439b46d467402cebc1a2fa05038b5b696b1f4417',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.23148',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 137,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.math,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x377ae5f933aa4cfa41fa03e2cae8a2befccf53b2',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.15798',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 136,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ust,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xce3ebac3f549ebf1a174a6ac3b390c179422b5f6',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.17361',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 135,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.win,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xd26dec254c699935c286cd90e9841dcabf1af72d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '462.96',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 134,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.trx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x93e2867d9b74341c2d19101b7fbb81d6063cca4d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '4.0509',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 133,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.btt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3b644e44033cff70bd6b771904225f3dd69dfb6d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '79.86',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 132,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.lmt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0a687d7b951348d681f7ed5eea84c0ba7b9566dc',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.66145',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 131,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.pnt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x417df1c0e6a498eb1f2247f99032a01d4fafe922',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.09548',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 130,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.xmark,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xdc8943d806f9dd64312d155284abf780455fd345',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0298',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 129,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ramp,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xa90a894e5bc20ab2be46c7e033a38f8b8eaa771a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.4861',\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 128,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.hakka,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x34ac807e34e534fe426da1e11f816422774aae1c',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '3.4722',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 127,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.pbtc,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x31fa2f516b77c4273168b284ac6d9def5aa6dafb',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0000031',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 126,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.lien,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x7112f8988f075c7784666ab071927ae4109a8076',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.003472',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 125,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bbadger,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x126dfbcef85c5bf335f8be99ca4006037f417892',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00265278',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 124,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bdigg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x4f0ad2332b1f9983e8f63cbee617523bb7de5031',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00000403',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 123,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bondly,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9483ca44324de06802576866b9d296f7614f45ac',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.4629',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 122,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.xed,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x72ceec6e2a142678e703ab0710de78bc819f4ce0',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.3472',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 121,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.cgg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1c6ed21d3313822ae73ed0d94811ffbbe543f341',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.10918',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 120,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.perl,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1ac0d0333640f57327c83053c581340ebc829e30',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.1574',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 119,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.arpa,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xc707e5589aeb1dc117b0bb5a3622362f1812d4fc',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.949',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 118,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.oddz,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x22106cdcf9787969e1672d8e6a9c03a889cda9c5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.11284',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 117,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dexe,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x999b86e8bba3d4f05afb8155963999db70afa97f',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.009837',\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 116,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dfd,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xAF3EfE5fCEeBc603Eada6A2b0172be11f7405102',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.46296',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 115,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.alpaca,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xf73fdeb26a8c7a4abf3809d3db11a06ba5c13d0e',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.22743',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 114,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.τbtc,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xaac7171afc93f4b75e1268d208040b152ac65e32',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00000608',\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 113,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.τbtc,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2c6017269b4324d016ca5d8e3267368652c18905',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00000608',\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 112,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.swingby,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x675434c68f2672c983e36cf10ed13a4014720b79',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.21527',\r\n  },\r\n  {\r\n    sousId: 111,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.xed,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x05d6c2d1d687eacfb5e6440d5a3511e91f2201a8',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.3472',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 110,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.hakka,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xd623a32da4a632ce01766c317d07cb2cad56949b',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '3.4722',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 109,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.cgg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xdf75f38dbc98f9f26377414e567abcb8d57cca33',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.10918',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 108,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.mix,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xce64a930884b2c68cd93fc1c7c7cdc221d427692',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.3721',\r\n  },\r\n  {\r\n    sousId: 107,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.suter,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xc1E70edd0141c454b834Deac7ddDeA413424aEf9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '15.3356',\r\n  },\r\n  {\r\n    sousId: 106,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.broobee,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x189d8228CdfDc404Bd9e5bD65ff958cb5fd8855c',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '14.4675',\r\n  },\r\n  {\r\n    sousId: 105,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.hzn,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0196c582216e2463f052E2B07Ef8667Bec9Fb17a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.6944',\r\n  },\r\n  {\r\n    sousId: 104,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.alpa,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x8f84106286c9c8A42bc3555C835E6e2090684ab7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.23495',\r\n  },\r\n  {\r\n    sousId: 103,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.perl,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xa8d32b31ECB5142f067548Bf0424389eE98FaF26',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.1574',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 102,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.tlm,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xC59aa49aE508050c2dF653E77bE13822fFf02E9A',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '17.361',\r\n  },\r\n  {\r\n    sousId: 101,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.jgn,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x14AeA62384789EDA98f444cCb970F6730877d3F9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.08796',\r\n  },\r\n  {\r\n    sousId: 100,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.eps,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xebb87dF24D65977cbe62538E4B3cFBD5d0308642',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.07716',\r\n  },\r\n  {\r\n    sousId: 99,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.arpa,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x40918EF8efFF4aA061656013a81E0e5A8A702eA7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.949',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 98,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.itam,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x44eC1B26035865D9A7C130fD872670CD7Ebac2bC',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '3.096',\r\n  },\r\n  {\r\n    sousId: 97,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bondly,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1329ad151dE6C441184E32E108401126AE850937',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.4629',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 96,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.tko,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9bbDc92474a7e7321B78dcDA5EF35f4981438760',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.1574',\r\n  },\r\n  {\r\n    sousId: 95,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.apys,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x46530d79b238f809e80313e73715b160c66677aF',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.09953',\r\n  },\r\n  {\r\n    sousId: 94,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.hoo,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x47fD853D5baD391899172892F91FAa6d0cd8A2Aa',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.489',\r\n  },\r\n  {\r\n    sousId: 93,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.oddz,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xe25aB6F05BBF6C1be953BF2d7df15B3e01b8e5a5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.11284',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 92,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.easy,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xEB8Fd597921E3Dd37B0F103a2625F855e2C9b9B5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0072338',\r\n  },\r\n  {\r\n    sousId: 91,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.nrv,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xABFd8d1942628124aB971937154f826Bce86DcbC',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.15046',\r\n  },\r\n  {\r\n    sousId: 90,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dego,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x526d3c204255f807C95a99b69596f2f9f72345e5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00405',\r\n  },\r\n  {\r\n    sousId: 89,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.gum,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xAa2082BeE04fc518300ec673F9497ffa6F669dB8',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.08912',\r\n  },\r\n  {\r\n    sousId: 88,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.pbtc,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9096625Bc0d36F5EDa6d44e511641667d89C28f4',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.0000031',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 87,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dft,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x78BD4dB48F8983c3C36C8EAFbEF38f6aC7B55285',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.6811',\r\n  },\r\n  {\r\n    sousId: 86,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.swth,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x35418e14F5aA615C4f020eFBa6e01C5DbF15AdD2',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '2.3148',\r\n  },\r\n  {\r\n    sousId: 85,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.lien,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3c7cC49a35942fbD3C2ad428a6c22490cd709d03',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.003472',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 84,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.zil,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xF795739737ABcFE0273f4Dced076460fdD024Dd9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '1.0995',\r\n  },\r\n  {\r\n    sousId: 83,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.pcws,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x06FF8960F7F4aE572A3f57FAe77B2882BE94Bf90',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00434',\r\n  },\r\n  {\r\n    sousId: 82,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bbadger,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xe4dD0C50fb314A8B2e84D211546F5B57eDd7c2b9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00265278',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 81,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bdigg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb627A7e33Db571bE792B0b69c5C2f5a8160d5500',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.00000403',\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 80,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.lto,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xadBfFA25594AF8Bc421ecaDF54D057236a99781e',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '0.2893',\r\n  },\r\n  {\r\n    sousId: 79,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.mir,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3e31488f08EBcE6F2D8a2AA512aeFa49a3C7dFa7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01273',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 78,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.mir,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x453a75908fb5a36d482d5f8fe88eca836f32ead5',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01273',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 77,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.trade,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x509C99D73FB54b2c20689708b3F824147292D38e',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.4484',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 76,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dusk,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xF1bd5673Ea4a1C415ec84fa3E402F2F7788E7717',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.4629',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 75,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bifi,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xB4C68A1C565298834360BbFF1652284275120D47',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.00007234',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 74,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.txl,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x153e62257F1AAe05d5d253a670Ca7585c8D3F94F',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.434027',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 73,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.cos,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xF682D186168b4114ffDbF1291F19429310727151',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '5.787',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 72,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bunny,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xaDdAE5f4dB84847ac9d947AED1304A8e7D19f7cA',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.00289',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 71,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.alice,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x4C32048628D0d32d4D6c52662FB4A92747782B56',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.14467',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 70,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.for,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x47642101e8D8578C42765d7AbcFd0bA31868c523',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '2.8935',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 69,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bux,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x07F8217c68ed9b838b0b8B58C19c79bACE746e9A',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.5787',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 68,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.nuls,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x580DC9bB9260A922E3A4355b9119dB990F09410d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0868',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 67,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.belt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6f0037d158eD1AeE395e1c12d21aE8583842F472',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.00868',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 66,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ramp,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x423382f989C6C289c8D441000e1045e231bd7d90',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.4861',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 65,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bfi,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0A595623b58dFDe6eB468b613C11A7A8E84F09b9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0001157',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 64,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dexe,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9E6dA246d369a41DC44673ce658966cAf487f7b2',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.009837',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 63,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bel,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2C0f449387b15793B9da27c2d945dBed83ab1B07',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0549',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 62,\r\n    stakingToken: serializedTokens.tpt,\r\n    earningToken: serializedTokens.cake,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0c3D6892aa3b23811Af3bd1bbeA8b0740E8e4528',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0462',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 61,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.tpt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x75C91844c5383A68b7d3A427A44C32E3ba66Fe45',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '3.616',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 60,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.watch,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xC58954199E268505fa3D3Cb0A00b7207af8C2D1d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.3472',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 59,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.xmark,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xA5137e08C48167E363Be8Ec42A68f4F54330964E',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0413',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 58,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bmxx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6F31B87f51654424Ce57E9F8243E27ed13846CDB',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.00248',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 57,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.iotx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xCE54BA909d23B9d4BE0Ff0d84e5aE83F0ADD8D9a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '6.365',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 56,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bor,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3e677dC00668d69c2A7724b9AFA7363e8A56994e',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.000395',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 55,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bopen,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x5Ac8406498dC1921735d559CeC271bEd23B294A7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0723',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 54,\r\n    stakingToken: serializedTokens.sushi,\r\n    earningToken: serializedTokens.cake,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xb69b6e390cba1F68442A886bC89E955048DAe7E3',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0367',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 53,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.dodo,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xae3001ddb18A6A57BEC2C19D71680437CA87bA1D',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0578',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 52,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.swingby,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x02aa767e855b8e80506fb47176202aA58A95315a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.13',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 51,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bry,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1c736F4FB20C7742Ee83a4099fE92abA61dFca41',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.1157',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 50,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.zee,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x02861B607a5E87daf3FD6ec19DFB715F1b371379',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.1736',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 49,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.swgb,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x73e4E8d010289267dEe3d1Fc48974B60363963CE',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.899',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 48,\r\n    stakingToken: serializedTokens.comp,\r\n    earningToken: serializedTokens.cake,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xE0565fBb109A3f3f8097D8A9D931277bfd795072',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.055',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 47,\r\n    stakingToken: serializedTokens.comp,\r\n    earningToken: serializedTokens.cake,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xc3693e3cbc3514d5d07EA5b27A721F184F617900',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.55',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 46,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.sfp,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2B02d43967765b18E31a9621da640588f3550EFD',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.6',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 45,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.lina,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x212bb602418C399c29D52C55100fD6bBa12bea05',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.983',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 44,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.lina,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x04aE8ca68A116278026fB721c06dCe709eD7013C',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0983',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 43,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.lit,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1714bAAE9DD4738CDEA07756427FA8d4F08D9479',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.231',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 42,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.hget,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xcCD0b93cC6ce3dC6dFaA9DB68f70e5C8455aC5bd',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0138',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 41,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bdo,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9cB24e9460351bC51d4066BC6AEd1F3809b02B78',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.075',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 40,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.egld,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x2dcf4cDFf4Dd954683Fe0a6123077f8a025b66cF',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.001215',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 39,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ust,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x6EFa207ACdE6e1caB77c1322CbdE9628929ba88F',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.1157',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 38,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.wsote,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xD0b738eC507571176D40f28bd56a0120E375f73a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.23',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 37,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.front,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xf7a31366732F08E8e6B88519dC3E827e04616Fc9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.2546',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 36,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.helmet,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9F23658D5f4CEd69282395089B0f8E4dB85C6e79',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.81',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 35,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.btcst,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xB6fd2724cc9c90DD31DA35DbDf0300009dceF97d',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.011574',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 34,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bscx,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x108BFE84Ca8BCe0741998cb0F60d313823cEC143',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.17361',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 33,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ten,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x4A26b082B432B060B1b00A84eE4E823F04a6f69a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.05787',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 32,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.balbt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x3cc08B7C6A31739CfEd9d8d38b484FDb245C79c8',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.4166',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 31,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.asr,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xd18E1AEb349ef0a6727eCe54597D98D263e05CAB',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 30,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.atm,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x68C7d180bD8F7086D91E65A422c59514e4aFD638',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 29,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.og,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xbE65d7e42E05aD2c4ad28769dc9c5b4b6EAff2C7',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 28,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.reef,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1500fa1afbfe4f4277ed0345cdf12b2c9ca7e139',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '115.74',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 27,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ditto,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x624ef5C2C6080Af188AF96ee5B3160Bb28bb3E02',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.01157',\r\n    sortOrder: 999,\r\n    isFinished: false,\r\n  },\r\n  {\r\n    sousId: 26,\r\n    stakingToken: serializedTokens.twt,\r\n    earningToken: serializedTokens.cake,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x0554a5D083Abf2f056ae3F6029e1714B9A655174',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.248',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 24,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.juv,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x543467B17cA5De50c8BF7285107A36785Ab57E56',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.02',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 25,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.psg,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x65aFEAFaec49F23159e897EFBDCe19D94A86A1B6',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.02',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 21,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.vai,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x1AD34D8d4D79ddE88c9B6b8490F8fC67831f2CAe',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.104',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 20,\r\n    stakingToken: serializedTokens.bnb,\r\n    earningToken: serializedTokens.cake,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x555Ea72d7347E82C614C16f005fA91cAf06DCB5a',\r\n    },\r\n    poolCategory: PoolCategory.BINANCE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.5',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 19,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.bnb,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x326D754c64329aD7cb35744770D56D0E1f3B3124',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.0041',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 18,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.blink,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x42Afc29b2dEa792974d1e9420696870f1Ca6d18b',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '23.14',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 17,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.blink,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '23.14',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n    enableEmergencyWithdraw: true,\r\n  },\r\n  {\r\n    sousId: 16,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.unfi,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xFb1088Dae0f03C5123587d2babb3F307831E6367',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.02893',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 15,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.twt,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x9c4EBADa591FFeC4124A7785CAbCfb7068fED2fb',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '5',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 14,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.hard,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0x90F995b9d46b32c4a1908A8c6D0122e392B3Be97',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.346',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 13,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.broobee,\r\n    contractAddress: {\r\n      97: '',\r\n      56: '0xdc8c45b7F3747Ca9CaAEB3fa5e0b5FCE9430646b',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    harvest: true,\r\n    tokenPerBlock: '12.5',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 12,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.stax,\r\n    contractAddress: {\r\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      56: '0xFF02241a2A1d2a7088A344309400E9fE74772815',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    harvest: true,\r\n    tokenPerBlock: '0.2',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 11,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.nar,\r\n    contractAddress: {\r\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      56: '0xDc938BA1967b06d666dA79A7B1E31a8697D1565E',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    harvest: true,\r\n    tokenPerBlock: '1',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 10,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.nya,\r\n    contractAddress: {\r\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      56: '0x07a0A5B67136d40F4d7d95Bc8e0583bafD7A81b9',\r\n    },\r\n    poolCategory: PoolCategory.COMMUNITY,\r\n    harvest: true,\r\n    sortOrder: 999,\r\n    tokenPerBlock: '10',\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 9,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.ctk,\r\n    contractAddress: {\r\n      97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n      56: '0x21A9A53936E812Da06B7623802DEc9A1f94ED23a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.5',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 8,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.twt,\r\n    contractAddress: {\r\n      97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n      56: '0xe7f9A439Aa7292719aC817798DDd1c4D35934aAF',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '20',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n  {\r\n    sousId: 7,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.inj,\r\n    contractAddress: {\r\n      97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n      56: '0xcec2671C81a0Ecf7F8Ee796EFa6DBDc5Cb062693',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '0.25',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n  },\r\n]\r\n\r\nexport default pools\r\n","import { request, gql } from 'graphql-request'\r\nimport { GRAPH_API_PREDICTION } from 'config/constants/endpoints'\r\nimport { ethers } from 'ethers'\r\nimport {\r\n  Bet,\r\n  LedgerData,\r\n  BetPosition,\r\n  PredictionsState,\r\n  PredictionStatus,\r\n  ReduxNodeLedger,\r\n  ReduxNodeRound,\r\n  Round,\r\n  RoundData,\r\n  PredictionUser,\r\n  HistoryFilter,\r\n} from 'state/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\nimport predictionsAbi from 'config/abi/predictions.json'\r\nimport { getPredictionsAddress } from 'utils/addressHelpers'\r\nimport { PredictionsClaimableResponse, PredictionsLedgerResponse, PredictionsRoundsResponse } from 'utils/types'\r\nimport {\r\n  BetResponse,\r\n  getRoundBaseFields,\r\n  getBetBaseFields,\r\n  getUserBaseFields,\r\n  RoundResponse,\r\n  TotalWonMarketResponse,\r\n  UserResponse,\r\n} from './queries'\r\nimport { ROUNDS_PER_PAGE } from './config'\r\n\r\nexport enum Result {\r\n  WIN = 'win',\r\n  LOSE = 'lose',\r\n  CANCELED = 'canceled',\r\n  HOUSE = 'house',\r\n  LIVE = 'live',\r\n}\r\n\r\nexport const numberOrNull = (value: string) => {\r\n  if (value === null) {\r\n    return null\r\n  }\r\n\r\n  const valueNum = Number(value)\r\n  return Number.isNaN(valueNum) ? null : valueNum\r\n}\r\n\r\nconst getRoundPosition = (positionResponse: string) => {\r\n  if (positionResponse === 'Bull') {\r\n    return BetPosition.BULL\r\n  }\r\n\r\n  if (positionResponse === 'Bear') {\r\n    return BetPosition.BEAR\r\n  }\r\n\r\n  if (positionResponse === 'House') {\r\n    return BetPosition.HOUSE\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const transformBetResponse = (betResponse: BetResponse): Bet => {\r\n  const bet = {\r\n    id: betResponse.id,\r\n    hash: betResponse.hash,\r\n    block: numberOrNull(betResponse.block),\r\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\r\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\r\n    claimed: betResponse.claimed,\r\n    claimedAt: numberOrNull(betResponse.claimedAt),\r\n    claimedBlock: numberOrNull(betResponse.claimedBlock),\r\n    claimedHash: betResponse.claimedHash,\r\n    claimedBNB: betResponse.claimedBNB ? parseFloat(betResponse.claimedBNB) : 0,\r\n    claimedNetBNB: betResponse.claimedNetBNB ? parseFloat(betResponse.claimedNetBNB) : 0,\r\n    createdAt: numberOrNull(betResponse.createdAt),\r\n    updatedAt: numberOrNull(betResponse.updatedAt),\r\n  } as Bet\r\n\r\n  if (betResponse.user) {\r\n    bet.user = transformUserResponse(betResponse.user)\r\n  }\r\n\r\n  if (betResponse.round) {\r\n    bet.round = transformRoundResponse(betResponse.round)\r\n  }\r\n\r\n  return bet\r\n}\r\n\r\nexport const transformUserResponse = (userResponse: UserResponse): PredictionUser => {\r\n  const {\r\n    id,\r\n    createdAt,\r\n    updatedAt,\r\n    block,\r\n    totalBets,\r\n    totalBetsBull,\r\n    totalBetsBear,\r\n    totalBNB,\r\n    totalBNBBull,\r\n    totalBNBBear,\r\n    totalBetsClaimed,\r\n    totalBNBClaimed,\r\n    winRate,\r\n    averageBNB,\r\n    netBNB,\r\n  } = userResponse\r\n\r\n  return {\r\n    id,\r\n    createdAt: numberOrNull(createdAt),\r\n    updatedAt: numberOrNull(updatedAt),\r\n    block: numberOrNull(block),\r\n    totalBets: numberOrNull(totalBets),\r\n    totalBetsBull: numberOrNull(totalBetsBull),\r\n    totalBetsBear: numberOrNull(totalBetsBear),\r\n    totalBNB: totalBNB ? parseFloat(totalBNB) : 0,\r\n    totalBNBBull: totalBNBBull ? parseFloat(totalBNBBull) : 0,\r\n    totalBNBBear: totalBNBBear ? parseFloat(totalBNBBear) : 0,\r\n    totalBetsClaimed: numberOrNull(totalBetsClaimed),\r\n    totalBNBClaimed: totalBNBClaimed ? parseFloat(totalBNBClaimed) : 0,\r\n    winRate: winRate ? parseFloat(winRate) : 0,\r\n    averageBNB: averageBNB ? parseFloat(averageBNB) : 0,\r\n    netBNB: netBNB ? parseFloat(netBNB) : 0,\r\n  }\r\n}\r\n\r\nexport const transformRoundResponse = (roundResponse: RoundResponse): Round => {\r\n  const {\r\n    id,\r\n    epoch,\r\n    failed,\r\n    position,\r\n    startAt,\r\n    startBlock,\r\n    startHash,\r\n    lockAt,\r\n    lockBlock,\r\n    lockHash,\r\n    lockPrice,\r\n    lockRoundId,\r\n    closeAt,\r\n    closeBlock,\r\n    closeHash,\r\n    closePrice,\r\n    closeRoundId,\r\n    totalBets,\r\n    totalAmount,\r\n    bullBets,\r\n    bullAmount,\r\n    bearBets,\r\n    bearAmount,\r\n    bets = [],\r\n  } = roundResponse\r\n\r\n  return {\r\n    id,\r\n    failed,\r\n    startHash,\r\n    lockHash,\r\n    lockRoundId,\r\n    closeRoundId,\r\n    closeHash,\r\n    position: getRoundPosition(position),\r\n    epoch: numberOrNull(epoch),\r\n    startAt: numberOrNull(startAt),\r\n    startBlock: numberOrNull(startBlock),\r\n    lockAt: numberOrNull(lockAt),\r\n    lockBlock: numberOrNull(lockBlock),\r\n    lockPrice: lockPrice ? parseFloat(lockPrice) : 0,\r\n    closeAt: numberOrNull(closeAt),\r\n    closeBlock: numberOrNull(closeBlock),\r\n    closePrice: closePrice ? parseFloat(closePrice) : 0,\r\n    totalBets: numberOrNull(totalBets),\r\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\r\n    bullBets: numberOrNull(bullBets),\r\n    bullAmount: bullAmount ? parseFloat(bullAmount) : 0,\r\n    bearBets: numberOrNull(bearBets),\r\n    bearAmount: bearAmount ? parseFloat(bearAmount) : 0,\r\n    bets: bets.map(transformBetResponse),\r\n  }\r\n}\r\n\r\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\r\n  const { round } = bet\r\n  if (round.failed) {\r\n    return Result.CANCELED\r\n  }\r\n\r\n  if (round.epoch >= currentEpoch - 1) {\r\n    return Result.LIVE\r\n  }\r\n\r\n  if (bet.round.position === BetPosition.HOUSE) {\r\n    return Result.HOUSE\r\n  }\r\n\r\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n\r\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\r\n}\r\n\r\nexport const getFilteredBets = (bets: Bet[], filter: HistoryFilter) => {\r\n  switch (filter) {\r\n    case HistoryFilter.COLLECTED:\r\n      return bets.filter((bet) => bet.claimed === true)\r\n    case HistoryFilter.UNCOLLECTED:\r\n      return bets.filter((bet) => {\r\n        return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\r\n      })\r\n    case HistoryFilter.ALL:\r\n    default:\r\n      return bets\r\n  }\r\n}\r\n\r\nexport const getTotalWon = async (): Promise<number> => {\r\n  const { market } = (await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getTotalWonData {\r\n        market(id: 1) {\r\n          totalBNB\r\n          totalBNBTreasury\r\n        }\r\n      }\r\n    `,\r\n  )) as { market: TotalWonMarketResponse }\r\n\r\n  const totalBNB = market.totalBNB ? parseFloat(market.totalBNB) : 0\r\n  const totalBNBTreasury = market.totalBNBTreasury ? parseFloat(market.totalBNBTreasury) : 0\r\n\r\n  return Math.max(totalBNB - totalBNBTreasury, 0)\r\n}\r\n\r\ntype WhereClause = Record<string, string | number | boolean | string[]>\r\n\r\nexport const getBetHistory = async (where: WhereClause = {}, first = 1000, skip = 0): Promise<BetResponse[]> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\r\n        bets(first: $first, skip: $skip, where: $where, order: createdAt, orderDirection: desc) {\r\n          ${getBetBaseFields()}\r\n          round {\r\n            ${getRoundBaseFields()}\r\n          }\r\n          user {\r\n            ${getUserBaseFields()}\r\n          } \r\n        }\r\n      }\r\n    `,\r\n    { first, skip, where },\r\n  )\r\n  return response.bets\r\n}\r\n\r\nexport const getBet = async (betId: string): Promise<BetResponse> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getBet($id: ID!) {\r\n        bet(id: $id) {\r\n          ${getBetBaseFields()}\r\n          round {\r\n            ${getRoundBaseFields()}\r\n          }\r\n          user {\r\n            ${getUserBaseFields()}\r\n          } \r\n        }\r\n      }\r\n  `,\r\n    {\r\n      id: betId.toLowerCase(),\r\n    },\r\n  )\r\n  return response.bet\r\n}\r\n\r\nexport const getLedgerData = async (account: string, epochs: number[]) => {\r\n  const address = getPredictionsAddress()\r\n  const ledgerCalls = epochs.map((epoch) => ({\r\n    address,\r\n    name: 'ledger',\r\n    params: [epoch, account],\r\n  }))\r\n  const response = await multicallv2<PredictionsLedgerResponse[]>(predictionsAbi, ledgerCalls)\r\n  return response\r\n}\r\n\r\nexport const LEADERBOARD_RESULTS_PER_PAGE = 20\r\n\r\ninterface GetPredictionUsersOptions {\r\n  skip?: number\r\n  first?: number\r\n  orderBy?: string\r\n  orderDir?: string\r\n  where?: WhereClause\r\n}\r\n\r\nconst defaultPredictionUserOptions = {\r\n  skip: 0,\r\n  first: LEADERBOARD_RESULTS_PER_PAGE,\r\n  orderBy: 'createdAt',\r\n  orderDir: 'desc',\r\n}\r\n\r\nexport const getPredictionUsers = async (options: GetPredictionUsersOptions = {}): Promise<UserResponse[]> => {\r\n  const { first, skip, where, orderBy, orderDir } = { ...defaultPredictionUserOptions, ...options }\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getUsers($first: Int!, $skip: Int!, $where: User_filter, $orderBy: User_orderBy, $orderDir: OrderDirection) {\r\n        users(first: $first, skip: $skip, where: $where, orderBy: $orderBy, orderDirection: $orderDir) {\r\n          ${getUserBaseFields()} \r\n        }\r\n      }\r\n    `,\r\n    { first, skip, where, orderBy, orderDir },\r\n  )\r\n  return response.users\r\n}\r\n\r\nexport const getPredictionUser = async (account: string): Promise<UserResponse> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getUser($id: ID!) {\r\n        user(id: $id) {\r\n          ${getUserBaseFields()}\r\n        }\r\n      }\r\n  `,\r\n    {\r\n      id: account.toLowerCase(),\r\n    },\r\n  )\r\n  return response.user\r\n}\r\n\r\nexport const getClaimStatuses = async (\r\n  account: string,\r\n  epochs: number[],\r\n): Promise<PredictionsState['claimableStatuses']> => {\r\n  const address = getPredictionsAddress()\r\n  const claimableCalls = epochs.map((epoch) => ({\r\n    address,\r\n    name: 'claimable',\r\n    params: [epoch, account],\r\n  }))\r\n  const claimableResponses = await multicallv2<[PredictionsClaimableResponse][]>(predictionsAbi, claimableCalls)\r\n\r\n  return claimableResponses.reduce((accum, claimableResponse, index) => {\r\n    const epoch = epochs[index]\r\n    const [claimable] = claimableResponse\r\n\r\n    return {\r\n      ...accum,\r\n      [epoch]: claimable,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport type MarketData = Pick<\r\n  PredictionsState,\r\n  'status' | 'currentEpoch' | 'intervalSeconds' | 'minBetAmount' | 'bufferSeconds'\r\n>\r\nexport const getPredictionData = async (): Promise<MarketData> => {\r\n  const address = getPredictionsAddress()\r\n  const staticCalls = ['currentEpoch', 'intervalSeconds', 'minBetAmount', 'paused', 'bufferSeconds'].map((method) => ({\r\n    address,\r\n    name: method,\r\n  }))\r\n  const [[currentEpoch], [intervalSeconds], [minBetAmount], [paused], [bufferSeconds]] = await multicallv2(\r\n    predictionsAbi,\r\n    staticCalls,\r\n  )\r\n\r\n  return {\r\n    status: paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\r\n    currentEpoch: currentEpoch.toNumber(),\r\n    intervalSeconds: intervalSeconds.toNumber(),\r\n    minBetAmount: minBetAmount.toString(),\r\n    bufferSeconds: bufferSeconds.toNumber(),\r\n  }\r\n}\r\n\r\nexport const getRoundsData = async (epochs: number[]): Promise<PredictionsRoundsResponse[]> => {\r\n  const address = getPredictionsAddress()\r\n  const calls = epochs.map((epoch) => ({\r\n    address,\r\n    name: 'rounds',\r\n    params: [epoch],\r\n  }))\r\n  const response = await multicallv2<PredictionsRoundsResponse[]>(predictionsAbi, calls)\r\n  return response\r\n}\r\n\r\nexport const makeFutureRoundResponse = (epoch: number, startTimestamp: number): ReduxNodeRound => {\r\n  return {\r\n    epoch,\r\n    startTimestamp,\r\n    lockTimestamp: null,\r\n    closeTimestamp: null,\r\n    lockPrice: null,\r\n    closePrice: null,\r\n    totalAmount: ethers.BigNumber.from(0).toJSON(),\r\n    bullAmount: ethers.BigNumber.from(0).toJSON(),\r\n    bearAmount: ethers.BigNumber.from(0).toJSON(),\r\n    rewardBaseCalAmount: ethers.BigNumber.from(0).toJSON(),\r\n    rewardAmount: ethers.BigNumber.from(0).toJSON(),\r\n    oracleCalled: false,\r\n    lockOracleId: null,\r\n    closeOracleId: null,\r\n  }\r\n}\r\n\r\nexport const makeRoundData = (rounds: ReduxNodeRound[]): RoundData => {\r\n  return rounds.reduce((accum, round) => {\r\n    return {\r\n      ...accum,\r\n      [round.epoch.toString()]: round,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const serializePredictionsLedgerResponse = (ledgerResponse: PredictionsLedgerResponse): ReduxNodeLedger => ({\r\n  position: ledgerResponse.position === 0 ? BetPosition.BULL : BetPosition.BEAR,\r\n  amount: ledgerResponse.amount.toJSON(),\r\n  claimed: ledgerResponse.claimed,\r\n})\r\n\r\nexport const makeLedgerData = (account: string, ledgers: PredictionsLedgerResponse[], epochs: number[]): LedgerData => {\r\n  return ledgers.reduce((accum, ledgerResponse, index) => {\r\n    if (!ledgerResponse) {\r\n      return accum\r\n    }\r\n\r\n    // If the amount is zero that means the user did not bet\r\n    if (ledgerResponse.amount.eq(0)) {\r\n      return accum\r\n    }\r\n\r\n    const epoch = epochs[index].toString()\r\n\r\n    return {\r\n      ...accum,\r\n      [account]: {\r\n        ...accum[account],\r\n        [epoch]: serializePredictionsLedgerResponse(ledgerResponse),\r\n      },\r\n    }\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Serializes the return from the \"rounds\" call for redux\r\n */\r\nexport const serializePredictionsRoundsResponse = (response: PredictionsRoundsResponse): ReduxNodeRound => {\r\n  const {\r\n    epoch,\r\n    startTimestamp,\r\n    lockTimestamp,\r\n    closeTimestamp,\r\n    lockPrice,\r\n    closePrice,\r\n    totalAmount,\r\n    bullAmount,\r\n    bearAmount,\r\n    rewardBaseCalAmount,\r\n    rewardAmount,\r\n    oracleCalled,\r\n    lockOracleId,\r\n    closeOracleId,\r\n  } = response\r\n\r\n  return {\r\n    oracleCalled,\r\n    epoch: epoch.toNumber(),\r\n    startTimestamp: startTimestamp.eq(0) ? null : startTimestamp.toNumber(),\r\n    lockTimestamp: lockTimestamp.eq(0) ? null : lockTimestamp.toNumber(),\r\n    closeTimestamp: closeTimestamp.eq(0) ? null : closeTimestamp.toNumber(),\r\n    lockPrice: lockPrice.eq(0) ? null : lockPrice.toJSON(),\r\n    closePrice: closePrice.eq(0) ? null : closePrice.toJSON(),\r\n    totalAmount: totalAmount.toJSON(),\r\n    bullAmount: bullAmount.toJSON(),\r\n    bearAmount: bearAmount.toJSON(),\r\n    rewardBaseCalAmount: rewardBaseCalAmount.toJSON(),\r\n    rewardAmount: rewardAmount.toJSON(),\r\n    lockOracleId: lockOracleId.toString(),\r\n    closeOracleId: closeOracleId.toString(),\r\n  }\r\n}\r\n\r\n/**\r\n * Parse serialized values back into ethers.BigNumber\r\n * ethers.BigNumber values are stored with the \"toJSON()\" method, e.g  { type: \"BigNumber\", hex: string }\r\n */\r\nexport const parseBigNumberObj = <T = Record<string, any>, K = Record<string, any>>(data: T): K => {\r\n  return Object.keys(data).reduce((accum, key) => {\r\n    const value = data[key]\r\n\r\n    if (value && value?.type === 'BigNumber') {\r\n      return {\r\n        ...accum,\r\n        [key]: ethers.BigNumber.from(value),\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...accum,\r\n      [key]: value,\r\n    }\r\n  }, {}) as K\r\n}\r\n\r\nexport const fetchUsersRoundsLength = async (account: string) => {\r\n  try {\r\n    const contract = getPredictionsContract()\r\n    const length = await contract.getUserRoundsLength(account)\r\n    return length\r\n  } catch {\r\n    return ethers.BigNumber.from(0)\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches rounds a user has participated in\r\n */\r\nexport const fetchUserRounds = async (\r\n  account: string,\r\n  cursor = 0,\r\n  size = ROUNDS_PER_PAGE,\r\n): Promise<{ [key: string]: ReduxNodeLedger }> => {\r\n  const contract = getPredictionsContract()\r\n\r\n  try {\r\n    const [rounds, ledgers] = await contract.getUserRounds(account, cursor, size)\r\n\r\n    return rounds.reduce((accum, round, index) => {\r\n      return {\r\n        ...accum,\r\n        [round.toString()]: serializePredictionsLedgerResponse(ledgers[index]),\r\n      }\r\n    }, {})\r\n  } catch {\r\n    // When the results run out the contract throws an error.\r\n    return null\r\n  }\r\n}\r\n","import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterchefContract } from 'utils/contractHelpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((pool) => pool.stakingToken.symbol !== 'BNB')\r\nconst bnbPools = poolsConfig.filter((pool) => pool.stakingToken.symbol === 'BNB')\r\nconst nonMasterPools = poolsConfig.filter((pool) => pool.sousId !== 0)\r\nconst masterChefContract = getMasterchefContract()\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((pool) => ({\r\n    address: pool.stakingToken.address,\r\n    name: 'allowance',\r\n    params: [account, getAddress(pool.contractAddress)],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((pool) => ({\r\n    address: pool.stakingToken.address,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await simpleRpcProvider.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance.toString()).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.userInfo('0', account)\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount.toString()).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.pendingCake('0', account)\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward.toString()).toJSON() }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { DeserializedPool } from 'state/types'\r\nimport { getApy } from 'utils/compoundApyHelpers'\r\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\r\n\r\nexport const convertSharesToCake = (\r\n  shares: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\r\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\r\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\r\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\r\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\r\n}\r\n\r\nexport const convertCakeToShares = (\r\n  cake: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\r\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\r\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\r\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\r\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\r\n}\r\n\r\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 5000\r\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0\r\n\r\nexport const getAprData = (pool: DeserializedPool, performanceFee: number) => {\r\n  const { isAutoVault, apr } = pool\r\n\r\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n  const autoCompoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY\r\n\r\n  if (isAutoVault) {\r\n    const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 100\r\n    return { apr: autoApr, autoCompoundFrequency }\r\n  }\r\n  return { apr, autoCompoundFrequency }\r\n}\r\n\r\nexport const getCakeVaultEarnings = (\r\n  account: string,\r\n  cakeAtLastUserAction: BigNumber,\r\n  userShares: BigNumber,\r\n  pricePerFullShare: BigNumber,\r\n  earningTokenPrice: number,\r\n) => {\r\n  const hasAutoEarnings =\r\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\r\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\r\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\r\n\r\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\r\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\r\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\r\n}\r\n\r\nexport const getPoolBlockInfo = (pool: DeserializedPool, currentBlock: number) => {\r\n  const { startBlock, endBlock, isFinished } = pool\r\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\r\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\r\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\r\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\r\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\r\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\r\nimport { getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\nexport const fetchPublicVaultData = async () => {\r\n  try {\r\n    const calls = [\r\n      'getPricePerFullShare',\r\n      'totalShares',\r\n      'calculateHarvestCakeRewards',\r\n      'calculateTotalPendingCakeRewards',\r\n    ].map((method) => ({\r\n      address: getCakeVaultAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest]] = await multicallv2(\r\n      cakeVaultAbi,\r\n      calls,\r\n    )\r\n\r\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\r\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\r\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\r\n    return {\r\n      totalShares: totalSharesAsBigNumber.toJSON(),\r\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\r\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\r\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\r\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      totalShares: null,\r\n      pricePerFullShare: null,\r\n      totalCakeInVault: null,\r\n      estimatedCakeBountyReward: null,\r\n      totalPendingCakeHarvest: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchVaultFees = async () => {\r\n  try {\r\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\r\n      address: getCakeVaultAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(cakeVaultAbi, calls)\r\n\r\n    return {\r\n      performanceFee: performanceFee.toNumber(),\r\n      callFee: callFee.toNumber(),\r\n      withdrawalFee: withdrawalFee.toNumber(),\r\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      performanceFee: null,\r\n      callFee: null,\r\n      withdrawalFee: null,\r\n      withdrawalFeePeriod: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchPublicVaultData\r\n","import BigNumber from 'bignumber.js'\r\nimport { getCakeVaultContract } from 'utils/contractHelpers'\r\n\r\nconst cakeVaultContract = getCakeVaultContract()\r\n\r\nconst fetchVaultUser = async (account: string) => {\r\n  try {\r\n    const userContractResponse = await cakeVaultContract.userInfo(account)\r\n    return {\r\n      isLoading: false,\r\n      userShares: new BigNumber(userContractResponse.shares.toString()).toJSON(),\r\n      lastDepositedTime: userContractResponse.lastDepositedTime.toString(),\r\n      lastUserActionTime: userContractResponse.lastUserActionTime.toString(),\r\n      cakeAtLastUserAction: new BigNumber(userContractResponse.cakeAtLastUserAction.toString()).toJSON(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      isLoading: true,\r\n      userShares: null,\r\n      lastDepositedTime: null,\r\n      lastUserActionTime: null,\r\n      cakeAtLastUserAction: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchVaultUser\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport BigNumber from 'bignumber.js'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { PoolsState, SerializedPool, CakeVault, VaultFees, VaultUser, AppThunk } from 'state/types'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { fetchPoolsBlockLimits, fetchPoolsStakingLimits, fetchPoolsTotalStaking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { fetchPublicVaultData, fetchVaultFees } from './fetchVaultPublic'\r\nimport fetchVaultUser from './fetchVaultUser'\r\nimport { getTokenPricesFromFarm } from './helpers'\r\n\r\nconst initialState: PoolsState = {\r\n  data: [...poolsConfig],\r\n  userDataLoaded: false,\r\n  cakeVault: {\r\n    totalShares: null,\r\n    pricePerFullShare: null,\r\n    totalCakeInVault: null,\r\n    estimatedCakeBountyReward: null,\r\n    totalPendingCakeHarvest: null,\r\n    fees: {\r\n      performanceFee: null,\r\n      callFee: null,\r\n      withdrawalFee: null,\r\n      withdrawalFeePeriod: null,\r\n    },\r\n    userData: {\r\n      isLoading: true,\r\n      userShares: null,\r\n      cakeAtLastUserAction: null,\r\n      lastDepositedTime: null,\r\n      lastUserActionTime: null,\r\n    },\r\n  },\r\n}\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = (currentBlock: number) => async (dispatch, getState) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStaking()\r\n\r\n  const prices = getTokenPricesFromFarm(getState().farms.data)\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    const isPoolEndBlockExceeded = currentBlock > 0 && blockLimit ? currentBlock > Number(blockLimit.endBlock) : false\r\n    const isPoolFinished = pool.isFinished || isPoolEndBlockExceeded\r\n\r\n    const stakingTokenAddress = pool.stakingToken.address ? pool.stakingToken.address.toLowerCase() : null\r\n    const stakingTokenPrice = stakingTokenAddress ? prices[stakingTokenAddress] : 0\r\n\r\n    const earningTokenAddress = pool.earningToken.address ? pool.earningToken.address.toLowerCase() : null\r\n    const earningTokenPrice = earningTokenAddress ? prices[earningTokenAddress] : 0\r\n    const apr = !isPoolFinished\r\n      ? getPoolApr(\r\n          stakingTokenPrice,\r\n          earningTokenPrice,\r\n          getBalanceNumber(new BigNumber(totalStaking.totalStaked), pool.stakingToken.decimals),\r\n          parseFloat(pool.tokenPerBlock),\r\n        )\r\n      : 0\r\n\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n      stakingTokenPrice,\r\n      earningTokenPrice,\r\n      apr,\r\n      isFinished: isPoolFinished,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsStakingLimitsAsync = () => async (dispatch, getState) => {\r\n  const poolsWithStakingLimit = getState()\r\n    .pools.data.filter(({ stakingLimit }) => stakingLimit !== null && stakingLimit !== undefined)\r\n    .map((pool) => pool.sousId)\r\n\r\n  const stakingLimits = await fetchPoolsStakingLimits(poolsWithStakingLimit)\r\n\r\n  const stakingLimitData = poolsConfig.map((pool) => {\r\n    if (poolsWithStakingLimit.includes(pool.sousId)) {\r\n      return { sousId: pool.sousId }\r\n    }\r\n    const stakingLimit = stakingLimits[pool.sousId] || BIG_ZERO\r\n    return {\r\n      sousId: pool.sousId,\r\n      stakingLimit: stakingLimit.toJSON(),\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(stakingLimitData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync =\r\n  (account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const allowances = await fetchPoolsAllowance(account)\r\n    const stakingTokenBalances = await fetchUserBalances(account)\r\n    const stakedBalances = await fetchUserStakeBalances(account)\r\n    const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n    const userData = poolsConfig.map((pool) => ({\r\n      sousId: pool.sousId,\r\n      allowance: allowances[pool.sousId],\r\n      stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n      stakedBalance: stakedBalances[pool.sousId],\r\n      pendingReward: pendingRewards[pool.sousId],\r\n    }))\r\n\r\n    dispatch(setPoolsUserData(userData))\r\n  }\r\n\r\nexport const updateUserAllowance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const allowances = await fetchPoolsAllowance(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n  }\r\n\r\nexport const updateUserBalance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const tokenBalances = await fetchUserBalances(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n  }\r\n\r\nexport const updateUserStakedBalance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const stakedBalances = await fetchUserStakeBalances(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n  }\r\n\r\nexport const updateUserPendingReward =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const pendingRewards = await fetchUserPendingRewards(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n  }\r\n\r\nexport const fetchCakeVaultPublicData = createAsyncThunk<CakeVault>('cakeVault/fetchPublicData', async () => {\r\n  const publicVaultInfo = await fetchPublicVaultData()\r\n  return publicVaultInfo\r\n})\r\n\r\nexport const fetchCakeVaultFees = createAsyncThunk<VaultFees>('cakeVault/fetchFees', async () => {\r\n  const vaultFees = await fetchVaultFees()\r\n  return vaultFees\r\n})\r\n\r\nexport const fetchCakeVaultUserData = createAsyncThunk<VaultUser, { account: string }>(\r\n  'cakeVault/fetchUser',\r\n  async ({ account }) => {\r\n    const userData = await fetchVaultUser(account)\r\n    return userData\r\n  },\r\n)\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: SerializedPool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n      state.userDataLoaded = true\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n\r\n      if (index >= 0) {\r\n        state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Vault public data that updates frequently\r\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action: PayloadAction<CakeVault>) => {\r\n      state.cakeVault = { ...state.cakeVault, ...action.payload }\r\n    })\r\n    // Vault fees\r\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action: PayloadAction<VaultFees>) => {\r\n      const fees = action.payload\r\n      state.cakeVault = { ...state.cakeVault, fees }\r\n    })\r\n    // Vault user data\r\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action: PayloadAction<VaultUser>) => {\r\n      const userData = action.payload\r\n      userData.isLoading = false\r\n      state.cakeVault = { ...state.cakeVault, userData }\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\nexport default PoolsSlice.reducer\r\n","export const REWARD_RATE = 0.97\r\n\r\n// Estimated number of seconds it takes to submit a transaction (3 blocks) in seconds\r\nexport const ROUND_BUFFER = 9\r\n\r\nexport const PAST_ROUND_COUNT = 5\r\nexport const FUTURE_ROUND_COUNT = 2\r\n\r\nexport const ROUNDS_PER_PAGE = 200\r\nexport const LEADERBOARD_MIN_ROUNDS_PLAYED = 10\r\n","export interface UserResponse {\r\n  id: string\r\n  createdAt: string\r\n  updatedAt: string\r\n  block: string\r\n  totalBets: string\r\n  totalBetsBull: string\r\n  totalBetsBear: string\r\n  totalBNB: string\r\n  totalBNBBull: string\r\n  totalBNBBear: string\r\n  totalBetsClaimed: string\r\n  totalBNBClaimed: string\r\n  winRate: string\r\n  averageBNB: string\r\n  netBNB: string\r\n  bets?: BetResponse[]\r\n}\r\n\r\nexport interface BetResponse {\r\n  id: string\r\n  hash: string\r\n  amount: string\r\n  position: string\r\n  claimed: boolean\r\n  claimedAt: string\r\n  claimedBlock: string\r\n  claimedHash: string\r\n  claimedBNB: string\r\n  claimedNetBNB: string\r\n  createdAt: string\r\n  updatedAt: string\r\n  block: string\r\n  user?: UserResponse\r\n  round?: RoundResponse\r\n}\r\n\r\nexport interface HistoricalBetResponse {\r\n  id: string\r\n  hash: string\r\n  amount: string\r\n  position: string\r\n  claimed: boolean\r\n  user?: UserResponse\r\n  round: {\r\n    id: string\r\n    epoch: string\r\n  }\r\n}\r\n\r\nexport interface RoundResponse {\r\n  id: string\r\n  epoch: string\r\n  position: string\r\n  failed: boolean\r\n  startAt: string\r\n  startBlock: string\r\n  startHash: string\r\n  lockAt: string\r\n  lockBlock: string\r\n  lockHash: string\r\n  lockPrice: string\r\n  lockRoundId: string\r\n  closeAt: string\r\n  closeBlock: string\r\n  closeHash: string\r\n  closePrice: string\r\n  closeRoundId: string\r\n  totalBets: string\r\n  totalAmount: string\r\n  bullBets: string\r\n  bullAmount: string\r\n  bearBets: string\r\n  bearAmount: string\r\n  bets?: BetResponse[]\r\n}\r\n\r\nexport interface TotalWonMarketResponse {\r\n  totalBNB: string\r\n  totalBNBTreasury: string\r\n}\r\n\r\n/**\r\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\r\n */\r\nexport const getRoundBaseFields = () => `\r\n  id\r\n  epoch\r\n  position\r\n  failed\r\n  startAt\r\n  startBlock\r\n  startHash\r\n  lockAt\r\n  lockBlock\r\n  lockHash\r\n  lockPrice\r\n  lockRoundId\r\n  closeAt\r\n  closeBlock\r\n  closeHash\r\n  closePrice\r\n  closeRoundId\r\n  totalBets\r\n  totalAmount\r\n  bullBets\r\n  bullAmount\r\n  bearBets\r\n  bearAmount\r\n`\r\n\r\nexport const getBetBaseFields = () => `\r\n id\r\n hash  \r\n amount\r\n position\r\n claimed\r\n claimedAt\r\n claimedHash\r\n claimedBlock\r\n claimedBNB\r\n claimedNetBNB\r\n createdAt\r\n updatedAt\r\n`\r\n\r\nexport const getUserBaseFields = () => `\r\n  id\r\n  createdAt\r\n  updatedAt\r\n  block\r\n  totalBets\r\n  totalBetsBull\r\n  totalBetsBear\r\n  totalBNB\r\n  totalBNBBull\r\n  totalBNBBear\r\n  totalBetsClaimed\r\n  totalBNBClaimed\r\n  winRate\r\n  averageBNB\r\n  netBNB\r\n`\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ethers } from 'ethers'\r\nimport { formatUnits } from 'ethers/lib/utils'\r\nimport maxBy from 'lodash/maxBy'\r\nimport merge from 'lodash/merge'\r\nimport range from 'lodash/range'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport {\r\n  Bet,\r\n  LedgerData,\r\n  HistoryFilter,\r\n  PredictionsState,\r\n  PredictionStatus,\r\n  ReduxNodeRound,\r\n  BetPosition,\r\n  LeaderboardLoadingState,\r\n  PredictionUser,\r\n  LeaderboardFilter,\r\n  State,\r\n} from 'state/types'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\nimport {\r\n  FUTURE_ROUND_COUNT,\r\n  LEADERBOARD_MIN_ROUNDS_PLAYED,\r\n  PAST_ROUND_COUNT,\r\n  ROUNDS_PER_PAGE,\r\n  ROUND_BUFFER,\r\n} from './config'\r\nimport {\r\n  getBetHistory,\r\n  transformBetResponse,\r\n  makeFutureRoundResponse,\r\n  makeRoundData,\r\n  getRoundsData,\r\n  getPredictionData,\r\n  MarketData,\r\n  getLedgerData,\r\n  makeLedgerData,\r\n  serializePredictionsRoundsResponse,\r\n  getClaimStatuses,\r\n  fetchUsersRoundsLength,\r\n  fetchUserRounds,\r\n  getPredictionUsers,\r\n  transformUserResponse,\r\n  LEADERBOARD_RESULTS_PER_PAGE,\r\n  getPredictionUser,\r\n} from './helpers'\r\n\r\nconst initialState: PredictionsState = {\r\n  status: PredictionStatus.INITIAL,\r\n  isLoading: false,\r\n  isHistoryPaneOpen: false,\r\n  isChartPaneOpen: false,\r\n  isFetchingHistory: false,\r\n  historyFilter: HistoryFilter.ALL,\r\n  currentEpoch: 0,\r\n  intervalSeconds: 300,\r\n  minBetAmount: '10000000000000',\r\n  bufferSeconds: 60,\r\n  lastOraclePrice: BIG_ZERO.toJSON(),\r\n  rounds: {},\r\n  history: [],\r\n  totalHistory: 0,\r\n  currentHistoryPage: 1,\r\n  hasHistoryLoaded: false,\r\n  ledgers: {},\r\n  claimableStatuses: {},\r\n  leaderboard: {\r\n    selectedAddress: null,\r\n    loadingState: LeaderboardLoadingState.INITIAL,\r\n    filters: {\r\n      address: null,\r\n      orderBy: 'netBNB',\r\n      timePeriod: 'all',\r\n    },\r\n    skip: 0,\r\n    hasMoreResults: true,\r\n    addressResults: {},\r\n    results: [],\r\n  },\r\n}\r\n\r\n// Thunks\r\ntype PredictionInitialization = Pick<\r\n  PredictionsState,\r\n  | 'status'\r\n  | 'currentEpoch'\r\n  | 'intervalSeconds'\r\n  | 'minBetAmount'\r\n  | 'rounds'\r\n  | 'ledgers'\r\n  | 'claimableStatuses'\r\n  | 'bufferSeconds'\r\n>\r\nexport const initializePredictions = createAsyncThunk<PredictionInitialization, string>(\r\n  'predictions/initialize',\r\n  async (account = null) => {\r\n    // Static values\r\n    const marketData = await getPredictionData()\r\n    const epochs =\r\n      marketData.currentEpoch > PAST_ROUND_COUNT\r\n        ? range(marketData.currentEpoch, marketData.currentEpoch - PAST_ROUND_COUNT)\r\n        : [marketData.currentEpoch]\r\n\r\n    // Round data\r\n    const roundsResponse = await getRoundsData(epochs)\r\n    const initialRoundData: { [key: string]: ReduxNodeRound } = roundsResponse.reduce((accum, roundResponse) => {\r\n      const reduxNodeRound = serializePredictionsRoundsResponse(roundResponse)\r\n\r\n      return {\r\n        ...accum,\r\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\r\n      }\r\n    }, {})\r\n\r\n    const initializedData = {\r\n      ...marketData,\r\n      rounds: initialRoundData,\r\n      ledgers: {},\r\n      claimableStatuses: {},\r\n    }\r\n\r\n    if (!account) {\r\n      return initializedData\r\n    }\r\n\r\n    // Bet data\r\n    const ledgerResponses = await getLedgerData(account, epochs)\r\n\r\n    // Claim statuses\r\n    const claimableStatuses = await getClaimStatuses(account, epochs)\r\n\r\n    return merge({}, initializedData, {\r\n      ledgers: makeLedgerData(account, ledgerResponses, epochs),\r\n      claimableStatuses,\r\n    })\r\n  },\r\n)\r\n\r\nexport const fetchRound = createAsyncThunk<ReduxNodeRound, number>('predictions/fetchRound', async (epoch) => {\r\n  const predictionContract = getPredictionsContract()\r\n  const response = await predictionContract.rounds(epoch)\r\n  return serializePredictionsRoundsResponse(response)\r\n})\r\n\r\nexport const fetchRounds = createAsyncThunk<{ [key: string]: ReduxNodeRound }, number[]>(\r\n  'predictions/fetchRounds',\r\n  async (epochs) => {\r\n    const rounds = await getRoundsData(epochs)\r\n    return rounds.reduce((accum, round) => {\r\n      if (!round) {\r\n        return accum\r\n      }\r\n\r\n      const reduxNodeRound = serializePredictionsRoundsResponse(round)\r\n\r\n      return {\r\n        ...accum,\r\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\r\n      }\r\n    }, {})\r\n  },\r\n)\r\n\r\nexport const fetchMarketData = createAsyncThunk<MarketData>('predictions/fetchMarketData', async () => {\r\n  const marketData = await getPredictionData()\r\n  return marketData\r\n})\r\n\r\nexport const fetchLedgerData = createAsyncThunk<LedgerData, { account: string; epochs: number[] }>(\r\n  'predictions/fetchLedgerData',\r\n  async ({ account, epochs }) => {\r\n    const ledgers = await getLedgerData(account, epochs)\r\n    return makeLedgerData(account, ledgers, epochs)\r\n  },\r\n)\r\n\r\nexport const fetchClaimableStatuses = createAsyncThunk<\r\n  PredictionsState['claimableStatuses'],\r\n  { account: string; epochs: number[] }\r\n>('predictions/fetchClaimableStatuses', async ({ account, epochs }) => {\r\n  const ledgers = await getClaimStatuses(account, epochs)\r\n  return ledgers\r\n})\r\n\r\nexport const fetchHistory = createAsyncThunk<{ account: string; bets: Bet[] }, { account: string; claimed?: boolean }>(\r\n  'predictions/fetchHistory',\r\n  async ({ account, claimed }) => {\r\n    const response = await getBetHistory({\r\n      user: account.toLowerCase(),\r\n      claimed,\r\n    })\r\n    const bets = response.map(transformBetResponse)\r\n\r\n    return { account, bets }\r\n  },\r\n)\r\n\r\nexport const fetchNodeHistory = createAsyncThunk<\r\n  { bets: Bet[]; claimableStatuses: PredictionsState['claimableStatuses']; page?: number; totalHistory: number },\r\n  { account: string; page?: number }\r\n>('predictions/fetchNodeHistory', async ({ account, page = 1 }) => {\r\n  const userRoundsLength = await fetchUsersRoundsLength(account)\r\n  const emptyResult = { bets: [], claimableStatuses: {}, totalHistory: userRoundsLength.toNumber() }\r\n  const maxPages = userRoundsLength.lte(ROUNDS_PER_PAGE) ? 1 : Math.ceil(userRoundsLength.toNumber() / ROUNDS_PER_PAGE)\r\n\r\n  if (userRoundsLength.eq(0)) {\r\n    return emptyResult\r\n  }\r\n\r\n  if (page > maxPages) {\r\n    return emptyResult\r\n  }\r\n\r\n  const cursor = userRoundsLength.sub(ROUNDS_PER_PAGE * page)\r\n\r\n  // If the page request is the final one we only want to retrieve the amount of rounds up to the next cursor.\r\n  const size =\r\n    maxPages === page\r\n      ? userRoundsLength\r\n          .sub(ROUNDS_PER_PAGE * (page - 1)) // Previous page's cursor\r\n          .toNumber()\r\n      : ROUNDS_PER_PAGE\r\n  const userRounds = await fetchUserRounds(account, cursor.lt(0) ? 0 : cursor.toNumber(), size)\r\n\r\n  if (!userRounds) {\r\n    return emptyResult\r\n  }\r\n\r\n  const epochs = Object.keys(userRounds).map((epochStr) => Number(epochStr))\r\n  const roundData = await getRoundsData(epochs)\r\n  const claimableStatuses = await getClaimStatuses(account, epochs)\r\n\r\n  // Turn the data from the node into an Bet object that comes from the graph\r\n  const bets: Bet[] = roundData.reduce((accum, round) => {\r\n    const reduxRound = serializePredictionsRoundsResponse(round)\r\n    const ledger = userRounds[reduxRound.epoch]\r\n    const ledgerAmount = ethers.BigNumber.from(ledger.amount)\r\n    const closePrice = round.closePrice ? parseFloat(formatUnits(round.closePrice, 8)) : null\r\n    const lockPrice = round.lockPrice ? parseFloat(formatUnits(round.lockPrice, 8)) : null\r\n\r\n    const getRoundPosition = () => {\r\n      if (!closePrice) {\r\n        return null\r\n      }\r\n\r\n      if (round.closePrice.eq(round.lockPrice)) {\r\n        return BetPosition.HOUSE\r\n      }\r\n\r\n      return round.closePrice.gt(round.lockPrice) ? BetPosition.BULL : BetPosition.BEAR\r\n    }\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        id: null,\r\n        hash: null,\r\n        amount: parseFloat(formatUnits(ledgerAmount)),\r\n        position: ledger.position,\r\n        claimed: ledger.claimed,\r\n        claimedAt: null,\r\n        claimedHash: null,\r\n        claimedBNB: 0,\r\n        claimedNetBNB: 0,\r\n        createdAt: null,\r\n        updatedAt: null,\r\n        block: 0,\r\n        round: {\r\n          id: null,\r\n          epoch: round.epoch.toNumber(),\r\n          failed: false,\r\n          startBlock: null,\r\n          startAt: round.startTimestamp ? round.startTimestamp.toNumber() : null,\r\n          startHash: null,\r\n          lockAt: round.lockTimestamp ? round.lockTimestamp.toNumber() : null,\r\n          lockBlock: null,\r\n          lockPrice,\r\n          lockHash: null,\r\n          lockRoundId: round.lockOracleId ? round.lockOracleId.toString() : null,\r\n          closeRoundId: round.closeOracleId ? round.closeOracleId.toString() : null,\r\n          closeHash: null,\r\n          closeAt: null,\r\n          closePrice,\r\n          closeBlock: null,\r\n          totalBets: 0,\r\n          totalAmount: parseFloat(formatUnits(round.totalAmount)),\r\n          bullBets: 0,\r\n          bullAmount: parseFloat(formatUnits(round.bullAmount)),\r\n          bearBets: 0,\r\n          bearAmount: parseFloat(formatUnits(round.bearAmount)),\r\n          position: getRoundPosition(),\r\n        },\r\n      },\r\n    ]\r\n  }, [])\r\n\r\n  return { bets, claimableStatuses, page, totalHistory: userRoundsLength.toNumber() }\r\n})\r\n\r\n// Leaderboard\r\nexport const filterLeaderboard = createAsyncThunk<{ results: PredictionUser[] }, { filters: LeaderboardFilter }>(\r\n  'predictions/filterLeaderboard',\r\n  async ({ filters }) => {\r\n    const usersResponse = await getPredictionUsers({\r\n      skip: 0,\r\n      orderBy: filters.orderBy,\r\n      where: { totalBets_gte: LEADERBOARD_MIN_ROUNDS_PLAYED, [`${filters.orderBy}_gt`]: 0 },\r\n    })\r\n\r\n    return { results: usersResponse.map(transformUserResponse) }\r\n  },\r\n)\r\n\r\nexport const fetchAddressResult = createAsyncThunk<\r\n  { account: string; data: PredictionUser },\r\n  string,\r\n  { rejectValue: string }\r\n>('predictions/fetchAddressResult', async (account, { rejectWithValue }) => {\r\n  const userResponse = await getPredictionUser(account)\r\n\r\n  if (!userResponse) {\r\n    return rejectWithValue(account)\r\n  }\r\n\r\n  return { account, data: transformUserResponse(userResponse) }\r\n})\r\n\r\nexport const filterNextPageLeaderboard = createAsyncThunk<\r\n  { results: PredictionUser[]; skip: number },\r\n  number,\r\n  { state: State }\r\n>('predictions/filterNextPageLeaderboard', async (skip, { getState }) => {\r\n  const state = getState()\r\n  const usersResponse = await getPredictionUsers({\r\n    skip,\r\n    orderBy: state.predictions.leaderboard.filters.orderBy,\r\n    where: { totalBets_gte: LEADERBOARD_MIN_ROUNDS_PLAYED, [`${state.predictions.leaderboard.filters.orderBy}_gt`]: 0 },\r\n  })\r\n\r\n  return { results: usersResponse.map(transformUserResponse), skip }\r\n})\r\n\r\nexport const predictionsSlice = createSlice({\r\n  name: 'predictions',\r\n  initialState,\r\n  reducers: {\r\n    setLeaderboardFilter: (state, action: PayloadAction<Partial<LeaderboardFilter>>) => {\r\n      state.leaderboard.filters = {\r\n        ...state.leaderboard.filters,\r\n        ...action.payload,\r\n      }\r\n\r\n      // Anytime we filters change we need to reset back to page 1\r\n      state.leaderboard.skip = 0\r\n      state.leaderboard.hasMoreResults = true\r\n    },\r\n    setHistoryPaneState: (state, action: PayloadAction<boolean>) => {\r\n      state.isHistoryPaneOpen = action.payload\r\n      state.historyFilter = HistoryFilter.ALL\r\n    },\r\n    setChartPaneState: (state, action: PayloadAction<boolean>) => {\r\n      state.isChartPaneOpen = action.payload\r\n    },\r\n    setHistoryFilter: (state, action: PayloadAction<HistoryFilter>) => {\r\n      state.historyFilter = action.payload\r\n    },\r\n    setLastOraclePrice: (state, action: PayloadAction<string>) => {\r\n      state.lastOraclePrice = action.payload\r\n    },\r\n    markAsCollected: (state, action: PayloadAction<{ [key: string]: boolean }>) => {\r\n      state.claimableStatuses = { ...state.claimableStatuses, ...action.payload }\r\n    },\r\n    setSelectedAddress: (state, action: PayloadAction<string>) => {\r\n      state.leaderboard.selectedAddress = action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Leaderboard filter\r\n    builder.addCase(filterLeaderboard.pending, (state) => {\r\n      // Only mark as loading if we come from IDLE. This allows initialization.\r\n      if (state.leaderboard.loadingState === LeaderboardLoadingState.IDLE) {\r\n        state.leaderboard.loadingState = LeaderboardLoadingState.LOADING\r\n      }\r\n    })\r\n    builder.addCase(filterLeaderboard.fulfilled, (state, action) => {\r\n      const { results } = action.payload\r\n\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\r\n      state.leaderboard.results = results\r\n\r\n      if (results.length < LEADERBOARD_RESULTS_PER_PAGE) {\r\n        state.leaderboard.hasMoreResults = false\r\n      }\r\n\r\n      // Populate address results to reduce calls\r\n      state.leaderboard.addressResults = {\r\n        ...state.leaderboard.addressResults,\r\n        ...results.reduce((accum, result) => {\r\n          return {\r\n            ...accum,\r\n            [result.id]: result,\r\n          }\r\n        }, {}),\r\n      }\r\n    })\r\n\r\n    // Leaderboard account result\r\n    builder.addCase(fetchAddressResult.pending, (state) => {\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.LOADING\r\n    })\r\n    builder.addCase(fetchAddressResult.fulfilled, (state, action) => {\r\n      const { account, data } = action.payload\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\r\n      state.leaderboard.addressResults[account] = data\r\n    })\r\n    builder.addCase(fetchAddressResult.rejected, (state, action) => {\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\r\n      state.leaderboard.addressResults[action.payload] = null\r\n    })\r\n\r\n    // Leaderboard next page\r\n    builder.addCase(filterNextPageLeaderboard.pending, (state) => {\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.LOADING\r\n    })\r\n    builder.addCase(filterNextPageLeaderboard.fulfilled, (state, action) => {\r\n      const { results, skip } = action.payload\r\n\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\r\n      state.leaderboard.results = [...state.leaderboard.results, ...results]\r\n      state.leaderboard.skip = skip\r\n\r\n      if (results.length < LEADERBOARD_RESULTS_PER_PAGE) {\r\n        state.leaderboard.hasMoreResults = false\r\n      }\r\n    })\r\n\r\n    // Claimable statuses\r\n    builder.addCase(fetchClaimableStatuses.fulfilled, (state, action) => {\r\n      state.claimableStatuses = merge({}, state.claimableStatuses, action.payload)\r\n    })\r\n\r\n    // Ledger (bet) records\r\n    builder.addCase(fetchLedgerData.fulfilled, (state, action) => {\r\n      state.ledgers = merge({}, state.ledgers, action.payload)\r\n    })\r\n\r\n    // Get static market data\r\n    builder.addCase(fetchMarketData.fulfilled, (state, action) => {\r\n      const { status, currentEpoch, intervalSeconds, minBetAmount } = action.payload\r\n\r\n      // If the round has change add a new future round\r\n      if (state.currentEpoch !== currentEpoch) {\r\n        const newestRound = maxBy(Object.values(state.rounds), 'epoch')\r\n        const futureRound = makeFutureRoundResponse(\r\n          newestRound.epoch + 1,\r\n          newestRound.startTimestamp + intervalSeconds + ROUND_BUFFER,\r\n        )\r\n\r\n        state.rounds[futureRound.epoch] = futureRound\r\n      }\r\n\r\n      state.status = status\r\n      state.currentEpoch = currentEpoch\r\n      state.intervalSeconds = intervalSeconds\r\n      state.minBetAmount = minBetAmount\r\n    })\r\n\r\n    // Initialize predictions\r\n    builder.addCase(initializePredictions.fulfilled, (state, action) => {\r\n      const { status, currentEpoch, intervalSeconds, bufferSeconds, rounds, claimableStatuses, ledgers } =\r\n        action.payload\r\n      const futureRounds: ReduxNodeRound[] = []\r\n      const currentRound = rounds[currentEpoch]\r\n\r\n      for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\r\n        futureRounds.push(makeFutureRoundResponse(currentEpoch + i, currentRound.startTimestamp + intervalSeconds * i))\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        status,\r\n        currentEpoch,\r\n        intervalSeconds,\r\n        bufferSeconds,\r\n        claimableStatuses,\r\n        ledgers,\r\n        rounds: merge({}, rounds, makeRoundData(futureRounds)),\r\n      }\r\n    })\r\n\r\n    // Get single round\r\n    builder.addCase(fetchRound.fulfilled, (state, action) => {\r\n      state.rounds = merge({}, state.rounds, {\r\n        [action.payload.epoch.toString()]: action.payload,\r\n      })\r\n    })\r\n\r\n    // Get multiple rounds\r\n    builder.addCase(fetchRounds.fulfilled, (state, action) => {\r\n      state.rounds = merge({}, state.rounds, action.payload)\r\n    })\r\n\r\n    // Show History\r\n    builder.addCase(fetchHistory.pending, (state) => {\r\n      state.isFetchingHistory = true\r\n    })\r\n    builder.addCase(fetchHistory.rejected, (state) => {\r\n      state.isFetchingHistory = false\r\n    })\r\n    builder.addCase(fetchHistory.fulfilled, (state, action) => {\r\n      const { account, bets } = action.payload\r\n\r\n      state.isFetchingHistory = false\r\n      state.history[account] = merge([], state.history[account] ?? [], bets)\r\n    })\r\n\r\n    // History from the node\r\n    builder.addCase(fetchNodeHistory.pending, (state) => {\r\n      state.isFetchingHistory = true\r\n    })\r\n    builder.addCase(fetchNodeHistory.rejected, (state) => {\r\n      state.isFetchingHistory = false\r\n    })\r\n    builder.addCase(fetchNodeHistory.fulfilled, (state, action) => {\r\n      const { bets, claimableStatuses, page, totalHistory } = action.payload\r\n\r\n      state.isFetchingHistory = false\r\n      state.history = page === 1 ? bets : [...state.history, ...bets]\r\n      state.claimableStatuses = { ...state.claimableStatuses, ...claimableStatuses }\r\n      state.hasHistoryLoaded = state.history.length === totalHistory || bets.length === 0\r\n      state.totalHistory = totalHistory\r\n      state.currentHistoryPage = page\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const {\r\n  setChartPaneState,\r\n  setHistoryFilter,\r\n  setHistoryPaneState,\r\n  setLastOraclePrice,\r\n  markAsCollected,\r\n  setLeaderboardFilter,\r\n  setSelectedAddress,\r\n} = predictionsSlice.actions\r\n\r\nexport default predictionsSlice.reducer\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport teamsList from 'config/constants/teams'\r\nimport { Team } from 'config/constants/types'\r\nimport { TeamsById, TeamsState } from '../types'\r\nimport { getTeam, getTeams } from './helpers'\r\n\r\nconst teamsById: TeamsById = teamsList.reduce((accum, team) => {\r\n  return {\r\n    ...accum,\r\n    [team.id]: team,\r\n  }\r\n}, {})\r\n\r\nconst initialState: TeamsState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  data: teamsById,\r\n}\r\n\r\nexport const teamsSlice = createSlice({\r\n  name: 'teams',\r\n  initialState,\r\n  reducers: {\r\n    fetchStart: (state) => {\r\n      state.isLoading = true\r\n    },\r\n    fetchFailed: (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    },\r\n    teamFetchSucceeded: (state, action: PayloadAction<Team>) => {\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.data[action.payload.id] = action.payload\r\n    },\r\n    teamsFetchSucceeded: (state, action: PayloadAction<TeamsById>) => {\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.data = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { fetchStart, teamFetchSucceeded, fetchFailed, teamsFetchSucceeded } = teamsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchTeam = (teamId: number) => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchStart())\r\n    const team = await getTeam(teamId)\r\n    dispatch(teamFetchSucceeded(team))\r\n  } catch (error) {\r\n    dispatch(fetchFailed())\r\n  }\r\n}\r\n\r\nexport const fetchTeams = () => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchStart())\r\n    const teams = await getTeams()\r\n    dispatch(teamsFetchSucceeded(teams))\r\n  } catch (error) {\r\n    dispatch(fetchFailed())\r\n  }\r\n}\r\n\r\nexport default teamsSlice.reducer\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { AchievementState, Achievement, AchievementFetchStatus } from '../types'\r\nimport { getAchievements } from './helpers'\r\n\r\nconst initialState: AchievementState = {\r\n  achievements: [],\r\n  achievementFetchStatus: AchievementFetchStatus.NOT_FETCHED,\r\n}\r\n\r\nexport const fetchAchievements = createAsyncThunk<Achievement[], string>(\r\n  'achievements/fetchAchievements',\r\n  async (account) => {\r\n    const achievements = await getAchievements(account)\r\n    return achievements\r\n  },\r\n)\r\n\r\nexport const achievementSlice = createSlice({\r\n  name: 'achievements',\r\n  initialState,\r\n  reducers: {\r\n    addAchievement: (state, action: PayloadAction<Achievement>) => {\r\n      state.achievements.push(action.payload)\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAchievements.pending, (state) => {\r\n      state.achievementFetchStatus = AchievementFetchStatus.FETCHING\r\n    })\r\n    builder.addCase(fetchAchievements.fulfilled, (state, action) => {\r\n      state.achievementFetchStatus = AchievementFetchStatus.FETCHED\r\n      state.achievements = action.payload\r\n    })\r\n    builder.addCase(fetchAchievements.rejected, (state) => {\r\n      state.achievementFetchStatus = AchievementFetchStatus.ERROR\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { addAchievement } = achievementSlice.actions\r\n\r\nexport default achievementSlice.reducer\r\n","import request, { gql } from 'graphql-request'\r\nimport { SNAPSHOT_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\r\nimport { Proposal, ProposalState, Vote, VoteWhere } from 'state/types'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n\r\nexport const getProposals = async (first = 5, skip = 0, state = ProposalState.ACTIVE): Promise<Proposal[]> => {\r\n  const response: { proposals: Proposal[] } = await request(\r\n    SNAPSHOT_API,\r\n    gql`\r\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\r\n        proposals(\r\n          first: $first\r\n          skip: $skip\r\n          orderBy: \"end\"\r\n          orderDirection: desc\r\n          where: { space_in: \"cake.eth\", state: $state }\r\n        ) {\r\n          id\r\n          title\r\n          body\r\n          choices\r\n          start\r\n          end\r\n          snapshot\r\n          state\r\n          author\r\n          space {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    { first, skip, state },\r\n  )\r\n  return response.proposals\r\n}\r\n\r\nexport const getProposal = async (id: string): Promise<Proposal> => {\r\n  const response: { proposal: Proposal } = await request(\r\n    SNAPSHOT_API,\r\n    gql`\r\n      query getProposal($id: String) {\r\n        proposal(id: $id) {\r\n          id\r\n          title\r\n          body\r\n          choices\r\n          start\r\n          end\r\n          snapshot\r\n          state\r\n          author\r\n          space {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    { id },\r\n  )\r\n  return response.proposal\r\n}\r\n\r\nexport const getVotes = async (first: number, skip: number, where: VoteWhere): Promise<Vote[]> => {\r\n  const response: { votes: Vote[] } = await request(\r\n    SNAPSHOT_API,\r\n    gql`\r\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\r\n        votes(first: $first, skip: $skip, where: $where) {\r\n          id\r\n          voter\r\n          created\r\n          choice\r\n          space {\r\n            id\r\n            name\r\n          }\r\n          proposal {\r\n            choices\r\n          }\r\n          metadata\r\n        }\r\n      }\r\n    `,\r\n    { first, skip, where },\r\n  )\r\n  return response.votes\r\n}\r\n\r\nexport const getVoteVerificationStatuses = async (\r\n  votes: Vote[],\r\n  block?: number,\r\n): Promise<{ [key: string]: boolean }> => {\r\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n\r\n  const votesToVerify = votes.map((vote) => ({\r\n    address: vote.voter,\r\n    verificationHash: vote.metadata?.verificationHash,\r\n    total: vote.metadata?.votingPower,\r\n  }))\r\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/verify`, {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      block: blockNumber,\r\n      votes: votesToVerify,\r\n    }),\r\n  })\r\n\r\n  if (!response.ok) {\r\n    throw new Error(response.statusText)\r\n  }\r\n\r\n  const data = await response.json()\r\n  return votes.reduce((accum, vote) => {\r\n    return {\r\n      ...accum,\r\n      [vote.id]: data.data[vote.voter.toLowerCase()]?.isValid === true,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const getAllVotes = async (proposalId: string, block?: number, votesPerChunk = 1000): Promise<Vote[]> => {\r\n  // const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n  return new Promise((resolve, reject) => {\r\n    let votes: Vote[] = []\r\n\r\n    const fetchVoteChunk = async (newSkip: number) => {\r\n      try {\r\n        const voteChunk = await getVotes(votesPerChunk, newSkip, { proposal: proposalId })\r\n\r\n        if (voteChunk.length === 0) {\r\n          resolve(votes)\r\n        } else {\r\n          votes = [...votes, ...voteChunk]\r\n          fetchVoteChunk(newSkip + votesPerChunk)\r\n        }\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    }\r\n\r\n    fetchVoteChunk(0)\r\n  })\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport { merge } from 'lodash'\r\nimport { Proposal, ProposalState, VotingStateLoadingStatus, VotingState, Vote, State } from 'state/types'\r\nimport { getAllVotes, getProposal, getProposals, getVoteVerificationStatuses } from './helpers'\r\n\r\nconst initialState: VotingState = {\r\n  proposalLoadingStatus: VotingStateLoadingStatus.INITIAL,\r\n  proposals: {},\r\n  voteLoadingStatus: VotingStateLoadingStatus.INITIAL,\r\n  votes: {},\r\n}\r\n\r\n// Thunks\r\nexport const fetchProposals = createAsyncThunk<Proposal[], { first?: number; skip?: number; state?: ProposalState }>(\r\n  'voting/fetchProposals',\r\n  async ({ first, skip = 0, state = ProposalState.ACTIVE }) => {\r\n    const response = await getProposals(first, skip, state)\r\n    return response\r\n  },\r\n)\r\n\r\nexport const fetchProposal = createAsyncThunk<Proposal, string>('voting/fetchProposal', async (proposalId) => {\r\n  const response = await getProposal(proposalId)\r\n  return response\r\n})\r\n\r\nexport const fetchVotes = createAsyncThunk<\r\n  { votes: Vote[]; proposalId: string },\r\n  { proposalId: string; block?: number }\r\n>('voting/fetchVotes', async ({ proposalId, block }) => {\r\n  const response = await getAllVotes(proposalId, block)\r\n  return { votes: response, proposalId }\r\n})\r\n\r\nexport const verifyVotes = createAsyncThunk<\r\n  { results: { [key: string]: boolean }; proposalId: string },\r\n  { proposalId: string; snapshot?: string },\r\n  { state: State }\r\n>('voting/verifyVotes', async ({ proposalId, snapshot }, { getState }) => {\r\n  const state = getState()\r\n  const proposalVotes = state.voting.votes[proposalId]\r\n  const response = await getVoteVerificationStatuses(proposalVotes, Number(snapshot))\r\n  return { results: response, proposalId }\r\n})\r\n\r\nexport const votingSlice = createSlice({\r\n  name: 'voting',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    // Verify Votes\r\n    builder.addCase(verifyVotes.fulfilled, (state, action) => {\r\n      const { proposalId, results } = action.payload\r\n\r\n      if (state.votes[proposalId]) {\r\n        state.votes[proposalId] = state.votes[proposalId].map((vote) => {\r\n          return {\r\n            ...vote,\r\n            _inValid: results[vote.id] === false,\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    // Fetch Proposals\r\n    builder.addCase(fetchProposals.pending, (state) => {\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.LOADING\r\n    })\r\n    builder.addCase(fetchProposals.fulfilled, (state, action) => {\r\n      const proposals = action.payload.reduce((accum, proposal) => {\r\n        return {\r\n          ...accum,\r\n          [proposal.id]: proposal,\r\n        }\r\n      }, {})\r\n\r\n      state.proposals = merge({}, state.proposals, proposals)\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.IDLE\r\n    })\r\n\r\n    // Fetch Proposal\r\n    builder.addCase(fetchProposal.pending, (state) => {\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.LOADING\r\n    })\r\n    builder.addCase(fetchProposal.fulfilled, (state, action) => {\r\n      state.proposals[action.payload.id] = action.payload\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.IDLE\r\n    })\r\n\r\n    // Fetch Votes\r\n    builder.addCase(fetchVotes.pending, (state) => {\r\n      state.voteLoadingStatus = VotingStateLoadingStatus.LOADING\r\n    })\r\n    builder.addCase(fetchVotes.fulfilled, (state, action) => {\r\n      const { votes, proposalId } = action.payload\r\n\r\n      state.votes = {\r\n        ...state.votes,\r\n        [proposalId]: votes,\r\n      }\r\n      state.voteLoadingStatus = VotingStateLoadingStatus.IDLE\r\n    })\r\n  },\r\n})\r\n\r\nexport default votingSlice.reducer\r\n","import { createAction } from '@reduxjs/toolkit'\r\nimport { Transaction } from 'state/info/types'\r\nimport { ProtocolData, TokenData, PoolData, ChartEntry, PriceChartEntry } from './types'\r\n\r\nexport const updateProtocolData = createAction<{ protocolData: ProtocolData }>('info/protocol/updateProtocolData')\r\nexport const updateProtocolChartData = createAction<{ chartData: ChartEntry[] }>(\r\n  'info/protocol/updateProtocolChartData',\r\n)\r\nexport const updateProtocolTransactions = createAction<{ transactions: Transaction[] }>(\r\n  'info/protocol/updateProtocolTransactions',\r\n)\r\n\r\nexport const updatePoolData = createAction<{ pools: PoolData[] }>('info/pools/updatePoolData')\r\nexport const addPoolKeys = createAction<{ poolAddresses: string[] }>('info/pools/addPoolKeys')\r\nexport const updatePoolChartData = createAction<{ poolAddress: string; chartData: ChartEntry[] }>(\r\n  'info/pools/updatePoolChartData',\r\n)\r\nexport const updatePoolTransactions = createAction<{ poolAddress: string; transactions: Transaction[] }>(\r\n  'info/pools/updatePoolTransactions',\r\n)\r\n\r\nexport const updateTokenData = createAction<{ tokens: TokenData[] }>('info/tokens/updateTokenData')\r\nexport const addTokenKeys = createAction<{ tokenAddresses: string[] }>('info/tokens/addTokenKeys')\r\nexport const addTokenPoolAddresses = createAction<{ tokenAddress: string; poolAddresses: string[] }>(\r\n  'info/tokens/addTokenPoolAddresses',\r\n)\r\nexport const updateTokenChartData = createAction<{ tokenAddress: string; chartData: ChartEntry[] }>(\r\n  'info/tokens/updateTokenChartData',\r\n)\r\nexport const updateTokenTransactions = createAction<{ tokenAddress: string; transactions: Transaction[] }>(\r\n  'info/tokens/updateTokenTransactions',\r\n)\r\nexport const updateTokenPriceData = createAction<{\r\n  tokenAddress: string\r\n  secondsInterval: number\r\n  priceData?: PriceChartEntry[]\r\n  oldestFetchedTimestamp: number\r\n}>('info/tokens/updateTokenPriceData')\r\n","/* eslint-disable no-param-reassign */\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport { InfoState } from './types'\r\nimport {\r\n  updateProtocolData,\r\n  updateProtocolChartData,\r\n  updateProtocolTransactions,\r\n  updatePoolData,\r\n  addPoolKeys,\r\n  updatePoolChartData,\r\n  updatePoolTransactions,\r\n  updateTokenData,\r\n  addTokenKeys,\r\n  addTokenPoolAddresses,\r\n  updateTokenChartData,\r\n  updateTokenPriceData,\r\n  updateTokenTransactions,\r\n} from './actions'\r\n\r\nconst initialState: InfoState = {\r\n  protocol: {\r\n    overview: undefined,\r\n    chartData: undefined,\r\n    transactions: undefined,\r\n  },\r\n  pools: { byAddress: {} },\r\n  tokens: { byAddress: {} },\r\n}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    // Protocol actions\r\n    .addCase(updateProtocolData, (state, { payload: { protocolData } }) => {\r\n      state.protocol.overview = protocolData\r\n    })\r\n    .addCase(updateProtocolChartData, (state, { payload: { chartData } }) => {\r\n      state.protocol.chartData = chartData\r\n    })\r\n    .addCase(updateProtocolTransactions, (state, { payload: { transactions } }) => {\r\n      state.protocol.transactions = transactions\r\n    })\r\n    // Pools actions\r\n    .addCase(updatePoolData, (state, { payload: { pools } }) => {\r\n      pools.forEach((poolData) => {\r\n        state.pools.byAddress[poolData.address] = {\r\n          ...state.pools.byAddress[poolData.address],\r\n          data: poolData,\r\n        }\r\n      })\r\n    })\r\n    .addCase(addPoolKeys, (state, { payload: { poolAddresses } }) => {\r\n      poolAddresses.forEach((address) => {\r\n        if (!state.pools.byAddress[address]) {\r\n          state.pools.byAddress[address] = {\r\n            data: undefined,\r\n            chartData: undefined,\r\n            transactions: undefined,\r\n          }\r\n        }\r\n      })\r\n    })\r\n    .addCase(updatePoolChartData, (state, { payload: { poolAddress, chartData } }) => {\r\n      state.pools.byAddress[poolAddress] = { ...state.pools.byAddress[poolAddress], chartData }\r\n    })\r\n    .addCase(updatePoolTransactions, (state, { payload: { poolAddress, transactions } }) => {\r\n      state.pools.byAddress[poolAddress] = { ...state.pools.byAddress[poolAddress], transactions }\r\n    })\r\n    // Tokens actions\r\n    .addCase(updateTokenData, (state, { payload: { tokens } }) => {\r\n      tokens.forEach((tokenData) => {\r\n        state.tokens.byAddress[tokenData.address] = {\r\n          ...state.tokens.byAddress[tokenData.address],\r\n          data: tokenData,\r\n        }\r\n      })\r\n    })\r\n    .addCase(addTokenKeys, (state, { payload: { tokenAddresses } }) => {\r\n      tokenAddresses.forEach((address) => {\r\n        if (!state.tokens.byAddress[address]) {\r\n          state.tokens.byAddress[address] = {\r\n            poolAddresses: undefined,\r\n            data: undefined,\r\n            chartData: undefined,\r\n            priceData: {},\r\n            transactions: undefined,\r\n          }\r\n        }\r\n      })\r\n    })\r\n    .addCase(addTokenPoolAddresses, (state, { payload: { tokenAddress, poolAddresses } }) => {\r\n      state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress], poolAddresses }\r\n    })\r\n    .addCase(updateTokenChartData, (state, { payload: { tokenAddress, chartData } }) => {\r\n      state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress], chartData }\r\n    })\r\n    .addCase(updateTokenTransactions, (state, { payload: { tokenAddress, transactions } }) => {\r\n      state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress], transactions }\r\n    })\r\n    .addCase(\r\n      updateTokenPriceData,\r\n      (state, { payload: { tokenAddress, secondsInterval, priceData, oldestFetchedTimestamp } }) => {\r\n        state.tokens.byAddress[tokenAddress] = {\r\n          ...state.tokens.byAddress[tokenAddress],\r\n          priceData: {\r\n            ...state.tokens.byAddress[tokenAddress]?.priceData,\r\n            [secondsInterval]: priceData,\r\n            oldestFetchedTimestamp,\r\n          },\r\n        }\r\n      },\r\n    ),\r\n)\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\n// fired once when the app reloads but before the app renders\r\n// allows any updates to be applied to store data loaded from localStorage\r\nexport const updateVersion = createAction<void>('global/updateVersion')\r\n\r\nexport default updateVersion\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { SerializedToken } from 'config/constants/types'\r\nimport { DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../../config/constants'\r\nimport { updateVersion } from '../global/actions'\r\nimport {\r\n  addSerializedPair,\r\n  addSerializedToken,\r\n  addWatchlistPool,\r\n  addWatchlistToken,\r\n  FarmStakedOnly,\r\n  removeSerializedPair,\r\n  removeSerializedToken,\r\n  SerializedPair,\r\n  muteAudio,\r\n  toggleTheme,\r\n  unmuteAudio,\r\n  updateGasPrice,\r\n  updateUserDeadline,\r\n  updateUserExpertMode,\r\n  updateUserFarmStakedOnly,\r\n  updateUserFarmsViewMode,\r\n  updateUserPoolStakedOnly,\r\n  updateUserPoolsViewMode,\r\n  updateUserSingleHopOnly,\r\n  updateUserSlippageTolerance,\r\n  ViewMode,\r\n  updateUserPredictionAcceptedRisk,\r\n  updateUserPredictionChartDisclaimerShow,\r\n  updateUserUsernameVisibility,\r\n  updateUserExpertModeAcknowledgementShow,\r\n  hidePhishingWarningBanner,\r\n  setIsExchangeChartDisplayed,\r\n} from './actions'\r\nimport { GAS_PRICE_GWEI } from './hooks/helpers'\r\n\r\nconst currentTimestamp = () => new Date().getTime()\r\n\r\nexport interface UserState {\r\n  // the timestamp of the last updateVersion action\r\n  lastUpdateVersionTimestamp?: number\r\n\r\n  userExpertMode: boolean\r\n\r\n  // only allow swaps on direct pairs\r\n  userSingleHopOnly: boolean\r\n\r\n  // user defined slippage tolerance in bips, used in all txns\r\n  userSlippageTolerance: number\r\n\r\n  // deadline set by user in minutes, used in all txns\r\n  userDeadline: number\r\n\r\n  tokens: {\r\n    [chainId: number]: {\r\n      [address: string]: SerializedToken\r\n    }\r\n  }\r\n\r\n  pairs: {\r\n    [chainId: number]: {\r\n      // keyed by token0Address:token1Address\r\n      [key: string]: SerializedPair\r\n    }\r\n  }\r\n\r\n  timestamp: number\r\n  audioPlay: boolean\r\n  isDark: boolean\r\n  isExchangeChartDisplayed: boolean\r\n  userFarmStakedOnly: FarmStakedOnly\r\n  userPoolStakedOnly: boolean\r\n  userPoolsViewMode: ViewMode\r\n  userFarmsViewMode: ViewMode\r\n  userPredictionAcceptedRisk: boolean\r\n  userPredictionChartDisclaimerShow: boolean\r\n  userExpertModeAcknowledgementShow: boolean\r\n  userUsernameVisibility: boolean\r\n  gasPrice: string\r\n  watchlistTokens: string[]\r\n  watchlistPools: string[]\r\n  showPhishingWarningBanner: boolean\r\n}\r\n\r\nfunction pairKey(token0Address: string, token1Address: string) {\r\n  return `${token0Address};${token1Address}`\r\n}\r\n\r\nexport const initialState: UserState = {\r\n  userExpertMode: false,\r\n  userSingleHopOnly: false,\r\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\r\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\r\n  tokens: {},\r\n  pairs: {},\r\n  timestamp: currentTimestamp(),\r\n  audioPlay: true,\r\n  isDark: false,\r\n  isExchangeChartDisplayed: true,\r\n  userFarmStakedOnly: FarmStakedOnly.ON_FINISHED,\r\n  userPoolStakedOnly: false,\r\n  userPoolsViewMode: ViewMode.TABLE,\r\n  userFarmsViewMode: ViewMode.TABLE,\r\n  userPredictionAcceptedRisk: false,\r\n  userPredictionChartDisclaimerShow: true,\r\n  userExpertModeAcknowledgementShow: true,\r\n  userUsernameVisibility: false,\r\n  gasPrice: GAS_PRICE_GWEI.default,\r\n  watchlistTokens: [],\r\n  watchlistPools: [],\r\n  showPhishingWarningBanner: true,\r\n}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateVersion, (state) => {\r\n      // slippage isnt being tracked in local storage, reset to default\r\n      // noinspection SuspiciousTypeOfGuard\r\n      if (typeof state.userSlippageTolerance !== 'number') {\r\n        state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE\r\n      }\r\n\r\n      // deadline isnt being tracked in local storage, reset to default\r\n      // noinspection SuspiciousTypeOfGuard\r\n      if (typeof state.userDeadline !== 'number') {\r\n        state.userDeadline = DEFAULT_DEADLINE_FROM_NOW\r\n      }\r\n\r\n      state.lastUpdateVersionTimestamp = currentTimestamp()\r\n    })\r\n    .addCase(updateUserExpertMode, (state, action) => {\r\n      state.userExpertMode = action.payload.userExpertMode\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(updateUserSlippageTolerance, (state, action) => {\r\n      state.userSlippageTolerance = action.payload.userSlippageTolerance\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(updateUserDeadline, (state, action) => {\r\n      state.userDeadline = action.payload.userDeadline\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(updateUserSingleHopOnly, (state, action) => {\r\n      state.userSingleHopOnly = action.payload.userSingleHopOnly\r\n    })\r\n    .addCase(addSerializedToken, (state, { payload: { serializedToken } }) => {\r\n      if (!state.tokens) {\r\n        state.tokens = {}\r\n      }\r\n      state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {}\r\n      state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(removeSerializedToken, (state, { payload: { address, chainId } }) => {\r\n      if (!state.tokens) {\r\n        state.tokens = {}\r\n      }\r\n      state.tokens[chainId] = state.tokens[chainId] || {}\r\n      delete state.tokens[chainId][address]\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(addSerializedPair, (state, { payload: { serializedPair } }) => {\r\n      if (\r\n        serializedPair.token0.chainId === serializedPair.token1.chainId &&\r\n        serializedPair.token0.address !== serializedPair.token1.address\r\n      ) {\r\n        const { chainId } = serializedPair.token0\r\n        state.pairs[chainId] = state.pairs[chainId] || {}\r\n        state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair\r\n      }\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(removeSerializedPair, (state, { payload: { chainId, tokenAAddress, tokenBAddress } }) => {\r\n      if (state.pairs[chainId]) {\r\n        // just delete both keys if either exists\r\n        delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)]\r\n        delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)]\r\n      }\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(muteAudio, (state) => {\r\n      state.audioPlay = false\r\n    })\r\n    .addCase(unmuteAudio, (state) => {\r\n      state.audioPlay = true\r\n    })\r\n    .addCase(toggleTheme, (state) => {\r\n      state.isDark = !state.isDark\r\n    })\r\n    .addCase(updateUserFarmStakedOnly, (state, { payload: { userFarmStakedOnly } }) => {\r\n      state.userFarmStakedOnly = userFarmStakedOnly\r\n    })\r\n    .addCase(updateUserPoolStakedOnly, (state, { payload: { userPoolStakedOnly } }) => {\r\n      state.userPoolStakedOnly = userPoolStakedOnly\r\n    })\r\n    .addCase(updateUserPoolsViewMode, (state, { payload: { userPoolsViewMode } }) => {\r\n      state.userPoolsViewMode = userPoolsViewMode\r\n    })\r\n    .addCase(updateUserFarmsViewMode, (state, { payload: { userFarmsViewMode } }) => {\r\n      state.userFarmsViewMode = userFarmsViewMode\r\n    })\r\n    .addCase(updateUserPredictionAcceptedRisk, (state, { payload: { userAcceptedRisk } }) => {\r\n      state.userPredictionAcceptedRisk = userAcceptedRisk\r\n    })\r\n    .addCase(updateUserPredictionChartDisclaimerShow, (state, { payload: { userShowDisclaimer } }) => {\r\n      state.userPredictionChartDisclaimerShow = userShowDisclaimer\r\n    })\r\n    .addCase(updateUserExpertModeAcknowledgementShow, (state, { payload: { userExpertModeAcknowledgementShow } }) => {\r\n      state.userExpertModeAcknowledgementShow = userExpertModeAcknowledgementShow\r\n    })\r\n    .addCase(updateUserUsernameVisibility, (state, { payload: { userUsernameVisibility } }) => {\r\n      state.userUsernameVisibility = userUsernameVisibility\r\n    })\r\n    .addCase(updateGasPrice, (state, action) => {\r\n      state.gasPrice = action.payload.gasPrice\r\n    })\r\n    .addCase(addWatchlistToken, (state, { payload: { address } }) => {\r\n      // state.watchlistTokens can be undefined for pre-loaded localstorage user state\r\n      const tokenWatchlist = state.watchlistTokens ?? []\r\n      if (!tokenWatchlist.includes(address)) {\r\n        state.watchlistTokens = [...tokenWatchlist, address]\r\n      } else {\r\n        // Remove token from watchlist\r\n        const newTokens = state.watchlistTokens.filter((x) => x !== address)\r\n        state.watchlistTokens = newTokens\r\n      }\r\n    })\r\n    .addCase(addWatchlistPool, (state, { payload: { address } }) => {\r\n      // state.watchlistPools can be undefined for pre-loaded localstorage user state\r\n      const poolsWatchlist = state.watchlistPools ?? []\r\n      if (!poolsWatchlist.includes(address)) {\r\n        state.watchlistPools = [...poolsWatchlist, address]\r\n      } else {\r\n        // Remove pool from watchlist\r\n        const newPools = state.watchlistPools.filter((x) => x !== address)\r\n        state.watchlistPools = newPools\r\n      }\r\n    })\r\n    .addCase(hidePhishingWarningBanner, (state) => {\r\n      state.showPhishingWarningBanner = false\r\n    })\r\n    .addCase(setIsExchangeChartDisplayed, (state, { payload }) => {\r\n      state.isExchangeChartDisplayed = payload\r\n    }),\r\n)\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport enum Field {\r\n  CURRENCY_A = 'CURRENCY_A',\r\n  CURRENCY_B = 'CURRENCY_B',\r\n}\r\n\r\nexport const typeInput = createAction<{ field: Field; typedValue: string; noLiquidity: boolean }>('mint/typeInputMint')\r\nexport const resetMintState = createAction<void>('mint/resetMintState')\r\n","/* eslint-disable no-param-reassign */\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions'\r\n\r\nconst now = () => new Date().getTime()\r\n\r\nexport interface TransactionDetails {\r\n  hash: string\r\n  approval?: { tokenAddress: string; spender: string }\r\n  summary?: string\r\n  claim?: { recipient: string }\r\n  receipt?: SerializableTransactionReceipt\r\n  lastCheckedBlockNumber?: number\r\n  addedTime: number\r\n  confirmedTime?: number\r\n  from: string\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails\r\n  }\r\n}\r\n\r\nexport const initialState: TransactionState = {}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary, claim } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.')\r\n      }\r\n      const txs = transactions[chainId] ?? {}\r\n      txs[hash] = { hash, approval, summary, claim, from, addedTime: now() }\r\n      transactions[chainId] = txs\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return\r\n      transactions[chainId] = {}\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash]\r\n      if (!tx) {\r\n        return\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash]\r\n      if (!tx) {\r\n        return\r\n      }\r\n      tx.receipt = receipt\r\n      tx.confirmedTime = now()\r\n    }),\r\n)\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  Field,\r\n  replaceSwapState,\r\n  selectCurrency,\r\n  setRecipient,\r\n  switchCurrencies,\r\n  typeInput,\r\n  updateDerivedPairData,\r\n  updatePairData,\r\n} from './actions'\r\nimport { DerivedPairDataNormalized, PairDataNormalized } from './types'\r\n\r\nexport interface SwapState {\r\n  readonly independentField: Field\r\n  readonly typedValue: string\r\n  readonly [Field.INPUT]: {\r\n    readonly currencyId: string | undefined\r\n  }\r\n  readonly [Field.OUTPUT]: {\r\n    readonly currencyId: string | undefined\r\n  }\r\n  // the typed recipient address or ENS name, or null if swap should go to sender\r\n  readonly recipient: string | null\r\n  readonly pairDataById: Record<number, Record<string, PairDataNormalized>> | null\r\n  readonly derivedPairDataById: Record<number, Record<string, DerivedPairDataNormalized>> | null\r\n}\r\n\r\nconst initialState: SwapState = {\r\n  independentField: Field.INPUT,\r\n  typedValue: '',\r\n  [Field.INPUT]: {\r\n    currencyId: '',\r\n  },\r\n  [Field.OUTPUT]: {\r\n    currencyId: '',\r\n  },\r\n  pairDataById: {},\r\n  derivedPairDataById: {},\r\n  recipient: null,\r\n}\r\n\r\nexport default createReducer<SwapState>(initialState, (builder) =>\r\n  builder\r\n    .addCase(\r\n      replaceSwapState,\r\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\r\n        return {\r\n          [Field.INPUT]: {\r\n            currencyId: inputCurrencyId,\r\n          },\r\n          [Field.OUTPUT]: {\r\n            currencyId: outputCurrencyId,\r\n          },\r\n          independentField: field,\r\n          typedValue,\r\n          recipient,\r\n          pairDataById: state.pairDataById,\r\n          derivedPairDataById: state.derivedPairDataById,\r\n        }\r\n      },\r\n    )\r\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\r\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n      if (currencyId === state[otherField].currencyId) {\r\n        // the case where we have to swap the order\r\n        return {\r\n          ...state,\r\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\r\n          [field]: { currencyId },\r\n          [otherField]: { currencyId: state[field].currencyId },\r\n        }\r\n      }\r\n      // the normal case\r\n      return {\r\n        ...state,\r\n        [field]: { currencyId },\r\n      }\r\n    })\r\n    .addCase(switchCurrencies, (state) => {\r\n      return {\r\n        ...state,\r\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\r\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\r\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\r\n      }\r\n    })\r\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\r\n      return {\r\n        ...state,\r\n        independentField: field,\r\n        typedValue,\r\n      }\r\n    })\r\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\r\n      state.recipient = recipient\r\n    })\r\n    .addCase(updatePairData, (state, { payload: { pairData, pairId, timeWindow } }) => {\r\n      if (!state.pairDataById[pairId]) {\r\n        state.pairDataById[pairId] = {}\r\n      }\r\n      state.pairDataById[pairId][timeWindow] = pairData\r\n    })\r\n    .addCase(updateDerivedPairData, (state, { payload: { pairData, pairId, timeWindow } }) => {\r\n      if (!state.derivedPairDataById[pairId]) {\r\n        state.derivedPairDataById[pairId] = {}\r\n      }\r\n      state.derivedPairDataById[pairId][timeWindow] = pairData\r\n    }),\r\n)\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport enum Field {\r\n  LIQUIDITY_PERCENT = 'LIQUIDITY_PERCENT',\r\n  LIQUIDITY = 'LIQUIDITY',\r\n  CURRENCY_A = 'CURRENCY_A',\r\n  CURRENCY_B = 'CURRENCY_B',\r\n}\r\n\r\nexport const typeInput = createAction<{ field: Field; typedValue: string }>('burn/typeInputBurn')\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { Field, resetMintState, typeInput } from './actions'\r\n\r\nexport interface MintState {\r\n  readonly independentField: Field\r\n  readonly typedValue: string\r\n  readonly otherTypedValue: string // for the case when there's no liquidity\r\n}\r\n\r\nconst initialState: MintState = {\r\n  independentField: Field.CURRENCY_A,\r\n  typedValue: '',\r\n  otherTypedValue: '',\r\n}\r\n\r\nexport default createReducer<MintState>(initialState, (builder) =>\r\n  builder\r\n    .addCase(resetMintState, () => initialState)\r\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\r\n      if (noLiquidity) {\r\n        // they're typing into the field they've last typed in\r\n        if (field === state.independentField) {\r\n          return {\r\n            ...state,\r\n            independentField: field,\r\n            typedValue,\r\n          }\r\n        }\r\n        // they're typing into a new field, store the other value\r\n\r\n        return {\r\n          ...state,\r\n          independentField: field,\r\n          typedValue,\r\n          otherTypedValue: state.typedValue,\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        independentField: field,\r\n        typedValue,\r\n        otherTypedValue: '',\r\n      }\r\n    }),\r\n)\r\n","import { ActionCreatorWithPayload, createAction } from '@reduxjs/toolkit'\r\nimport { TokenList, Version } from '@uniswap/token-lists'\r\n\r\nexport const fetchTokenList: Readonly<{\r\n  pending: ActionCreatorWithPayload<{ url: string; requestId: string }>\r\n  fulfilled: ActionCreatorWithPayload<{ url: string; tokenList: TokenList; requestId: string }>\r\n  rejected: ActionCreatorWithPayload<{ url: string; errorMessage: string; requestId: string }>\r\n}> = {\r\n  pending: createAction('lists/fetchTokenList/pending'),\r\n  fulfilled: createAction('lists/fetchTokenList/fulfilled'),\r\n  rejected: createAction('lists/fetchTokenList/rejected'),\r\n}\r\n// add and remove from list options\r\nexport const addList = createAction<string>('lists/addList')\r\nexport const removeList = createAction<string>('lists/removeList')\r\n\r\n// select which lists to search across from loaded lists\r\nexport const enableList = createAction<string>('lists/enableList')\r\nexport const disableList = createAction<string>('lists/disableList')\r\n\r\n// versioning\r\nexport const acceptListUpdate = createAction<string>('lists/acceptListUpdate')\r\nexport const rejectVersionUpdate = createAction<Version>('lists/rejectVersionUpdate')\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { TokenList } from '@uniswap/token-lists/dist/types'\r\nimport { DEFAULT_ACTIVE_LIST_URLS, UNSUPPORTED_LIST_URLS, DEFAULT_LIST_OF_LISTS } from '../../config/constants/lists'\r\n\r\nimport { updateVersion } from '../global/actions'\r\nimport { acceptListUpdate, addList, fetchTokenList, removeList, enableList, disableList } from './actions'\r\n\r\nexport interface ListsState {\r\n  readonly byUrl: {\r\n    readonly [url: string]: {\r\n      readonly current: TokenList | null\r\n      readonly pendingUpdate: TokenList | null\r\n      readonly loadingRequestId: string | null\r\n      readonly error: string | null\r\n    }\r\n  }\r\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\r\n  readonly lastInitializedDefaultListOfLists?: string[]\r\n\r\n  // currently active lists\r\n  readonly activeListUrls: string[] | undefined\r\n}\r\n\r\ntype ListState = ListsState['byUrl'][string]\r\n\r\nconst NEW_LIST_STATE: ListState = {\r\n  error: null,\r\n  current: null,\r\n  loadingRequestId: null,\r\n  pendingUpdate: null,\r\n}\r\n\r\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\r\n\r\nexport const initialState: ListsState = {\r\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\r\n  byUrl: {\r\n    ...DEFAULT_LIST_OF_LISTS.concat(...UNSUPPORTED_LIST_URLS).reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\r\n      memo[listUrl] = NEW_LIST_STATE\r\n      return memo\r\n    }, {}),\r\n  },\r\n  activeListUrls: DEFAULT_ACTIVE_LIST_URLS,\r\n}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\r\n      state.byUrl[url] = {\r\n        current: null,\r\n        pendingUpdate: null,\r\n        ...state.byUrl[url],\r\n        loadingRequestId: requestId,\r\n        error: null,\r\n      }\r\n    })\r\n    .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\r\n      const current = state.byUrl[url]?.current\r\n      const loadingRequestId = state.byUrl[url]?.loadingRequestId\r\n\r\n      // no-op if update does nothing\r\n      if (current) {\r\n        const upgradeType = getVersionUpgrade(current.version, tokenList.version)\r\n\r\n        if (upgradeType === VersionUpgrade.NONE) return\r\n        if (loadingRequestId === null || loadingRequestId === requestId) {\r\n          state.byUrl[url] = {\r\n            ...state.byUrl[url],\r\n            loadingRequestId: null,\r\n            error: null,\r\n            current,\r\n            pendingUpdate: tokenList,\r\n          }\r\n        }\r\n      } else {\r\n        // activate if on default active\r\n        if (DEFAULT_ACTIVE_LIST_URLS.includes(url)) {\r\n          state.activeListUrls?.push(url)\r\n        }\r\n\r\n        state.byUrl[url] = {\r\n          ...state.byUrl[url],\r\n          loadingRequestId: null,\r\n          error: null,\r\n          current: tokenList,\r\n          pendingUpdate: null,\r\n        }\r\n      }\r\n    })\r\n    .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\r\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\r\n        // no-op since it's not the latest request\r\n        return\r\n      }\r\n\r\n      state.byUrl[url] = {\r\n        ...state.byUrl[url],\r\n        loadingRequestId: null,\r\n        error: errorMessage,\r\n        current: null,\r\n        pendingUpdate: null,\r\n      }\r\n    })\r\n    .addCase(addList, (state, { payload: url }) => {\r\n      if (!state.byUrl[url]) {\r\n        state.byUrl[url] = NEW_LIST_STATE\r\n      }\r\n    })\r\n    .addCase(removeList, (state, { payload: url }) => {\r\n      if (state.byUrl[url]) {\r\n        delete state.byUrl[url]\r\n      }\r\n      // remove list from active urls if needed\r\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\r\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\r\n      }\r\n    })\r\n    .addCase(enableList, (state, { payload: url }) => {\r\n      if (!state.byUrl[url]) {\r\n        state.byUrl[url] = NEW_LIST_STATE\r\n      }\r\n\r\n      if (state.activeListUrls && !state.activeListUrls.includes(url)) {\r\n        state.activeListUrls.push(url)\r\n      }\r\n\r\n      if (!state.activeListUrls) {\r\n        state.activeListUrls = [url]\r\n      }\r\n    })\r\n    .addCase(disableList, (state, { payload: url }) => {\r\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\r\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\r\n      }\r\n    })\r\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\r\n      if (!state.byUrl[url]?.pendingUpdate) {\r\n        throw new Error('accept list update called without pending update')\r\n      }\r\n      state.byUrl[url] = {\r\n        ...state.byUrl[url],\r\n        pendingUpdate: null,\r\n        current: state.byUrl[url].pendingUpdate,\r\n      }\r\n    })\r\n    .addCase(updateVersion, (state) => {\r\n      // state loaded from localStorage, but new lists have never been initialized\r\n      if (!state.lastInitializedDefaultListOfLists) {\r\n        state.byUrl = initialState.byUrl\r\n        state.activeListUrls = initialState.activeListUrls\r\n      } else if (state.lastInitializedDefaultListOfLists) {\r\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\r\n          (s, l) => s.add(l),\r\n          new Set(),\r\n        )\r\n        const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\r\n\r\n        DEFAULT_LIST_OF_LISTS.forEach((listUrl) => {\r\n          if (!lastInitializedSet.has(listUrl)) {\r\n            state.byUrl[listUrl] = NEW_LIST_STATE\r\n          }\r\n        })\r\n\r\n        state.lastInitializedDefaultListOfLists.forEach((listUrl) => {\r\n          if (!newListOfListsSet.has(listUrl)) {\r\n            delete state.byUrl[listUrl]\r\n          }\r\n        })\r\n      }\r\n\r\n      state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\r\n\r\n      // if no active lists, activate defaults\r\n      if (!state.activeListUrls) {\r\n        state.activeListUrls = DEFAULT_ACTIVE_LIST_URLS\r\n\r\n        // for each list on default list, initialize if needed\r\n        DEFAULT_ACTIVE_LIST_URLS.map((listUrl: string) => {\r\n          if (!state.byUrl[listUrl]) {\r\n            state.byUrl[listUrl] = NEW_LIST_STATE\r\n          }\r\n          return true\r\n        })\r\n      }\r\n    }),\r\n)\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { Field, typeInput } from './actions'\r\n\r\nexport interface BurnState {\r\n  readonly independentField: Field\r\n  readonly typedValue: string\r\n}\r\n\r\nconst initialState: BurnState = {\r\n  independentField: Field.LIQUIDITY_PERCENT,\r\n  typedValue: '0',\r\n}\r\n\r\nexport default createReducer<BurnState>(initialState, (builder) =>\r\n  builder.addCase(typeInput, (state, { payload: { field, typedValue } }) => {\r\n    return {\r\n      ...state,\r\n      independentField: field,\r\n      typedValue,\r\n    }\r\n  }),\r\n)\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  addMulticallListeners,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  removeMulticallListeners,\r\n  toCallKey,\r\n  updateMulticallResults,\r\n} from './actions'\r\n\r\nexport interface MulticallState {\r\n  callListeners?: {\r\n    // on a per-chain basis\r\n    [chainId: number]: {\r\n      // stores for each call key the listeners' preferences\r\n      [callKey: string]: {\r\n        // stores how many listeners there are per each blocks per fetch preference\r\n        [blocksPerFetch: number]: number\r\n      }\r\n    }\r\n  }\r\n\r\n  callResults: {\r\n    [chainId: number]: {\r\n      [callKey: string]: {\r\n        data?: string | null\r\n        blockNumber?: number\r\n        fetchingBlockNumber?: number\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst initialState: MulticallState = {\r\n  callResults: {},\r\n}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addMulticallListeners, (state, { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }) => {\r\n      const listeners: MulticallState['callListeners'] = state.callListeners\r\n        ? state.callListeners\r\n        : (state.callListeners = {})\r\n      listeners[chainId] = listeners[chainId] ?? {}\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call)\r\n        listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\r\n        listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\r\n      })\r\n    })\r\n    .addCase(\r\n      removeMulticallListeners,\r\n      (state, { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }) => {\r\n        const listeners: MulticallState['callListeners'] = state.callListeners\r\n          ? state.callListeners\r\n          : (state.callListeners = {})\r\n\r\n        if (!listeners[chainId]) return\r\n        calls.forEach((call) => {\r\n          const callKey = toCallKey(call)\r\n          if (!listeners[chainId][callKey]) return\r\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\r\n\r\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\r\n            delete listeners[chainId][callKey][blocksPerFetch]\r\n          } else {\r\n            listeners[chainId][callKey][blocksPerFetch]--\r\n          }\r\n        })\r\n      },\r\n    )\r\n    .addCase(fetchingMulticallResults, (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call)\r\n        const current = state.callResults[chainId][callKey]\r\n        if (!current) {\r\n          state.callResults[chainId][callKey] = {\r\n            fetchingBlockNumber,\r\n          }\r\n        } else {\r\n          if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\r\n          state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\r\n        }\r\n      })\r\n    })\r\n    .addCase(errorFetchingMulticallResults, (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call)\r\n        const current = state.callResults[chainId][callKey]\r\n        if (!current) return // only should be dispatched if we are already fetching\r\n        if (current.fetchingBlockNumber === fetchingBlockNumber) {\r\n          delete current.fetchingBlockNumber\r\n          current.data = null\r\n          current.blockNumber = fetchingBlockNumber\r\n        }\r\n      })\r\n    })\r\n    .addCase(updateMulticallResults, (state, { payload: { chainId, results, blockNumber } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\r\n      Object.keys(results).forEach((callKey) => {\r\n        const current = state.callResults[chainId][callKey]\r\n        if ((current?.blockNumber ?? 0) > blockNumber) return\r\n        state.callResults[chainId][callKey] = {\r\n          data: results[callKey],\r\n          blockNumber,\r\n        }\r\n      })\r\n    }),\r\n)\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport { save, load } from 'redux-localstorage-simple'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport { useDispatch } from 'react-redux'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\nimport predictionsReducer from './predictions'\r\nimport profileReducer, { initialState as profileInitialState } from './profile'\r\nimport teamsReducer from './teams'\r\nimport achievementsReducer from './achievements'\r\nimport blockReducer from './block'\r\nimport votingReducer from './voting'\r\nimport lotteryReducer from './lottery'\r\nimport infoReducer from './info'\r\nimport { updateVersion } from './global/actions'\r\nimport user, { initialState as userInitialState } from './user/reducer'\r\nimport transactions, { initialState as transactionsInitialState } from './transactions/reducer'\r\nimport swap from './swap/reducer'\r\nimport mint from './mint/reducer'\r\nimport lists, { initialState as listsInitialState } from './lists/reducer'\r\nimport burn from './burn/reducer'\r\nimport multicall from './multicall/reducer'\r\nimport nftMarketReducer from './nftMarket/reducer'\r\n\r\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists', 'profile']\r\n\r\nconst store = configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    achievements: achievementsReducer,\r\n    block: blockReducer,\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n    predictions: predictionsReducer,\r\n    profile: profileReducer,\r\n    teams: teamsReducer,\r\n    voting: votingReducer,\r\n    lottery: lotteryReducer,\r\n    info: infoReducer,\r\n    nftMarket: nftMarketReducer,\r\n\r\n    // Exchange\r\n    user,\r\n    transactions,\r\n    swap,\r\n    mint,\r\n    burn,\r\n    multicall,\r\n    lists,\r\n  },\r\n  middleware: [...getDefaultMiddleware({ thunk: true }), save({ states: PERSISTED_KEYS })],\r\n  preloadedState: load({\r\n    states: PERSISTED_KEYS,\r\n    preloadedState: {\r\n      user: cloneDeep(userInitialState),\r\n      transactions: cloneDeep(transactionsInitialState),\r\n      lists: cloneDeep(listsInitialState),\r\n      profile: cloneDeep(profileInitialState),\r\n    },\r\n  }),\r\n})\r\n\r\nstore.dispatch(updateVersion())\r\n\r\n/**\r\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\r\n */\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type AppState = ReturnType<typeof store.getState>\r\nexport const useAppDispatch = () => useDispatch()\r\n\r\nexport default store\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { formatUnits } from 'ethers/lib/utils'\r\nimport { getLanguageCodeFromLS } from 'contexts/Localization/helpers'\r\nimport { BIG_TEN } from './bigNumber'\r\n\r\n// @ts-ignore\r\nconst lotteryTokenDecimals = parseInt(window.SO_LotteryConfig.token.decimals, 10)\r\n\r\n/**\r\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\r\n */\r\nexport const getDecimalAmount = (amount: BigNumber, decimals = lotteryTokenDecimals || 18) => {\r\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\r\n}\r\n\r\nexport const getBalanceAmount = (amount: BigNumber, decimals = lotteryTokenDecimals || 18) => {\r\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\r\n}\r\n\r\n/**\r\n * This function is not really necessary but is used throughout the site.\r\n */\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = lotteryTokenDecimals || 18) => {\r\n  return getBalanceAmount(balance, decimals).toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = lotteryTokenDecimals || 18, displayDecimals?: number) => {\r\n  return getBalanceAmount(balance, decimals).toFixed(displayDecimals)\r\n}\r\n\r\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\r\n  const options = {\r\n    minimumFractionDigits: minPrecision,\r\n    maximumFractionDigits: maxPrecision,\r\n  }\r\n  return number.toLocaleString(undefined, options)\r\n}\r\n\r\n/**\r\n * Method to format the display of wei given an ethers.BigNumber object\r\n * Note: does NOT round\r\n */\r\nexport const formatBigNumber = (number: ethers.BigNumber, displayDecimals = lotteryTokenDecimals || 18, decimals = lotteryTokenDecimals || 18) => {\r\n  const remainder = number.mod(ethers.BigNumber.from(10).pow(decimals - displayDecimals))\r\n  return formatUnits(number.sub(remainder), decimals)\r\n}\r\n\r\n/**\r\n * Method to format the display of wei given an ethers.BigNumber object with toFixed\r\n * Note: rounds\r\n */\r\nexport const formatBigNumberToFixed = (number: ethers.BigNumber, displayDecimals = lotteryTokenDecimals || 18, decimals = lotteryTokenDecimals || 18) => {\r\n  const formattedString = formatUnits(number, decimals)\r\n  return (+formattedString).toFixed(displayDecimals)\r\n}\r\n\r\n/**\r\n * Formats a FixedNumber like BigNumber\r\n * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)\r\n */\r\nexport const formatFixedNumber = (number: ethers.FixedNumber, displayDecimals = lotteryTokenDecimals || 18, decimals = lotteryTokenDecimals || 18) => {\r\n  // Remove decimal\r\n  const [leftSide] = number.toString().split('.')\r\n  return formatBigNumber(ethers.BigNumber.from(leftSide), displayDecimals, decimals)\r\n}\r\n\r\nexport const formatLocalisedCompactNumber = (number: number): string => {\r\n  const codeFromStorage = getLanguageCodeFromLS()\r\n  return new Intl.NumberFormat(codeFromStorage, {\r\n    notation: 'compact',\r\n    compactDisplay: 'long',\r\n    maximumSignificantDigits: 2,\r\n  }).format(number)\r\n}\r\n\r\nexport default formatLocalisedCompactNumber\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getAddress } from '@ethersproject/address'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json'\r\nimport { ChainId, JSBI, Percent, Token, CurrencyAmount, Currency, ETHER } from '@pancakeswap/sdk'\r\nimport { ROUTER_ADDRESS } from '../config/constants'\r\n// import { BASE_BSC_SCAN_URLS } from '../config'\r\nimport { TokenAddressMap } from '../state/lists/hooks'\r\n\r\n\r\n// @ts-ignore\r\nconst BASE_BSC_SCAN_URL = window.SO_LotteryConfig.etherscan\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value: any): string | false {\r\n  try {\r\n    return getAddress(value)\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport function getBscScanLink(\r\n  data: string | number,\r\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\r\n  chainId: ChainId = ChainId.MAINNET,\r\n): string {\r\n  switch (type) {\r\n    case 'transaction': {\r\n      return `${BASE_BSC_SCAN_URL}/tx/${data}`\r\n    }\r\n    case 'token': {\r\n      return `${BASE_BSC_SCAN_URL}/token/${data}`\r\n    }\r\n    case 'block': {\r\n      return `${BASE_BSC_SCAN_URL}/block/${data}`\r\n    }\r\n    case 'countdown': {\r\n      return `${BASE_BSC_SCAN_URL}/block/countdown/${data}`\r\n    }\r\n    default: {\r\n      return `${BASE_BSC_SCAN_URL}/address/${data}`\r\n    }\r\n  }\r\n}\r\n\r\nexport function getBscScanLinkForNft(\r\n  collectionAddress: string,\r\n  tokenId: string,\r\n  chainId: ChainId = ChainId.MAINNET,\r\n): string {\r\n  return `${BASE_BSC_SCAN_URL}/token/${collectionAddress}?a=${tokenId}`\r\n}\r\n\r\n// add 10%\r\nexport function calculateGasMargin(value: BigNumber): BigNumber {\r\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\r\n}\r\n\r\n// converts a basis points value to a sdk percent\r\nexport function basisPointsToPercent(num: number): Percent {\r\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\r\n}\r\n\r\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\r\n  if (slippage < 0 || slippage > 10000) {\r\n    throw Error(`Unexpected slippage value: ${slippage}`)\r\n  }\r\n  return [\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\r\n  ]\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n\r\n// account is optional\r\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n\r\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\r\n}\r\n\r\n// account is optional\r\nexport function getRouterContract(_: number, library: Web3Provider, account?: string): Contract {\r\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account)\r\n}\r\n\r\nexport function escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\r\n}\r\n\r\nexport function isTokenOnList(defaultTokens: TokenAddressMap, currency?: Currency): boolean {\r\n  if (currency === ETHER) return true\r\n  return Boolean(currency instanceof Token && defaultTokens[currency.chainId]?.[currency.address])\r\n}\r\n","import { Interface, FunctionFragment } from '@ethersproject/abi'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport {\r\n  addMulticallListeners,\r\n  Call,\r\n  removeMulticallListeners,\r\n  parseCallKey,\r\n  toCallKey,\r\n  ListenerOptions,\r\n} from './actions'\r\n\r\nexport interface Result extends ReadonlyArray<any> {\r\n  readonly [key: string]: any\r\n}\r\n\r\ntype MethodArg = string | number | BigNumber\r\ntype MethodArgs = Array<MethodArg | MethodArg[]>\r\n\r\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\r\n\r\nfunction isMethodArg(x: unknown): x is MethodArg {\r\n  return ['string', 'number'].indexOf(typeof x) !== -1\r\n}\r\n\r\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\r\n  return (\r\n    x === undefined ||\r\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\r\n  )\r\n}\r\n\r\ninterface CallResult {\r\n  readonly valid: boolean\r\n  readonly data: string | undefined\r\n  readonly blockNumber: number | undefined\r\n}\r\n\r\nconst INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\r\n\r\n// use this options object\r\nexport const NEVER_RELOAD: ListenerOptions = {\r\n  blocksPerFetch: Infinity,\r\n}\r\n\r\n// the lowest level call for subscribing to contract data\r\nfunction useCallsData(calls: (Call | undefined)[], options?: ListenerOptions): CallResult[] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const callResults = useSelector<AppState, AppState['multicall']['callResults']>(\r\n    (state) => state.multicall.callResults,\r\n  )\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const serializedCallKeys: string = useMemo(\r\n    () =>\r\n      JSON.stringify(\r\n        calls\r\n          ?.filter((c): c is Call => Boolean(c))\r\n          ?.map(toCallKey)\r\n          ?.sort() ?? [],\r\n      ),\r\n    [calls],\r\n  )\r\n\r\n  // update listeners when there is an actual change that persists for at least 100ms\r\n  useEffect(() => {\r\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\r\n    if (!chainId || callKeys.length === 0) return undefined\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow\r\n    const calls = callKeys.map((key) => parseCallKey(key))\r\n    dispatch(\r\n      addMulticallListeners({\r\n        chainId,\r\n        calls,\r\n        options,\r\n      }),\r\n    )\r\n\r\n    return () => {\r\n      dispatch(\r\n        removeMulticallListeners({\r\n          chainId,\r\n          calls,\r\n          options,\r\n        }),\r\n      )\r\n    }\r\n  }, [chainId, dispatch, options, serializedCallKeys])\r\n\r\n  return useMemo(\r\n    () =>\r\n      calls.map<CallResult>((call) => {\r\n        if (!chainId || !call) return INVALID_RESULT\r\n\r\n        const result = callResults[chainId]?.[toCallKey(call)]\r\n        let data\r\n        if (result?.data && result?.data !== '0x') {\r\n          // eslint-disable-next-line prefer-destructuring\r\n          data = result.data\r\n        }\r\n\r\n        return { valid: true, data, blockNumber: result?.blockNumber }\r\n      }),\r\n    [callResults, calls, chainId],\r\n  )\r\n}\r\n\r\ninterface CallState {\r\n  readonly valid: boolean\r\n  // the result, or undefined if loading or errored/no data\r\n  readonly result: Result | undefined\r\n  // true if the result has never been fetched\r\n  readonly loading: boolean\r\n  // true if the result is not for the latest block\r\n  readonly syncing: boolean\r\n  // true if the call was made and is synced, but the return data is invalid\r\n  readonly error: boolean\r\n}\r\n\r\nconst INVALID_CALL_STATE: CallState = { valid: false, result: undefined, loading: false, syncing: false, error: false }\r\nconst LOADING_CALL_STATE: CallState = { valid: true, result: undefined, loading: true, syncing: true, error: false }\r\n\r\nfunction toCallState(\r\n  callResult: CallResult | undefined,\r\n  contractInterface: Interface | undefined,\r\n  fragment: FunctionFragment | undefined,\r\n  latestBlockNumber: number | undefined,\r\n): CallState {\r\n  if (!callResult) return INVALID_CALL_STATE\r\n  const { valid, data, blockNumber } = callResult\r\n  if (!valid) return INVALID_CALL_STATE\r\n  if (valid && !blockNumber) return LOADING_CALL_STATE\r\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE\r\n  const success = data && data.length > 2\r\n  const syncing = (blockNumber ?? 0) < latestBlockNumber\r\n  let result: Result | undefined\r\n  if (success && data) {\r\n    try {\r\n      result = contractInterface.decodeFunctionResult(fragment, data)\r\n    } catch (error) {\r\n      console.debug('Result data parsing failed', fragment, data)\r\n      return {\r\n        valid: true,\r\n        loading: false,\r\n        error: true,\r\n        syncing,\r\n        result,\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    valid: true,\r\n    loading: false,\r\n    syncing,\r\n    result,\r\n    error: !success,\r\n  }\r\n}\r\n\r\nexport function useSingleContractMultipleData(\r\n  contract: Contract | null | undefined,\r\n  methodName: string,\r\n  callInputs: OptionalMethodInputs[],\r\n  options?: ListenerOptions,\r\n): CallState[] {\r\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\r\n\r\n  const calls = useMemo(\r\n    () =>\r\n      contract && fragment && callInputs && callInputs.length > 0\r\n        ? callInputs.map<Call>((inputs) => {\r\n            return {\r\n              address: contract.address,\r\n              callData: contract.interface.encodeFunctionData(fragment, inputs),\r\n            }\r\n          })\r\n        : [],\r\n    [callInputs, contract, fragment],\r\n  )\r\n\r\n  const results = useCallsData(calls, options)\r\n\r\n  const { currentBlock } = useBlock()\r\n\r\n  return useMemo(() => {\r\n    return results.map((result) => toCallState(result, contract?.interface, fragment, currentBlock))\r\n  }, [fragment, contract, results, currentBlock])\r\n}\r\n\r\nexport function useMultipleContractSingleData(\r\n  addresses: (string | undefined)[],\r\n  contractInterface: Interface,\r\n  methodName: string,\r\n  callInputs?: OptionalMethodInputs,\r\n  options?: ListenerOptions,\r\n): CallState[] {\r\n  const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName])\r\n  const callData: string | undefined = useMemo(\r\n    () =>\r\n      fragment && isValidMethodArgs(callInputs)\r\n        ? contractInterface.encodeFunctionData(fragment, callInputs)\r\n        : undefined,\r\n    [callInputs, contractInterface, fragment],\r\n  )\r\n\r\n  const calls = useMemo(\r\n    () =>\r\n      fragment && addresses && addresses.length > 0 && callData\r\n        ? addresses.map<Call | undefined>((address) => {\r\n            return address && callData\r\n              ? {\r\n                  address,\r\n                  callData,\r\n                }\r\n              : undefined\r\n          })\r\n        : [],\r\n    [addresses, callData, fragment],\r\n  )\r\n\r\n  const results = useCallsData(calls, options)\r\n\r\n  const { currentBlock } = useBlock()\r\n\r\n  return useMemo(() => {\r\n    return results.map((result) => toCallState(result, contractInterface, fragment, currentBlock))\r\n  }, [fragment, results, contractInterface, currentBlock])\r\n}\r\n\r\nexport function useSingleCallResult(\r\n  contract: Contract | null | undefined,\r\n  methodName: string,\r\n  inputs?: OptionalMethodInputs,\r\n  options?: ListenerOptions,\r\n): CallState {\r\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\r\n\r\n  const calls = useMemo<Call[]>(() => {\r\n    return contract && fragment && isValidMethodArgs(inputs)\r\n      ? [\r\n          {\r\n            address: contract.address,\r\n            callData: contract.interface.encodeFunctionData(fragment, inputs),\r\n          },\r\n        ]\r\n      : []\r\n  }, [contract, fragment, inputs])\r\n\r\n  const result = useCallsData(calls, options)[0]\r\n  const { currentBlock } = useBlock()\r\n\r\n  return useMemo(() => {\r\n    return toCallState(result, contract?.interface, fragment, currentBlock)\r\n  }, [result, contract, fragment, currentBlock])\r\n}\r\n","import React, { createContext, useCallback, useEffect, useState } from 'react'\r\nimport { Language } from '@pancakeswap/uikit'\r\nimport { EN, languages } from 'config/localization/languages'\r\nimport translations from 'config/localization/translations.json'\r\nimport { ContextApi, ContextData, ProviderState } from './types'\r\nimport { LS_KEY, fetchLocale, getLanguageCodeFromLS } from './helpers'\r\n\r\nconst initialState: ProviderState = {\r\n  isFetching: true,\r\n  currentLanguage: EN,\r\n}\r\n\r\n// Export the translations directly\r\nexport const languageMap = new Map<Language['locale'], Record<string, string>>()\r\nlanguageMap.set(EN.locale, translations)\r\n\r\nexport const LanguageContext = createContext<ContextApi>(undefined)\r\n\r\nexport const LanguageProvider: React.FC = ({ children }) => {\r\n  const [state, setState] = useState<ProviderState>(() => {\r\n    const codeFromStorage = getLanguageCodeFromLS()\r\n\r\n    return {\r\n      ...initialState,\r\n      currentLanguage: languages[codeFromStorage],\r\n    }\r\n  })\r\n  const { currentLanguage } = state\r\n\r\n  useEffect(() => {\r\n    const fetchInitialLocales = async () => {\r\n      const codeFromStorage = getLanguageCodeFromLS()\r\n\r\n      if (codeFromStorage !== EN.locale) {\r\n        const enLocale = languageMap.get(EN.locale)\r\n        const currentLocale = await fetchLocale(codeFromStorage)\r\n        languageMap.set(codeFromStorage, { ...enLocale, ...currentLocale })\r\n      }\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: false,\r\n      }))\r\n    }\r\n\r\n    fetchInitialLocales()\r\n  }, [setState])\r\n\r\n  const setLanguage = async (language: Language) => {\r\n    if (!languageMap.has(language.locale)) {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: true,\r\n      }))\r\n\r\n      const locale = await fetchLocale(language.locale)\r\n      const enLocale = languageMap.get(EN.locale)\r\n\r\n      // Merge the EN locale to ensure that any locale fetched has all the keys\r\n      languageMap.set(language.locale, { ...enLocale, ...locale })\r\n      localStorage.setItem(LS_KEY, language.locale)\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: false,\r\n        currentLanguage: language,\r\n      }))\r\n    } else {\r\n      localStorage.setItem(LS_KEY, language.locale)\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: false,\r\n        currentLanguage: language,\r\n      }))\r\n    }\r\n  }\r\n\r\n  const translate = useCallback(\r\n    (key: string, data?: ContextData) => {\r\n      const translationSet = languageMap.has(currentLanguage.locale)\r\n        ? languageMap.get(currentLanguage.locale)\r\n        : languageMap.get(EN.locale)\r\n      const translatedText = translationSet[key] || key\r\n\r\n      // Check the existence of at least one combination of %%, separated by 1 or more non space characters\r\n      const includesVariable = translatedText.match(/%\\S+?%/gm)\r\n\r\n      if (includesVariable && data) {\r\n        let interpolatedText = translatedText\r\n        Object.keys(data).forEach((dataKey) => {\r\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\r\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey].toString())\r\n        })\r\n\r\n        return interpolatedText\r\n      }\r\n\r\n      return translatedText\r\n    },\r\n    [currentLanguage],\r\n  )\r\n\r\n  return <LanguageContext.Provider value={{ ...state, setLanguage, t: translate }}>{children}</LanguageContext.Provider>\r\n}\r\n","import { useContext } from 'react'\r\nimport { LanguageContext } from './Provider'\r\n\r\nconst useTranslation = () => {\r\n  const languageContext = useContext(LanguageContext)\r\n\r\n  if (languageContext === undefined) {\r\n    throw new Error('Language context is undefined')\r\n  }\r\n\r\n  return languageContext\r\n}\r\n\r\nexport default useTranslation\r\n","import { createAction } from '@reduxjs/toolkit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string\r\n  from: string\r\n  contractAddress: string\r\n  transactionIndex: number\r\n  blockHash: string\r\n  transactionHash: string\r\n  blockNumber: number\r\n  status?: number\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId\r\n  hash: string\r\n  from: string\r\n  approval?: { tokenAddress: string; spender: string }\r\n  claim?: { recipient: string }\r\n  summary?: string\r\n}>('transactions/addTransaction')\r\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions')\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId\r\n  hash: string\r\n  receipt: SerializableTransactionReceipt\r\n}>('transactions/finalizeTransaction')\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId\r\n  hash: string\r\n  blockNumber: number\r\n}>('transactions/checkedTransaction')\r\n","import { ethers } from 'ethers'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\n\r\nexport const simpleRpcProvider = new ethers.providers.StaticJsonRpcProvider(RPC_URL)\r\n\r\nexport default null\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { LotteryStatus, LotteryTicket } from 'config/constants/types'\r\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\r\nimport { getLotteryV2Address } from 'utils/addressHelpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { LotteryRound, LotteryRoundUserTickets, LotteryResponse } from 'state/types'\r\nimport { getLotteryV2Contract } from 'utils/contractHelpers'\r\nimport { useMemo } from 'react'\r\nimport { ethersToSerializedBigNumber } from 'utils/bigNumber'\r\nimport { NUM_ROUNDS_TO_FETCH_FROM_NODES } from 'config/constants/lottery'\r\n\r\nconst lotteryContract = getLotteryV2Contract()\r\n\r\nconst processViewLotterySuccessResponse = (response, lotteryId: string): LotteryResponse => {\r\n  const {\r\n    status,\r\n    startTime,\r\n    endTime,\r\n    priceTicketInCake,\r\n    discountDivisor,\r\n    treasuryFee,\r\n    firstTicketId,\r\n    lastTicketId,\r\n    amountCollectedInCake,\r\n    finalNumber,\r\n    cakePerBracket,\r\n    countWinnersPerBracket,\r\n    rewardsBreakdown,\r\n  } = response\r\n\r\n  const statusKey = Object.keys(LotteryStatus)[status]\r\n  const serializedCakePerBracket = cakePerBracket.map((cakeInBracket) => ethersToSerializedBigNumber(cakeInBracket))\r\n  const serializedCountWinnersPerBracket = countWinnersPerBracket.map((winnersInBracket) =>\r\n    ethersToSerializedBigNumber(winnersInBracket),\r\n  )\r\n  const serializedRewardsBreakdown = rewardsBreakdown.map((reward) => ethersToSerializedBigNumber(reward))\r\n\r\n  return {\r\n    isLoading: false,\r\n    lotteryId,\r\n    status: LotteryStatus[statusKey],\r\n    startTime: startTime?.toString(),\r\n    endTime: endTime?.toString(),\r\n    priceTicketInCake: ethersToSerializedBigNumber(priceTicketInCake),\r\n    discountDivisor: discountDivisor?.toString(),\r\n    treasuryFee: treasuryFee?.toString(),\r\n    firstTicketId: firstTicketId?.toString(),\r\n    lastTicketId: lastTicketId?.toString(),\r\n    amountCollectedInCake: ethersToSerializedBigNumber(amountCollectedInCake),\r\n    finalNumber,\r\n    cakePerBracket: serializedCakePerBracket,\r\n    countWinnersPerBracket: serializedCountWinnersPerBracket,\r\n    rewardsBreakdown: serializedRewardsBreakdown,\r\n  }\r\n}\r\n\r\nconst processViewLotteryErrorResponse = (lotteryId: string): LotteryResponse => {\r\n  return {\r\n    isLoading: true,\r\n    lotteryId,\r\n    status: LotteryStatus.PENDING,\r\n    startTime: '',\r\n    endTime: '',\r\n    priceTicketInCake: '',\r\n    discountDivisor: '',\r\n    treasuryFee: '',\r\n    firstTicketId: '',\r\n    lastTicketId: '',\r\n    amountCollectedInCake: '',\r\n    finalNumber: null,\r\n    cakePerBracket: [],\r\n    countWinnersPerBracket: [],\r\n    rewardsBreakdown: [],\r\n  }\r\n}\r\n\r\nexport const fetchLottery = async (lotteryId: string): Promise<LotteryResponse> => {\r\n  try {\r\n    const lotteryData = await lotteryContract.viewLottery(lotteryId)\r\n    return processViewLotterySuccessResponse(lotteryData, lotteryId)\r\n  } catch (error) {\r\n    return processViewLotteryErrorResponse(lotteryId)\r\n  }\r\n}\r\n\r\nexport const fetchMultipleLotteries = async (lotteryIds: string[]): Promise<LotteryResponse[]> => {\r\n  const calls = lotteryIds.map((id) => ({\r\n    name: 'viewLottery',\r\n    address: getLotteryV2Address(),\r\n    params: [id],\r\n  }))\r\n  try {\r\n    const multicallRes = await multicallv2(lotteryV2Abi, calls, { requireSuccess: false })\r\n    const processedResponses = multicallRes.map((res, index) =>\r\n      processViewLotterySuccessResponse(res[0], lotteryIds[index]),\r\n    )\r\n    return processedResponses\r\n  } catch (error) {\r\n    console.error(error)\r\n    return calls.map((call, index) => processViewLotteryErrorResponse(lotteryIds[index]))\r\n  }\r\n}\r\n\r\nexport const fetchCurrentLotteryIdAndMaxBuy = async () => {\r\n  try {\r\n    const calls = ['currentLotteryId', 'maxNumberTicketsPerBuyOrClaim'].map((method) => ({\r\n      address: getLotteryV2Address(),\r\n      name: method,\r\n    }))\r\n    const [[currentLotteryId], [maxNumberTicketsPerBuyOrClaim]] = (await multicallv2(\r\n      lotteryV2Abi,\r\n      calls,\r\n    )) as ethers.BigNumber[][]\r\n\r\n    return {\r\n      currentLotteryId: currentLotteryId ? currentLotteryId.toString() : null,\r\n      maxNumberTicketsPerBuyOrClaim: maxNumberTicketsPerBuyOrClaim ? maxNumberTicketsPerBuyOrClaim.toString() : null,\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      currentLotteryId: null,\r\n      maxNumberTicketsPerBuyOrClaim: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport const getRoundIdsArray = (currentLotteryId: string): string[] => {\r\n  const currentIdAsInt = parseInt(currentLotteryId, 10)\r\n  const roundIds = []\r\n  for (let i = 0; i < NUM_ROUNDS_TO_FETCH_FROM_NODES; i++) {\r\n    roundIds.push(currentIdAsInt - i)\r\n  }\r\n  return roundIds.map((roundId) => roundId.toString())\r\n}\r\n\r\nexport const useProcessLotteryResponse = (\r\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\r\n): LotteryRound => {\r\n  const {\r\n    priceTicketInCake: priceTicketInCakeAsString,\r\n    discountDivisor: discountDivisorAsString,\r\n    amountCollectedInCake: amountCollectedInCakeAsString,\r\n  } = lotteryData\r\n\r\n  const discountDivisor = useMemo(() => {\r\n    return new BigNumber(discountDivisorAsString)\r\n  }, [discountDivisorAsString])\r\n\r\n  const priceTicketInCake = useMemo(() => {\r\n    return new BigNumber(priceTicketInCakeAsString)\r\n  }, [priceTicketInCakeAsString])\r\n\r\n  const amountCollectedInCake = useMemo(() => {\r\n    return new BigNumber(amountCollectedInCakeAsString)\r\n  }, [amountCollectedInCakeAsString])\r\n\r\n  return {\r\n    isLoading: lotteryData.isLoading,\r\n    lotteryId: lotteryData.lotteryId,\r\n    userTickets: lotteryData.userTickets,\r\n    status: lotteryData.status,\r\n    startTime: lotteryData.startTime,\r\n    endTime: lotteryData.endTime,\r\n    priceTicketInCake,\r\n    discountDivisor,\r\n    treasuryFee: lotteryData.treasuryFee,\r\n    firstTicketId: lotteryData.firstTicketId,\r\n    lastTicketId: lotteryData.lastTicketId,\r\n    amountCollectedInCake,\r\n    finalNumber: lotteryData.finalNumber,\r\n    cakePerBracket: lotteryData.cakePerBracket,\r\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\r\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\r\n  }\r\n}\r\n\r\nexport const hasRoundBeenClaimed = (tickets: LotteryTicket[]): boolean => {\r\n  const claimedTickets = tickets.filter((ticket) => ticket.status)\r\n  return claimedTickets.length > 0\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ProfileState, ProfileAvatarFetchStatus, Profile } from 'state/types'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getProfile, getProfileAvatar, getUsername } from './helpers'\r\n\r\nexport const initialState: ProfileState = {\r\n  isInitialized: false,\r\n  isLoading: false,\r\n  hasRegistered: false,\r\n  data: null,\r\n  profileAvatars: {},\r\n}\r\n\r\nexport const fetchProfile = createAsyncThunk<{ hasRegistered: boolean; profile?: Profile }, string>(\r\n  'profile/fetchProfile',\r\n  async (account) => {\r\n    const { hasRegistered, profile } = await getProfile(account)\r\n    return { hasRegistered, profile }\r\n  },\r\n)\r\n\r\nexport const fetchProfileAvatar = createAsyncThunk<{ account: string; nft: NftToken; hasRegistered: boolean }, string>(\r\n  'profile/fetchProfileAvatar',\r\n  async (account) => {\r\n    const { nft, hasRegistered } = await getProfileAvatar(account)\r\n    return { account, nft, hasRegistered }\r\n  },\r\n)\r\n\r\nexport const fetchProfileUsername = createAsyncThunk<\r\n  { account: string; username: string },\r\n  { account: string; hasRegistered: boolean }\r\n>('profile/fetchProfileUsername', async ({ account, hasRegistered }) => {\r\n  if (!hasRegistered) {\r\n    return { account, username: '' }\r\n  }\r\n  const username = await getUsername(account)\r\n  return { account, username }\r\n})\r\n\r\nexport const profileSlice = createSlice({\r\n  name: 'profile',\r\n  initialState,\r\n  reducers: {\r\n    profileClear: () => ({\r\n      ...initialState,\r\n      isLoading: false,\r\n    }),\r\n    addPoints: (state, action: PayloadAction<number>) => {\r\n      state.data.points += action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchProfile.pending, (state) => {\r\n      state.isLoading = true\r\n    })\r\n    builder.addCase(fetchProfile.fulfilled, (state, action) => {\r\n      const { hasRegistered, profile } = action.payload\r\n\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.hasRegistered = hasRegistered\r\n      state.data = profile\r\n    })\r\n    builder.addCase(fetchProfile.rejected, (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    })\r\n    builder.addCase(fetchProfileUsername.pending, (state, action) => {\r\n      const { account } = action.meta.arg\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHING,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          hasRegistered: false,\r\n          username: null,\r\n          nft: null,\r\n          // I think in theory this else should never be reached since we only check for username after we checked for profile/avatar\r\n          // just in case I set isFetchingAvatar will be ProfileAvatarFetchStatus.FETCHED at this point to avoid refetching\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHING,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchProfileUsername.fulfilled, (state, action) => {\r\n      const { account, username } = action.payload\r\n\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          username,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          username,\r\n          nft: null,\r\n          hasRegistered: true,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n          // I think in theory this else should never be reached since we only check for username after we checked for profile/avatar\r\n          // just in case I set isFetchingAvatar will be ProfileAvatarFetchStatus.FETCHED at this point to avoid refetching\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchProfileUsername.rejected, (state, action) => {\r\n      const { account } = action.meta.arg\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          username: '',\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          hasRegistered: false,\r\n          username: '',\r\n          nft: null,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchProfileAvatar.pending, (state, action) => {\r\n      const account = action.meta.arg\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          hasRegistered: false,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHING,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          username: null,\r\n          nft: null,\r\n          hasRegistered: false,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.NOT_FETCHED,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHING,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchProfileAvatar.fulfilled, (state, action) => {\r\n      const { account, nft, hasRegistered } = action.payload\r\n\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          nft,\r\n          hasRegistered,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          username: null,\r\n          nft,\r\n          hasRegistered,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.NOT_FETCHED,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchProfileAvatar.rejected, (state, action) => {\r\n      const account = action.meta.arg\r\n\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          nft: null,\r\n          hasRegistered: false,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          username: null,\r\n          nft: null,\r\n          hasRegistered: false,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.NOT_FETCHED,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      }\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { profileClear, addPoints } = profileSlice.actions\r\n\r\nexport default profileSlice.reducer\r\n","import { Language } from '@pancakeswap/uikit'\r\n\r\nexport const AR: Language = { locale: 'ar-SA', language: 'العربية', code: 'ar' }\r\nexport const BN: Language = { locale: 'bn-BD', language: 'বাংলা', code: 'bn' }\r\nexport const EN: Language = { locale: 'en-US', language: 'English', code: 'en' }\r\nexport const DE: Language = { locale: 'de-DE', language: 'Deutsch', code: 'de' }\r\nexport const EL: Language = { locale: 'el-GR', language: 'Ελληνικά', code: 'el' }\r\nexport const ESES: Language = { locale: 'es-ES', language: 'Español', code: 'es-ES' }\r\nexport const FI: Language = { locale: 'fi-FI', language: 'Suomalainen', code: 'fi' }\r\nexport const FIL: Language = { locale: 'fil-PH', language: 'Filipino', code: 'fil' }\r\nexport const FR: Language = { locale: 'fr-FR', language: 'Français', code: 'fr' }\r\nexport const HI: Language = { locale: 'hi-IN', language: 'हिंदी', code: 'hi' }\r\nexport const HU: Language = { locale: 'hu-HU', language: 'Magyar', code: 'hu' }\r\nexport const ID: Language = { locale: 'id-ID', language: 'Bahasa Indonesia', code: 'id' }\r\nexport const IT: Language = { locale: 'it-IT', language: 'Italiano', code: 'it' }\r\nexport const JA: Language = { locale: 'ja-JP', language: '日本語', code: 'ja' }\r\nexport const KO: Language = { locale: 'ko-KR', language: '한국어', code: 'ko' }\r\nexport const NL: Language = { locale: 'nl-NL', language: 'Nederlands', code: 'nl' }\r\nexport const PL: Language = { locale: 'pl-PL', language: 'Polski', code: 'pl' }\r\nexport const PTBR: Language = { locale: 'pt-BR', language: 'Português (Brazil)', code: 'pt-br' }\r\nexport const PTPT: Language = { locale: 'pt-PT', language: 'Português', code: 'pt-pt' }\r\nexport const RO: Language = { locale: 'ro-RO', language: 'Română', code: 'ro' }\r\nexport const RU: Language = { locale: 'ru-RU', language: 'Русский', code: 'ru' }\r\nexport const SVSE: Language = { locale: 'sv-SE', language: 'Svenska', code: 'sv' }\r\nexport const TA: Language = { locale: 'ta-IN', language: 'தமிழ்', code: 'ta' }\r\nexport const TR: Language = { locale: 'tr-TR', language: 'Türkçe', code: 'tr' }\r\nexport const UK: Language = { locale: 'uk-UA', language: 'Українська', code: 'uk' }\r\nexport const VI: Language = { locale: 'vi-VN', language: 'Tiếng Việt', code: 'vi' }\r\nexport const ZHCN: Language = { locale: 'zh-CN', language: '简体中文', code: 'zh-cn' }\r\nexport const ZHTW: Language = { locale: 'zh-TW', language: '繁體中文', code: 'zh-tw' }\r\n\r\nexport const languages = {\r\n  'ar-SA': AR,\r\n  'bn-BD': BN,\r\n  'en-US': EN,\r\n  'de-DE': DE,\r\n  'el-GR': EL,\r\n  'es-ES': ESES,\r\n  'fi-FI': FI,\r\n  'fil-PH': FIL,\r\n  'fr-FR': FR,\r\n  'hi-IN': HI,\r\n  'hu-HU': HU,\r\n  'id-ID': ID,\r\n  'it-IT': IT,\r\n  'ja-JP': JA,\r\n  'ko-KR': KO,\r\n  'nl-NL': NL,\r\n  'pl-PL': PL,\r\n  'pt-BR': PTBR,\r\n  'pt-PT': PTPT,\r\n  'ro-RO': RO,\r\n  'ru-RU': RU,\r\n  'sv-SE': SVSE,\r\n  'ta-IN': TA,\r\n  'tr-TR': TR,\r\n  'uk-UA': UK,\r\n  'vi-VN': VI,\r\n  'zh-CN': ZHCN,\r\n  'zh-TW': ZHTW,\r\n}\r\n\r\nexport const languageList = Object.values(languages)\r\n","import { Address } from '../types'\r\n\r\nexport enum CollectionKey {\r\n  PANCAKE = 'pancake',\r\n  SQUAD = 'pancakeSquad',\r\n}\r\n\r\nexport type Collection = {\r\n  name: string\r\n  description?: string\r\n  slug: string\r\n  address: Address\r\n}\r\n\r\nexport type Collections = {\r\n  [key in CollectionKey]: Collection\r\n}\r\n","import { Collections, CollectionKey } from './types'\r\n\r\nconst collections: Collections = {\r\n  [CollectionKey.PANCAKE]: {\r\n    name: 'Pancake Bunnies',\r\n    slug: 'pancake-bunnies',\r\n    address: {\r\n      56: '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07',\r\n      97: '0x60935F36e4631F73f0f407e68642144e07aC7f5E',\r\n    },\r\n  },\r\n  [CollectionKey.SQUAD]: {\r\n    name: 'Pancake Squad',\r\n    description: \"PancakeSwap's first official generative NFT collection.. Join the squad.\",\r\n    slug: 'pancake-squad',\r\n    address: {\r\n      56: '0x0a8901b0E25DEb55A87524f0cC164E9644020EBA',\r\n      97: '0xEf12ef570300bFA65c4F022deAaA3dfF4f5d5c91',\r\n    },\r\n  },\r\n}\r\n\r\nexport default collections\r\n","import collections from 'config/constants/nftsCollections'\r\nimport { CollectionKey } from 'config/constants/nftsCollections/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nexport const nftsBaseUrl = '/nfts'\r\nexport const pancakeBunniesAddress = getAddress(collections[CollectionKey.PANCAKE].address)\r\nexport const pancakeSquadAddress = getAddress(collections[CollectionKey.SQUAD].address)\r\n"],"sourceRoot":""}